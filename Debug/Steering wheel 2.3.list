
Steering wheel 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005944  08005944  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005944  08005944  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005944  08005944  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800594c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  20000014  08005960  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de8  08005960  00020de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faeb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a71  00000000  00000000  0002fb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  000325a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00033510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003637  00000000  00000000  00034348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011025  00000000  00000000  0003797f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd987  00000000  00000000  000489a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010632b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e60  00000000  00000000  0010637c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	080058b0 	.word	0x080058b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	080058b0 	.word	0x080058b0

08000220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b092      	sub	sp, #72	; 0x48
 8000224:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000226:	f000 fb82 	bl	800092e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022a:	f000 f865 	bl	80002f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022e:	f000 f8e9 	bl	8000404 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000232:	f000 f8a1 	bl	8000378 <MX_I2C1_Init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of ECU_ACK */
	osSemaphoreDef(ECU_ACK);
 8000236:	2300      	movs	r3, #0
 8000238:	647b      	str	r3, [r7, #68]	; 0x44
	ECU_ACKHandle = osSemaphoreCreate(osSemaphore(ECU_ACK), 1);
 800023a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800023e:	2101      	movs	r1, #1
 8000240:	4618      	mov	r0, r3
 8000242:	f003 f917 	bl	8003474 <osSemaphoreCreate>
 8000246:	4603      	mov	r3, r0
 8000248:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <main+0xb4>)
 800024a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of ECUQueue */
	osMessageQDef(ECUQueue, 10, struct InputEvent);
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <main+0xb8>)
 800024e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000256:	e883 0003 	stmia.w	r3, {r0, r1}
	ECUQueueHandle = osMessageCreate(osMessageQ(ECUQueue), NULL);
 800025a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f003 f925 	bl	80034b0 <osMessageCreate>
 8000266:	4603      	mov	r3, r0
 8000268:	4a1c      	ldr	r2, [pc, #112]	; (80002dc <main+0xbc>)
 800026a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Watchdog */
	osThreadDef(Watchdog, StartWatchdog, osPriorityNormal, 0, 128);
 800026c:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <main+0xc0>)
 800026e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	682b      	ldr	r3, [r5, #0]
 800027a:	6023      	str	r3, [r4, #0]
	WatchdogHandle = osThreadCreate(osThread(Watchdog), NULL);
 800027c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f003 f8bb 	bl	80033fe <osThreadCreate>
 8000288:	4603      	mov	r3, r0
 800028a:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <main+0xc4>)
 800028c:	6013      	str	r3, [r2, #0]

	/* definition and creation of ECUTask */
	osThreadDef(ECUTask, StartECUTask, osPriorityNormal, 0, 128);
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <main+0xc8>)
 8000290:	f107 0414 	add.w	r4, r7, #20
 8000294:	461d      	mov	r5, r3
 8000296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029a:	682b      	ldr	r3, [r5, #0]
 800029c:	6023      	str	r3, [r4, #0]
	ECUTaskHandle = osThreadCreate(osThread(ECUTask), NULL);
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f003 f8aa 	bl	80033fe <osThreadCreate>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <main+0xcc>)
 80002ae:	6013      	str	r3, [r2, #0]

	/* definition and creation of InputTask */
	osThreadDef(InputTask, StartInputTask, osPriorityNormal, 0, 128);
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <main+0xd0>)
 80002b2:	463c      	mov	r4, r7
 80002b4:	461d      	mov	r5, r3
 80002b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ba:	682b      	ldr	r3, [r5, #0]
 80002bc:	6023      	str	r3, [r4, #0]
	InputTaskHandle = osThreadCreate(osThread(InputTask), NULL);
 80002be:	463b      	mov	r3, r7
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 f89b 	bl	80033fe <osThreadCreate>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <main+0xd4>)
 80002cc:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002ce:	f003 f88f 	bl	80033f0 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002d2:	e7fe      	b.n	80002d2 <main+0xb2>
 80002d4:	2000008c 	.word	0x2000008c
 80002d8:	080058e8 	.word	0x080058e8
 80002dc:	20000088 	.word	0x20000088
 80002e0:	080058f0 	.word	0x080058f0
 80002e4:	2000007c 	.word	0x2000007c
 80002e8:	08005904 	.word	0x08005904
 80002ec:	20000080 	.word	0x20000080
 80002f0:	08005918 	.word	0x08005918
 80002f4:	20000084 	.word	0x20000084

080002f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b094      	sub	sp, #80	; 0x50
 80002fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2238      	movs	r2, #56	; 0x38
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f005 faca 	bl	80058a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800031e:	f002 f8bf 	bl	80024a0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2340      	movs	r3, #64	; 0x40
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	2300      	movs	r3, #0
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f002 f955 	bl	80025e8 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x50>
		Error_Handler();
 8000344:	f000 f9f0 	bl	8000728 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fc59 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x78>
		Error_Handler();
 800036c:	f000 f9dc 	bl	8000728 <Error_Handler>
	}
}
 8000370:	bf00      	nop
 8000372:	3750      	adds	r7, #80	; 0x50
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800037c:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <MX_I2C1_Init+0x7c>)
 800037e:	4a1e      	ldr	r2, [pc, #120]	; (80003f8 <MX_I2C1_Init+0x80>)
 8000380:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <MX_I2C1_Init+0x7c>)
 8000384:	4a1d      	ldr	r2, [pc, #116]	; (80003fc <MX_I2C1_Init+0x84>)
 8000386:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 64;
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_I2C1_Init+0x7c>)
 800038a:	2240      	movs	r2, #64	; 0x40
 800038c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_I2C1_Init+0x7c>)
 8000390:	2201      	movs	r2, #1
 8000392:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_I2C1_Init+0x7c>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_I2C1_Init+0x7c>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80003b2:	4810      	ldr	r0, [pc, #64]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003b4:	f000 fe50 	bl	8001058 <HAL_I2C_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80003be:	f000 f9b3 	bl	8000728 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80003c2:	2100      	movs	r1, #0
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003c6:	f001 ffd3 	bl	8002370 <HAL_I2CEx_ConfigAnalogFilter>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80003d0:	f000 f9aa 	bl	8000728 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80003d4:	2100      	movs	r1, #0
 80003d6:	4807      	ldr	r0, [pc, #28]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003d8:	f002 f815 	bl	8002406 <HAL_I2CEx_ConfigDigitalFilter>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80003e2:	f000 f9a1 	bl	8000728 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	HAL_I2C_Slave_Transmit_IT(&hi2c1, dataBuffer, BUFFER_SIZE); // Start listening for requests
 80003e6:	2202      	movs	r2, #2
 80003e8:	4905      	ldr	r1, [pc, #20]	; (8000400 <MX_I2C1_Init+0x88>)
 80003ea:	4802      	ldr	r0, [pc, #8]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003ec:	f000 fec4 	bl	8001178 <HAL_I2C_Slave_Transmit_IT>
	/* USER CODE END I2C1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000030 	.word	0x20000030
 80003f8:	40005400 	.word	0x40005400
 80003fc:	00303d5b 	.word	0x00303d5b
 8000400:	20000000 	.word	0x20000000

08000404 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b31      	ldr	r3, [pc, #196]	; (80004e0 <MX_GPIO_Init+0xdc>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a30      	ldr	r2, [pc, #192]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a2a      	ldr	r2, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0302 	and.w	r3, r3, #2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin | DISP_RES_Pin | DISP_SA0_Pin,
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 fdce 	bl	8000ff4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045e:	4821      	ldr	r0, [pc, #132]	; (80004e4 <MX_GPIO_Init+0xe0>)
 8000460:	f000 fdc8 	bl	8000ff4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : JOY_RIGHT_Pin BTN_RIGHT_UP_Pin BTN_RIGHT_DOWN_Pin */
	GPIO_InitStruct.Pin = JOY_RIGHT_Pin | BTN_RIGHT_UP_Pin | BTN_RIGHT_DOWN_Pin;
 8000464:	23c4      	movs	r3, #196	; 0xc4
 8000466:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 fc21 	bl	8000cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_LEFT_DOWN_Pin BTN_LEFT_UP_Pin JOY_DOWN_Pin JOY_PRESS_Pin
	 JOY_UP_Pin JOY_LEFT_Pin */
	GPIO_InitStruct.Pin = BTN_LEFT_DOWN_Pin | BTN_LEFT_UP_Pin | JOY_DOWN_Pin
 800047e:	f24c 0378 	movw	r3, #49272	; 0xc078
 8000482:	60fb      	str	r3, [r7, #12]
			| JOY_PRESS_Pin | JOY_UP_Pin | JOY_LEFT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	4619      	mov	r1, r3
 8000492:	4814      	ldr	r0, [pc, #80]	; (80004e4 <MX_GPIO_Init+0xe0>)
 8000494:	f000 fc14 	bl	8000cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DEBUG_LED_Pin DISP_RES_Pin DISP_SA0_Pin */
	GPIO_InitStruct.Pin = DEBUG_LED_Pin | DISP_RES_Pin | DISP_SA0_Pin;
 8000498:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800049c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fc04 	bl	8000cc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : INTERRUPT_LINE_Pin */
	GPIO_InitStruct.Pin = INTERRUPT_LINE_Pin;
 80004b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(INTERRUPT_LINE_GPIO_Port, &GPIO_InitStruct);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4619      	mov	r1, r3
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_GPIO_Init+0xe0>)
 80004d2:	f000 fbf5 	bl	8000cc0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80004d6:	bf00      	nop
 80004d8:	3720      	adds	r7, #32
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000400 	.word	0x48000400

080004e8 <HAL_I2C_SlaveTxCpltCallback>:
	HAL_GPIO_WritePin(DISP_RES_GPIO_Port, DISP_RES_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(DISP_SA0_GPIO_Port, DISP_SA0_Pin, GPIO_PIN_RESET);

}

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Transmit_IT(&hi2c1, dataBuffer, BUFFER_SIZE);
 80004f0:	2202      	movs	r2, #2
 80004f2:	490c      	ldr	r1, [pc, #48]	; (8000524 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 80004f6:	f000 fe3f 	bl	8001178 <HAL_I2C_Slave_Transmit_IT>
	HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <HAL_I2C_SlaveTxCpltCallback+0x44>)
 8000502:	f000 fd77 	bl	8000ff4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(ECU_ACKHandle, &xHigherPriorityTaskWoken);
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f107 020c 	add.w	r2, r7, #12
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fa4d 	bl	80039b4 <xQueueGiveFromISR>
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000
 8000528:	20000030 	.word	0x20000030
 800052c:	48000400 	.word	0x48000400
 8000530:	2000008c 	.word	0x2000008c

08000534 <checkJoystick>:
		e.group = noGroup;
	}
	return e;
}

struct InputEvent checkJoystick() {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
	struct InputEvent e;
	if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET) {
 800053a:	2120      	movs	r1, #32
 800053c:	483b      	ldr	r0, [pc, #236]	; (800062c <checkJoystick+0xf8>)
 800053e:	f000 fd41 	bl	8000fc4 <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10c      	bne.n	8000562 <checkJoystick+0x2e>
		while (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET) {
 8000548:	bf00      	nop
 800054a:	2120      	movs	r1, #32
 800054c:	4837      	ldr	r0, [pc, #220]	; (800062c <checkJoystick+0xf8>)
 800054e:	f000 fd39 	bl	8000fc4 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	d0f8      	beq.n	800054a <checkJoystick+0x16>
		}
		e.button = 0x01;
 8000558:	2301      	movs	r3, #1
 800055a:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 800055c:	2301      	movs	r3, #1
 800055e:	703b      	strb	r3, [r7, #0]
 8000560:	e057      	b.n	8000612 <checkJoystick+0xde>
	} else if (HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin)
 8000562:	2104      	movs	r1, #4
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f000 fd2c 	bl	8000fc4 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10d      	bne.n	800058e <checkJoystick+0x5a>
			== GPIO_PIN_SET) {
		while (HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin)
 8000572:	bf00      	nop
 8000574:	2104      	movs	r1, #4
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f000 fd23 	bl	8000fc4 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d0f7      	beq.n	8000574 <checkJoystick+0x40>
				== GPIO_PIN_SET) {
		}
		e.button = 0x02;
 8000584:	2302      	movs	r3, #2
 8000586:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 8000588:	2301      	movs	r3, #1
 800058a:	703b      	strb	r3, [r7, #0]
 800058c:	e041      	b.n	8000612 <checkJoystick+0xde>
	} else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)
 800058e:	2108      	movs	r1, #8
 8000590:	4826      	ldr	r0, [pc, #152]	; (800062c <checkJoystick+0xf8>)
 8000592:	f000 fd17 	bl	8000fc4 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10c      	bne.n	80005b6 <checkJoystick+0x82>
			== GPIO_PIN_SET) {
		while (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)
 800059c:	bf00      	nop
 800059e:	2108      	movs	r1, #8
 80005a0:	4822      	ldr	r0, [pc, #136]	; (800062c <checkJoystick+0xf8>)
 80005a2:	f000 fd0f 	bl	8000fc4 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d0f8      	beq.n	800059e <checkJoystick+0x6a>
				== GPIO_PIN_SET) {
		}
		e.button = 0x03;
 80005ac:	2303      	movs	r3, #3
 80005ae:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 80005b0:	2301      	movs	r3, #1
 80005b2:	703b      	strb	r3, [r7, #0]
 80005b4:	e02d      	b.n	8000612 <checkJoystick+0xde>
	} else if (HAL_GPIO_ReadPin(JOY_LEFT_GPIO_Port, BTN_LEFT_UP_Pin)
 80005b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <checkJoystick+0xf8>)
 80005bc:	f000 fd02 	bl	8000fc4 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d10d      	bne.n	80005e2 <checkJoystick+0xae>
			== GPIO_PIN_SET) {
		while (HAL_GPIO_ReadPin(JOY_LEFT_GPIO_Port, BTN_LEFT_UP_Pin)
 80005c6:	bf00      	nop
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	4817      	ldr	r0, [pc, #92]	; (800062c <checkJoystick+0xf8>)
 80005ce:	f000 fcf9 	bl	8000fc4 <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d0f7      	beq.n	80005c8 <checkJoystick+0x94>
				== GPIO_PIN_SET) {
		}
		e.button = 0x04;
 80005d8:	2304      	movs	r3, #4
 80005da:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 80005dc:	2301      	movs	r3, #1
 80005de:	703b      	strb	r3, [r7, #0]
 80005e0:	e017      	b.n	8000612 <checkJoystick+0xde>
	} else if (HAL_GPIO_ReadPin(JOY_PRESS_GPIO_Port, JOY_PRESS_Pin)
 80005e2:	2110      	movs	r1, #16
 80005e4:	4811      	ldr	r0, [pc, #68]	; (800062c <checkJoystick+0xf8>)
 80005e6:	f000 fced 	bl	8000fc4 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d10c      	bne.n	800060a <checkJoystick+0xd6>
			== GPIO_PIN_SET) {
		while (HAL_GPIO_ReadPin(JOY_PRESS_GPIO_Port, JOY_PRESS_Pin)
 80005f0:	bf00      	nop
 80005f2:	2110      	movs	r1, #16
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <checkJoystick+0xf8>)
 80005f6:	f000 fce5 	bl	8000fc4 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d0f8      	beq.n	80005f2 <checkJoystick+0xbe>
				== GPIO_PIN_SET) {
		}
		e.button = 0x05;
 8000600:	2305      	movs	r3, #5
 8000602:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 8000604:	2301      	movs	r3, #1
 8000606:	703b      	strb	r3, [r7, #0]
 8000608:	e003      	b.n	8000612 <checkJoystick+0xde>
	} else {
		e.button = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	707b      	strb	r3, [r7, #1]
		e.group = noGroup;
 800060e:	2300      	movs	r3, #0
 8000610:	703b      	strb	r3, [r7, #0]
	}
	return e;
 8000612:	883b      	ldrh	r3, [r7, #0]
 8000614:	80bb      	strh	r3, [r7, #4]
 8000616:	2300      	movs	r3, #0
 8000618:	793a      	ldrb	r2, [r7, #4]
 800061a:	f362 0307 	bfi	r3, r2, #0, #8
 800061e:	797a      	ldrb	r2, [r7, #5]
 8000620:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	48000400 	.word	0x48000400

08000630 <StartWatchdog>:
 * @brief  Function implementing the Watchdog thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdog */
void StartWatchdog(void const *argument) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	for (;;) {
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000640:	f000 fcf0 	bl	8001024 <HAL_GPIO_TogglePin>
		if (0 < uxQueueMessagesWaiting(ECUQueueHandle)) {
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <StartWatchdog+0x38>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fc2d 	bl	8003ea8 <uxQueueMessagesWaiting>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d004      	beq.n	800065e <StartWatchdog+0x2e>
			osDelay(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000658:	f002 fef8 	bl	800344c <osDelay>
 800065c:	e7ec      	b.n	8000638 <StartWatchdog+0x8>
		} else {
			osDelay(200);
 800065e:	20c8      	movs	r0, #200	; 0xc8
 8000660:	f002 fef4 	bl	800344c <osDelay>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000664:	e7e8      	b.n	8000638 <StartWatchdog+0x8>
 8000666:	bf00      	nop
 8000668:	20000088 	.word	0x20000088

0800066c <StartECUTask>:
 * @brief Function implementing the ECUTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartECUTask */
void StartECUTask(void const *argument) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartECUTask */
	struct InputEvent e;
	BaseType_t ecuACK;
	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(ECUQueueHandle, &(e), (TickType_t) 10) == pdPASS) {
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <StartECUTask+0x70>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f107 0108 	add.w	r1, r7, #8
 800067c:	220a      	movs	r2, #10
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fa26 	bl	8003ad0 <xQueueReceive>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d11d      	bne.n	80006c6 <StartECUTask+0x5a>
			dataBuffer[0] = e.group;
 800068a:	7a3a      	ldrb	r2, [r7, #8]
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <StartECUTask+0x74>)
 800068e:	701a      	strb	r2, [r3, #0]
			dataBuffer[1] = e.button;
 8000690:	7a7a      	ldrb	r2, [r7, #9]
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <StartECUTask+0x74>)
 8000694:	705a      	strb	r2, [r3, #1]

			HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <StartECUTask+0x78>)
 800069e:	f000 fca9 	bl	8000ff4 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
			ecuACK = xSemaphoreTake(ECU_ACKHandle, 10000);
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <StartECUTask+0x7c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f242 7110 	movw	r1, #10000	; 0x2710
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 faf0 	bl	8003c90 <xQueueSemaphoreTake>
 80006b0:	60f8      	str	r0, [r7, #12]

			if (ecuACK == pdFALSE) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d10c      	bne.n	80006d2 <StartECUTask+0x66>
				xQueueReset(ECUQueueHandle);
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <StartECUTask+0x70>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 ffbc 	bl	800363c <xQueueGenericReset>
 80006c4:	e005      	b.n	80006d2 <StartECUTask+0x66>
			}

		} else {
			dataBuffer[0] = 0x00;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <StartECUTask+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
			dataBuffer[1] = 0x00;
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <StartECUTask+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	705a      	strb	r2, [r3, #1]
		}
		osDelay(200);
 80006d2:	20c8      	movs	r0, #200	; 0xc8
 80006d4:	f002 feba 	bl	800344c <osDelay>
		if (xQueueReceive(ECUQueueHandle, &(e), (TickType_t) 10) == pdPASS) {
 80006d8:	e7cc      	b.n	8000674 <StartECUTask+0x8>
 80006da:	bf00      	nop
 80006dc:	20000088 	.word	0x20000088
 80006e0:	20000000 	.word	0x20000000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	2000008c 	.word	0x2000008c

080006ec <StartInputTask>:
 * @brief Function implementing the InputTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInputTask */
void StartInputTask(void const *argument) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartInputTask */
	struct InputEvent input;
	input.group = 0x00;
 80006f4:	2300      	movs	r3, #0
 80006f6:	733b      	strb	r3, [r7, #12]
	input.button = 0x00;
 80006f8:	2300      	movs	r3, #0
 80006fa:	737b      	strb	r3, [r7, #13]

	/* Infinite loop */
	for (;;) {

		input = checkJoystick();
 80006fc:	f7ff ff1a 	bl	8000534 <checkJoystick>
 8000700:	4603      	mov	r3, r0
 8000702:	81bb      	strh	r3, [r7, #12]
		if (input.group != noGroup) {
 8000704:	7b3b      	ldrb	r3, [r7, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d007      	beq.n	800071a <StartInputTask+0x2e>
			xQueueSend(ECUQueueHandle, (void* ) &input, (TickType_t ) 0);
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <StartInputTask+0x38>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f107 010c 	add.w	r1, r7, #12
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	f003 f84f 	bl	80037b8 <xQueueGenericSend>
		}
		osDelay(50);
 800071a:	2032      	movs	r0, #50	; 0x32
 800071c:	f002 fe96 	bl	800344c <osDelay>
		input = checkJoystick();
 8000720:	e7ec      	b.n	80006fc <StartInputTask+0x10>
 8000722:	bf00      	nop
 8000724:	20000088 	.word	0x20000088

08000728 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_MspInit+0x4c>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <HAL_MspInit+0x4c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6613      	str	r3, [r2, #96]	; 0x60
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_MspInit+0x4c>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_MspInit+0x4c>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6593      	str	r3, [r2, #88]	; 0x58
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x4c>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	210f      	movs	r1, #15
 800076e:	f06f 0001 	mvn.w	r0, #1
 8000772:	f000 fa0a 	bl	8000b8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	; 0x70
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	2244      	movs	r2, #68	; 0x44
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f005 f87b 	bl	80058a0 <memset>
  if(hi2c->Instance==I2C1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <HAL_I2C_MspInit+0xe0>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d153      	bne.n	800085c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007b4:	2340      	movs	r3, #64	; 0x40
 80007b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fc0d 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007cc:	f7ff ffac 	bl	8000728 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	4a24      	ldr	r2, [pc, #144]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000806:	2312      	movs	r3, #18
 8000808:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000812:	2304      	movs	r3, #4
 8000814:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 fa4e 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000828:	2312      	movs	r3, #18
 800082a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000834:	2304      	movs	r3, #4
 8000836:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800083c:	4619      	mov	r1, r3
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <HAL_I2C_MspInit+0xe8>)
 8000840:	f000 fa3e 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 8000846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 800084a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084e:	6593      	str	r3, [r2, #88]	; 0x58
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_I2C_MspInit+0xe4>)
 8000852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3770      	adds	r7, #112	; 0x70
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40005400 	.word	0x40005400
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f898 	bl	80009d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008a4:	f004 f972 	bl	8004b8c <xTaskGetSchedulerState>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d001      	beq.n	80008b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008ae:	f004 fd4b 	bl	8005348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f004 ff97 	bl	800583c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fc87 	bl	8000220 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   r0, =_estack
 8000914:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000920:	0800594c 	.word	0x0800594c
  ldr r2, =_sbss
 8000924:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000928:	20000de8 	.word	0x20000de8

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>

0800092e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f91b 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093e:	200f      	movs	r0, #15
 8000940:	f000 f80e 	bl	8000960 <HAL_InitTick>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	e001      	b.n	8000954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000950:	f7ff fef0 	bl	8000734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000954:	79fb      	ldrb	r3, [r7, #7]

}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_InitTick+0x68>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d022      	beq.n	80009ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_InitTick+0x6c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <HAL_InitTick+0x68>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000980:	fbb1 f3f3 	udiv	r3, r1, r3
 8000984:	fbb2 f3f3 	udiv	r3, r2, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f918 	bl	8000bbe <HAL_SYSTICK_Config>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10f      	bne.n	80009b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b0f      	cmp	r3, #15
 8000998:	d809      	bhi.n	80009ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099a:	2200      	movs	r2, #0
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	f04f 30ff 	mov.w	r0, #4294967295
 80009a2:	f000 f8f2 	bl	8000b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_InitTick+0x70>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e007      	b.n	80009be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	e004      	b.n	80009be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e001      	b.n	80009be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000000c 	.word	0x2000000c
 80009cc:	20000004 	.word	0x20000004
 80009d0:	20000008 	.word	0x20000008

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <HAL_IncTick+0x1c>)
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20000090 	.word	0x20000090
 80009f4:	2000000c 	.word	0x2000000c

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000090 	.word	0x20000090

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff8e 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff47 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff5e 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff90 	bl	8000ac8 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5f 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffb2 	bl	8000b30 <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d00d      	beq.n	8000c0a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e047      	b.n	8000c9a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 020e 	bic.w	r2, r2, #14
 8000c18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0201 	bic.w	r2, r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f003 021f 	and.w	r2, r3, #31
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c56:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00c      	beq.n	8000c7a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c78:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	4798      	blx	r3
    }
  }
  return status;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cce:	e15a      	b.n	8000f86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 814c 	beq.w	8000f80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d005      	beq.n	8000d00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d130      	bne.n	8000d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d36:	2201      	movs	r2, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	f003 0201 	and.w	r2, r3, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d017      	beq.n	8000d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0203 	and.w	r2, r3, #3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 80a6 	beq.w	8000f80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b5b      	ldr	r3, [pc, #364]	; (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e38:	4a5a      	ldr	r2, [pc, #360]	; (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e40:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4c:	4a56      	ldr	r2, [pc, #344]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e76:	d01f      	beq.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4c      	ldr	r2, [pc, #304]	; (8000fac <HAL_GPIO_Init+0x2ec>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d019      	beq.n	8000eb4 <HAL_GPIO_Init+0x1f4>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d013      	beq.n	8000eb0 <HAL_GPIO_Init+0x1f0>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d00d      	beq.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d007      	beq.n	8000ea8 <HAL_GPIO_Init+0x1e8>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a48      	ldr	r2, [pc, #288]	; (8000fbc <HAL_GPIO_Init+0x2fc>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d101      	bne.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	e00a      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	e008      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	e006      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000eac:	2303      	movs	r3, #3
 8000eae:	e004      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e002      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	f002 0203 	and.w	r2, r2, #3
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	4093      	lsls	r3, r2
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eca:	4937      	ldr	r1, [pc, #220]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000efc:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f26:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f50:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f47f ae9d 	bne.w	8000cd0 <HAL_GPIO_Init+0x10>
  }
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	48000c00 	.word	0x48000c00
 8000fb8:	48001000 	.word	0x48001000
 8000fbc:	48001400 	.word	0x48001400
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e001      	b.n	8000fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001010:	e002      	b.n	8001018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43d9      	mvns	r1, r3
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	400b      	ands	r3, r1
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e081      	b.n	800116e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d106      	bne.n	8001084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fb80 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2224      	movs	r2, #36	; 0x24
 8001088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d107      	bne.n	80010d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	e006      	b.n	80010e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d104      	bne.n	80010f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001104:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001114:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69d9      	ldr	r1, [r3, #28]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1a      	ldr	r2, [r3, #32]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2220      	movs	r2, #32
 800115a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	4613      	mov	r3, r2
 8001184:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b20      	cmp	r3, #32
 8001190:	d139      	bne.n	8001206 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <HAL_I2C_Slave_Transmit_IT+0x28>
 800119c:	2302      	movs	r3, #2
 800119e:	e033      	b.n	8001208 <HAL_I2C_Slave_Transmit_IT+0x90>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2221      	movs	r2, #33	; 0x21
 80011ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2220      	movs	r2, #32
 80011b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2200      	movs	r2, #0
 80011bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011cc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	88fa      	ldrh	r2, [r7, #6]
 80011d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_I2C_Slave_Transmit_IT+0x98>)
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <HAL_I2C_Slave_Transmit_IT+0x9c>)
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80011f8:	f248 0101 	movw	r1, #32769	; 0x8001
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 fff5 	bl	80021ec <I2C_Enable_IRQ>

    return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001206:	2302      	movs	r3, #2
  }
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	ffff0000 	.word	0xffff0000
 8001214:	080012d5 	.word	0x080012d5

08001218 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
 8001260:	4613      	mov	r3, r2
 8001262:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <I2C_Slave_ISR_IT+0x24>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e0ec      	b.n	80014d2 <I2C_Slave_ISR_IT+0x1fe>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d009      	beq.n	8001320 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001318:	6939      	ldr	r1, [r7, #16]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 fc9a 	bl	8001c54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d04d      	beq.n	80013c8 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001334:	2b00      	cmp	r3, #0
 8001336:	d047      	beq.n	80013c8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133c:	b29b      	uxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d128      	bne.n	8001394 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b28      	cmp	r3, #40	; 0x28
 800134c:	d108      	bne.n	8001360 <I2C_Slave_ISR_IT+0x8c>
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001354:	d104      	bne.n	8001360 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001356:	6939      	ldr	r1, [r7, #16]
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 fd85 	bl	8001e68 <I2C_ITListenCplt>
 800135e:	e032      	b.n	80013c6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b29      	cmp	r3, #41	; 0x29
 800136a:	d10e      	bne.n	800138a <I2C_Slave_ISR_IT+0xb6>
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001372:	d00a      	beq.n	800138a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2210      	movs	r2, #16
 800137a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 fec0 	bl	8002102 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 fb3d 	bl	8001a02 <I2C_ITSlaveSeqCplt>
 8001388:	e01d      	b.n	80013c6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2210      	movs	r2, #16
 8001390:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001392:	e096      	b.n	80014c2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2210      	movs	r2, #16
 800139a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f043 0204 	orr.w	r2, r3, #4
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <I2C_Slave_ISR_IT+0xe4>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	f040 8085 	bne.w	80014c2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	4619      	mov	r1, r3
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 fda8 	bl	8001f14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80013c4:	e07d      	b.n	80014c2 <I2C_Slave_ISR_IT+0x1ee>
 80013c6:	e07c      	b.n	80014c2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d030      	beq.n	8001436 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02a      	beq.n	8001436 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d018      	beq.n	800141c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001406:	3b01      	subs	r3, #1
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001412:	b29b      	uxth	r3, r3
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001420:	b29b      	uxth	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d14f      	bne.n	80014c6 <I2C_Slave_ISR_IT+0x1f2>
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800142c:	d04b      	beq.n	80014c6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 fae7 	bl	8001a02 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001434:	e047      	b.n	80014c6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00a      	beq.n	8001458 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800144e:	6939      	ldr	r1, [r7, #16]
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 fa15 	bl	8001880 <I2C_ITAddrCplt>
 8001456:	e037      	b.n	80014c8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d031      	beq.n	80014c8 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800146c:	2b00      	cmp	r3, #0
 800146e:	d02b      	beq.n	80014c8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d018      	beq.n	80014ac <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	851a      	strh	r2, [r3, #40]	; 0x28
 80014aa:	e00d      	b.n	80014c8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b2:	d002      	beq.n	80014ba <I2C_Slave_ISR_IT+0x1e6>
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 faa1 	bl	8001a02 <I2C_ITSlaveSeqCplt>
 80014c0:	e002      	b.n	80014c8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80014c2:	bf00      	nop
 80014c4:	e000      	b.n	80014c8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80014c6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af02      	add	r7, sp, #8
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <I2C_Master_ISR_DMA+0x1a>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e0e1      	b.n	80016b8 <I2C_Master_ISR_DMA+0x1de>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d017      	beq.n	8001538 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2210      	movs	r2, #16
 800151a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f043 0204 	orr.w	r2, r3, #4
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001528:	2120      	movs	r1, #32
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fe5e 	bl	80021ec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fde6 	bl	8002102 <I2C_Flush_TXDR>
 8001536:	e0ba      	b.n	80016ae <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	09db      	lsrs	r3, r3, #7
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d072      	beq.n	800162a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	099b      	lsrs	r3, r3, #6
 8001548:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800154c:	2b00      	cmp	r3, #0
 800154e:	d06c      	beq.n	800162a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800155e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001564:	b29b      	uxth	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d04e      	beq.n	8001608 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	b29b      	uxth	r3, r3
 8001572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001576:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d906      	bls.n	8001590 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	22ff      	movs	r2, #255	; 0xff
 8001586:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e010      	b.n	80015b2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001594:	b29a      	uxth	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015a2:	d003      	beq.n	80015ac <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e002      	b.n	80015b2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80015ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015b0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	8a79      	ldrh	r1, [r7, #18]
 80015ba:	2300      	movs	r3, #0
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 fde1 	bl	8002188 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b22      	cmp	r3, #34	; 0x22
 80015e2:	d108      	bne.n	80015f6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015f2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80015f4:	e05b      	b.n	80016ae <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001604:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001606:	e052      	b.n	80016ae <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001616:	d003      	beq.n	8001620 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f9b5 	bl	8001988 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800161e:	e046      	b.n	80016ae <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001620:	2140      	movs	r1, #64	; 0x40
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fc76 	bl	8001f14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001628:	e041      	b.n	80016ae <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d029      	beq.n	800168a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800163e:	2b00      	cmp	r3, #0
 8001640:	d023      	beq.n	800168a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001646:	b29b      	uxth	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d119      	bne.n	8001680 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800165a:	d027      	beq.n	80016ac <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001664:	d108      	bne.n	8001678 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001674:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001676:	e019      	b.n	80016ac <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 f985 	bl	8001988 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800167e:	e015      	b.n	80016ac <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fc46 	bl	8001f14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001688:	e010      	b.n	80016ac <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	095b      	lsrs	r3, r3, #5
 800169a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 fa0b 	bl	8001ac0 <I2C_ITMasterCplt>
 80016aa:	e000      	b.n	80016ae <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80016ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <I2C_Slave_ISR_DMA+0x24>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e0c9      	b.n	8001878 <I2C_Slave_ISR_DMA+0x1b8>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d009      	beq.n	800170c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 faa4 	bl	8001c54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 809a 	beq.w	800184e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8093 	beq.w	800184e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0b9b      	lsrs	r3, r3, #14
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0bdb      	lsrs	r3, r3, #15
 8001738:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800173c:	2b00      	cmp	r3, #0
 800173e:	d07f      	beq.n	8001840 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00d      	beq.n	8001764 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0bdb      	lsrs	r3, r3, #15
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001760:	2301      	movs	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00d      	beq.n	8001788 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0b9b      	lsrs	r3, r3, #14
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001784:	2301      	movs	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d128      	bne.n	80017e0 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b28      	cmp	r3, #40	; 0x28
 8001798:	d108      	bne.n	80017ac <I2C_Slave_ISR_DMA+0xec>
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017a0:	d104      	bne.n	80017ac <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fb5f 	bl	8001e68 <I2C_ITListenCplt>
 80017aa:	e048      	b.n	800183e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b29      	cmp	r3, #41	; 0x29
 80017b6:	d10e      	bne.n	80017d6 <I2C_Slave_ISR_DMA+0x116>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017be:	d00a      	beq.n	80017d6 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2210      	movs	r2, #16
 80017c6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fc9a 	bl	8002102 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f917 	bl	8001a02 <I2C_ITSlaveSeqCplt>
 80017d4:	e033      	b.n	800183e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2210      	movs	r2, #16
 80017dc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80017de:	e034      	b.n	800184a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 0204 	orr.w	r2, r3, #4
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017fa:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <I2C_Slave_ISR_DMA+0x14a>
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001808:	d11f      	bne.n	800184a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	2b21      	cmp	r3, #33	; 0x21
 800180e:	d002      	beq.n	8001816 <I2C_Slave_ISR_DMA+0x156>
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b29      	cmp	r3, #41	; 0x29
 8001814:	d103      	bne.n	800181e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2221      	movs	r2, #33	; 0x21
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
 800181c:	e008      	b.n	8001830 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	2b22      	cmp	r3, #34	; 0x22
 8001822:	d002      	beq.n	800182a <I2C_Slave_ISR_DMA+0x16a>
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b2a      	cmp	r3, #42	; 0x2a
 8001828:	d102      	bne.n	8001830 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2222      	movs	r2, #34	; 0x22
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	4619      	mov	r1, r3
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fb6c 	bl	8001f14 <I2C_ITError>
      if (treatdmanack == 1U)
 800183c:	e005      	b.n	800184a <I2C_Slave_ISR_DMA+0x18a>
 800183e:	e004      	b.n	800184a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2210      	movs	r2, #16
 8001846:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001848:	e011      	b.n	800186e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800184a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800184c:	e00f      	b.n	800186e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f809 	bl	8001880 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001896:	2b28      	cmp	r3, #40	; 0x28
 8001898:	d16a      	bne.n	8001970 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80018b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80018d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d138      	bne.n	8001950 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80018de:	897b      	ldrh	r3, [r7, #10]
 80018e0:	09db      	lsrs	r3, r3, #7
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	89bb      	ldrh	r3, [r7, #12]
 80018e6:	4053      	eors	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f003 0306 	and.w	r3, r3, #6
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11c      	bne.n	800192c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001904:	2b02      	cmp	r3, #2
 8001906:	d13b      	bne.n	8001980 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2208      	movs	r2, #8
 8001914:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800191e:	89ba      	ldrh	r2, [r7, #12]
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	4619      	mov	r1, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fc95 	bl	8001254 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800192a:	e029      	b.n	8001980 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800192c:	893b      	ldrh	r3, [r7, #8]
 800192e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fcbd 	bl	80022b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001942:	89ba      	ldrh	r2, [r7, #12]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	4619      	mov	r1, r3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fc83 	bl	8001254 <HAL_I2C_AddrCallback>
}
 800194e:	e017      	b.n	8001980 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fcad 	bl	80022b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001962:	89ba      	ldrh	r2, [r7, #12]
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fc73 	bl	8001254 <HAL_I2C_AddrCallback>
}
 800196e:	e007      	b.n	8001980 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2208      	movs	r2, #8
 8001976:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b21      	cmp	r3, #33	; 0x21
 80019a2:	d115      	bne.n	80019d0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2211      	movs	r2, #17
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019b8:	2101      	movs	r1, #1
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fc7a 	bl	80022b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fc25 	bl	8001218 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80019ce:	e014      	b.n	80019fa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2212      	movs	r2, #18
 80019dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80019e4:	2102      	movs	r1, #2
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fc64 	bl	80022b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fc19 	bl	800122c <HAL_I2C_MasterRxCpltCallback>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	0b9b      	lsrs	r3, r3, #14
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e00d      	b.n	8001a54 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	0bdb      	lsrs	r3, r3, #15
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a52:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b29      	cmp	r3, #41	; 0x29
 8001a5e:	d112      	bne.n	8001a86 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2228      	movs	r2, #40	; 0x28
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2221      	movs	r2, #33	; 0x21
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fc1f 	bl	80022b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7fe fd32 	bl	80004e8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001a84:	e017      	b.n	8001ab6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a90:	d111      	bne.n	8001ab6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2228      	movs	r2, #40	; 0x28
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2222      	movs	r2, #34	; 0x22
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fc06 	bl	80022b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fbc5 	bl	8001240 <HAL_I2C_SlaveRxCpltCallback>
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b21      	cmp	r3, #33	; 0x21
 8001ae0:	d107      	bne.n	8001af2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fbe5 	bl	80022b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2211      	movs	r2, #17
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
 8001af0:	e00c      	b.n	8001b0c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b22      	cmp	r3, #34	; 0x22
 8001afc:	d106      	bne.n	8001b0c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001afe:	2102      	movs	r1, #2
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fbd7 	bl	80022b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2212      	movs	r2, #18
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6859      	ldr	r1, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <I2C_ITMasterCplt+0x18c>)
 8001b18:	400b      	ands	r3, r1
 8001b1a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <I2C_ITMasterCplt+0x190>)
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f043 0204 	orr.w	r2, r3, #4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b60      	cmp	r3, #96	; 0x60
 8001b52:	d10b      	bne.n	8001b6c <I2C_ITMasterCplt+0xac>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fac8 	bl	8002102 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b60      	cmp	r3, #96	; 0x60
 8001b82:	d002      	beq.n	8001b8a <I2C_ITMasterCplt+0xca>
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f9bf 	bl	8001f14 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b96:	e054      	b.n	8001c42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b21      	cmp	r3, #33	; 0x21
 8001ba2:	d124      	bne.n	8001bee <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d10b      	bne.n	8001bd6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fb58 	bl	8001284 <HAL_I2C_MemTxCpltCallback>
}
 8001bd4:	e035      	b.n	8001c42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fb16 	bl	8001218 <HAL_I2C_MasterTxCpltCallback>
}
 8001bec:	e029      	b.n	8001c42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b22      	cmp	r3, #34	; 0x22
 8001bf8:	d123      	bne.n	8001c42 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d10b      	bne.n	8001c2c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fb37 	bl	8001298 <HAL_I2C_MemRxCpltCallback>
}
 8001c2a:	e00a      	b.n	8001c42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff faf5 	bl	800122c <HAL_I2C_MasterRxCpltCallback>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	fe00e800 	.word	0xfe00e800
 8001c50:	ffff0000 	.word	0xffff0000

08001c54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2220      	movs	r2, #32
 8001c78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	2b21      	cmp	r3, #33	; 0x21
 8001c7e:	d002      	beq.n	8001c86 <I2C_ITSlaveCplt+0x32>
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b29      	cmp	r3, #41	; 0x29
 8001c84:	d108      	bne.n	8001c98 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001c86:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fb12 	bl	80022b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2221      	movs	r2, #33	; 0x21
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
 8001c96:	e00d      	b.n	8001cb4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	2b22      	cmp	r3, #34	; 0x22
 8001c9c:	d002      	beq.n	8001ca4 <I2C_ITSlaveCplt+0x50>
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ca2:	d107      	bne.n	8001cb4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001ca4:	f248 0102 	movw	r1, #32770	; 0x8002
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fb03 	bl	80022b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2222      	movs	r2, #34	; 0x22
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cc2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6859      	ldr	r1, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <I2C_ITSlaveCplt+0x20c>)
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fa14 	bl	8002102 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	0b9b      	lsrs	r3, r3, #14
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d013      	beq.n	8001d0e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cf4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d020      	beq.n	8001d40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d0c:	e018      	b.n	8001d40 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	0bdb      	lsrs	r3, r3, #15
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d010      	beq.n	8001ddc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8a7 	bl	8001f14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b28      	cmp	r3, #40	; 0x28
 8001dd0:	d141      	bne.n	8001e56 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001dd2:	6979      	ldr	r1, [r7, #20]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f847 	bl	8001e68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001dda:	e03c      	b.n	8001e56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de4:	d014      	beq.n	8001e10 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fe0b 	bl	8001a02 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <I2C_ITSlaveCplt+0x210>)
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fa31 	bl	8001270 <HAL_I2C_ListenCpltCallback>
}
 8001e0e:	e022      	b.n	8001e56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b22      	cmp	r3, #34	; 0x22
 8001e1a:	d10e      	bne.n	8001e3a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fa04 	bl	8001240 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e38:	e00d      	b.n	8001e56 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7fe fb49 	bl	80004e8 <HAL_I2C_SlaveTxCpltCallback>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	fe00e800 	.word	0xfe00e800
 8001e64:	ffff0000 	.word	0xffff0000

08001e68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <I2C_ITListenCplt+0xa8>)
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d022      	beq.n	8001ee6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d012      	beq.n	8001ee6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f043 0204 	orr.w	r2, r3, #4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ee6:	f248 0103 	movw	r1, #32771	; 0x8003
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f9e2 	bl	80022b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff f9b5 	bl	8001270 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	ffff0000 	.word	0xffff0000

08001f14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <I2C_ITError+0x194>)
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b28      	cmp	r3, #40	; 0x28
 8001f4a:	d005      	beq.n	8001f58 <I2C_ITError+0x44>
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b29      	cmp	r3, #41	; 0x29
 8001f50:	d002      	beq.n	8001f58 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	2b2a      	cmp	r3, #42	; 0x2a
 8001f56:	d10b      	bne.n	8001f70 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f58:	2103      	movs	r1, #3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f9aa 	bl	80022b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2228      	movs	r2, #40	; 0x28
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a50      	ldr	r2, [pc, #320]	; (80020ac <I2C_ITError+0x198>)
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f6e:	e011      	b.n	8001f94 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f70:	f248 0103 	movw	r1, #32771	; 0x8003
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f99d 	bl	80022b4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b60      	cmp	r3, #96	; 0x60
 8001f84:	d003      	beq.n	8001f8e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d039      	beq.n	8002016 <I2C_ITError+0x102>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b11      	cmp	r3, #17
 8001fa6:	d002      	beq.n	8001fae <I2C_ITError+0x9a>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b21      	cmp	r3, #33	; 0x21
 8001fac:	d133      	bne.n	8002016 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fbc:	d107      	bne.n	8001fce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fcc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fe66 	bl	8000ca4 <HAL_DMA_GetState>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d017      	beq.n	800200e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe2:	4a33      	ldr	r2, [pc, #204]	; (80020b0 <I2C_ITError+0x19c>)
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fdef 	bl	8000bd6 <HAL_DMA_Abort_IT>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d04d      	beq.n	800209a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002008:	4610      	mov	r0, r2
 800200a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800200c:	e045      	b.n	800209a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f850 	bl	80020b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002014:	e041      	b.n	800209a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d039      	beq.n	8002092 <I2C_ITError+0x17e>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d002      	beq.n	800202a <I2C_ITError+0x116>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b22      	cmp	r3, #34	; 0x22
 8002028:	d133      	bne.n	8002092 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002038:	d107      	bne.n	800204a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002048:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fe28 	bl	8000ca4 <HAL_DMA_GetState>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d017      	beq.n	800208a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <I2C_ITError+0x19c>)
 8002060:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fdb1 	bl	8000bd6 <HAL_DMA_Abort_IT>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d011      	beq.n	800209e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002084:	4610      	mov	r0, r2
 8002086:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002088:	e009      	b.n	800209e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f812 	bl	80020b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002090:	e005      	b.n	800209e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f80e 	bl	80020b4 <I2C_TreatErrorCallback>
  }
}
 8002098:	e002      	b.n	80020a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800209a:	bf00      	nop
 800209c:	e000      	b.n	80020a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800209e:	bf00      	nop
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	ffff0000 	.word	0xffff0000
 80020ac:	080012d5 	.word	0x080012d5
 80020b0:	0800214b 	.word	0x0800214b

080020b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b60      	cmp	r3, #96	; 0x60
 80020c6:	d10e      	bne.n	80020e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff f8ee 	bl	80012c0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80020e4:	e009      	b.n	80020fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff f8d9 	bl	80012ac <HAL_I2C_ErrorCallback>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d103      	bne.n	8002120 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	619a      	str	r2, [r3, #24]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	2200      	movs	r2, #0
 8002166:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	2200      	movs	r2, #0
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7ff ff9b 	bl	80020b4 <I2C_TreatErrorCallback>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	817b      	strh	r3, [r7, #10]
 8002196:	4613      	mov	r3, r2
 8002198:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800219a:	897b      	ldrh	r3, [r7, #10]
 800219c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021a0:	7a7b      	ldrb	r3, [r7, #9]
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021a8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021b6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <I2C_TransferConfig+0x60>)
 80021c8:	430b      	orrs	r3, r1
 80021ca:	43db      	mvns	r3, r3
 80021cc:	ea02 0103 	and.w	r1, r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	03ff63ff 	.word	0x03ff63ff

080021ec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <I2C_Enable_IRQ+0xc0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800220a:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <I2C_Enable_IRQ+0xc4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d11d      	bne.n	800224c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002214:	2b00      	cmp	r3, #0
 8002216:	da03      	bge.n	8002220 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800221e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	2b10      	cmp	r3, #16
 8002224:	d103      	bne.n	800222e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800222c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	2b20      	cmp	r3, #32
 8002232:	d103      	bne.n	800223c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800223a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d125      	bne.n	800228e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002248:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800224a:	e020      	b.n	800228e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800224c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da03      	bge.n	800225c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800225a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800226c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800227e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	2b20      	cmp	r3, #32
 8002284:	d103      	bne.n	800228e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	080014db 	.word	0x080014db
 80022b0:	080016c1 	.word	0x080016c1

080022b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00f      	beq.n	80022ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80022d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022e2:	2b28      	cmp	r3, #40	; 0x28
 80022e4:	d003      	beq.n	80022ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80022ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00f      	beq.n	8002318 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80022fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800230c:	2b28      	cmp	r3, #40	; 0x28
 800230e:	d003      	beq.n	8002318 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002316:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800231c:	2b00      	cmp	r3, #0
 800231e:	da03      	bge.n	8002328 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002326:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	2b10      	cmp	r3, #16
 800232c:	d103      	bne.n	8002336 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002334:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	2b20      	cmp	r3, #32
 800233a:	d103      	bne.n	8002344 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f043 0320 	orr.w	r3, r3, #32
 8002342:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d103      	bne.n	8002352 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002350:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43da      	mvns	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	400a      	ands	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	d138      	bne.n	80023f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002390:	2302      	movs	r3, #2
 8002392:	e032      	b.n	80023fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	; 0x24
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b20      	cmp	r3, #32
 800241a:	d139      	bne.n	8002490 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002426:	2302      	movs	r3, #2
 8002428:	e033      	b.n	8002492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2224      	movs	r2, #36	; 0x24
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002458:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d141      	bne.n	8002532 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ae:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ba:	d131      	bne.n	8002520 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024bc:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c2:	4a46      	ldr	r2, [pc, #280]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d4:	4a41      	ldr	r2, [pc, #260]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2232      	movs	r2, #50	; 0x32
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	4a3f      	ldr	r2, [pc, #252]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024f2:	e002      	b.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d102      	bne.n	800250e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f2      	bne.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800250e:	4b33      	ldr	r3, [pc, #204]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251a:	d158      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e057      	b.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002526:	4a2d      	ldr	r2, [pc, #180]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800252c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002530:	e04d      	b.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002538:	d141      	bne.n	80025be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d131      	bne.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002560:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002566:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2232      	movs	r2, #50	; 0x32
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	3301      	adds	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257e:	e002      	b.n	8002586 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3b01      	subs	r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002592:	d102      	bne.n	800259a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f2      	bne.n	8002580 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	d112      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e011      	b.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025bc:	e007      	b.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40007000 	.word	0x40007000
 80025e0:	20000004 	.word	0x20000004
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e306      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002606:	4b97      	ldr	r3, [pc, #604]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002610:	4b94      	ldr	r3, [pc, #592]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0x3e>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d002      	beq.n	800262c <HAL_RCC_OscConfig+0x44>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b8d      	ldr	r3, [pc, #564]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x108>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e2e1      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b85      	ldr	r3, [pc, #532]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a84      	ldr	r2, [pc, #528]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b7f      	ldr	r3, [pc, #508]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7e      	ldr	r2, [pc, #504]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b7c      	ldr	r3, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7b      	ldr	r2, [pc, #492]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 8002680:	4b78      	ldr	r3, [pc, #480]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a77      	ldr	r2, [pc, #476]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b75      	ldr	r3, [pc, #468]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a74      	ldr	r2, [pc, #464]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe f9aa 	bl	80009f8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe f9a6 	bl	80009f8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e2a6      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xc0>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe f996 	bl	80009f8 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe f992 	bl	80009f8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e292      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	4b60      	ldr	r3, [pc, #384]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe8>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d075      	beq.n	80027ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002708:	4b56      	ldr	r3, [pc, #344]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d102      	bne.n	800271e <HAL_RCC_OscConfig+0x136>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d002      	beq.n	8002724 <HAL_RCC_OscConfig+0x13c>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11f      	bne.n	8002764 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x154>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e265      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b49      	ldr	r3, [pc, #292]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	4946      	ldr	r1, [pc, #280]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002750:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_RCC_OscConfig+0x280>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe f903 	bl	8000960 <HAL_InitTick>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d043      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e251      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe f93e 	bl	80009f8 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7fe f93a 	bl	80009f8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e23a      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	492d      	ldr	r1, [pc, #180]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 80027b2:	e01a      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b4:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2a      	ldr	r2, [pc, #168]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe f91a 	bl	80009f8 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7fe f916 	bl	80009f8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e216      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1e0>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d041      	beq.n	800287a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01c      	beq.n	8002838 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002804:	4a17      	ldr	r2, [pc, #92]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7fe f8f3 	bl	80009f8 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002816:	f7fe f8ef 	bl	80009f8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e1ef      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ef      	beq.n	8002816 <HAL_RCC_OscConfig+0x22e>
 8002836:	e020      	b.n	800287a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe f8d6 	bl	80009f8 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284e:	e00d      	b.n	800286c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe f8d2 	bl	80009f8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d906      	bls.n	800286c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1d2      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800286c:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800286e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ea      	bne.n	8002850 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80a6 	beq.w	80029d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800288c:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x2b4>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x2b6>
 800289c:	2300      	movs	r3, #0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	4b7f      	ldr	r3, [pc, #508]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	4a7e      	ldr	r2, [pc, #504]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
 80028ae:	4b7c      	ldr	r3, [pc, #496]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028be:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ca:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a75      	ldr	r2, [pc, #468]	; (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7fe f88f 	bl	80009f8 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7fe f88b 	bl	80009f8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e18b      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f0:	4b6c      	ldr	r3, [pc, #432]	; (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d108      	bne.n	8002916 <HAL_RCC_OscConfig+0x32e>
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002914:	e024      	b.n	8002960 <HAL_RCC_OscConfig+0x378>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d110      	bne.n	8002940 <HAL_RCC_OscConfig+0x358>
 800291e:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	4a5e      	ldr	r2, [pc, #376]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292e:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293e:	e00f      	b.n	8002960 <HAL_RCC_OscConfig+0x378>
 8002940:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d016      	beq.n	8002996 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe f846 	bl	80009f8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe f842 	bl	80009f8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e140      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ed      	beq.n	8002970 <HAL_RCC_OscConfig+0x388>
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7fe f82f 	bl	80009f8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe f82b 	bl	80009f8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e129      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ed      	bne.n	800299e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029c2:	7ffb      	ldrb	r3, [r7, #31]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	4a34      	ldr	r2, [pc, #208]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d03c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ee:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fd fffe 	bl	80009f8 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a00:	f7fd fffa 	bl	80009f8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0fa      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCC_OscConfig+0x418>
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fd ffe1 	bl	80009f8 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3a:	f7fd ffdd 	bl	80009f8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0dd      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80d1 	beq.w	8002c06 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	f000 808b 	beq.w	8002b88 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d15e      	bne.n	8002b38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fd ffb7 	bl	80009f8 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fd ffb3 	bl	80009f8 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d905      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0b3      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ec      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab4:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <HAL_RCC_OscConfig+0x62c>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6a11      	ldr	r1, [r2, #32]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ace:	0212      	lsls	r2, r2, #8
 8002ad0:	4311      	orrs	r1, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ad6:	0852      	lsrs	r2, r2, #1
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	0552      	lsls	r2, r2, #21
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ae2:	0852      	lsrs	r2, r2, #1
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	0652      	lsls	r2, r2, #25
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002aee:	06d2      	lsls	r2, r2, #27
 8002af0:	430a      	orrs	r2, r1
 8002af2:	4947      	ldr	r1, [pc, #284]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b45      	ldr	r3, [pc, #276]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a41      	ldr	r2, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fd ff72 	bl	80009f8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fd ff6e 	bl	80009f8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e06e      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x530>
 8002b36:	e066      	b.n	8002c06 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a31      	ldr	r2, [pc, #196]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a2e      	ldr	r2, [pc, #184]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fd ff4a 	bl	80009f8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fd ff46 	bl	80009f8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e046      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x580>
 8002b86:	e03e      	b.n	8002c06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e039      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d12c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d123      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d11b      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d113      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	019f800c 	.word	0x019f800c

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e11e      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b91      	ldr	r3, [pc, #580]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b8e      	ldr	r3, [pc, #568]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	498c      	ldr	r1, [pc, #560]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b8a      	ldr	r3, [pc, #552]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e106      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d073      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d129      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c74:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0f4      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c84:	f000 f966 	bl	8002f54 <RCC_GetSysClockFreqFromPLLSource>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4a7c      	ldr	r2, [pc, #496]	; (8002e80 <HAL_RCC_ClockConfig+0x268>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d93f      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c92:	4b7a      	ldr	r3, [pc, #488]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d033      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d12f      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cb2:	4b72      	ldr	r3, [pc, #456]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cba:	4a70      	ldr	r2, [pc, #448]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e024      	b.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0c6      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce0:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0be      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002cf0:	f000 f8ce 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_RCC_ClockConfig+0x268>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d909      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d06:	4a5d      	ldr	r2, [pc, #372]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b5a      	ldr	r3, [pc, #360]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4957      	ldr	r1, [pc, #348]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d24:	f7fd fe68 	bl	80009f8 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fd fe64 	bl	80009f8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e095      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a42      	ldr	r2, [pc, #264]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d84:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d8c:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4936      	ldr	r1, [pc, #216]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
 8002da6:	e008      	b.n	8002dba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d21d      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 020f 	bic.w	r2, r3, #15
 8002dd0:	4929      	ldr	r1, [pc, #164]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dd8:	f7fd fe0e 	bl	80009f8 <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7fd fe0a 	bl	80009f8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e03b      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1ed      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4917      	ldr	r1, [pc, #92]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490f      	ldr	r1, [pc, #60]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e42:	f000 f825 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	490c      	ldr	r1, [pc, #48]	; (8002e84 <HAL_RCC_ClockConfig+0x26c>)
 8002e54:	5ccb      	ldrb	r3, [r1, r3]
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x270>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fd7a 	bl	8000960 <HAL_InitTick>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	04c4b400 	.word	0x04c4b400
 8002e84:	08005934 	.word	0x08005934
 8002e88:	20000004 	.word	0x20000004
 8002e8c:	20000008 	.word	0x20000008

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e047      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e03e      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d136      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3301      	adds	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eee:	68d2      	ldr	r2, [r2, #12]
 8002ef0:	0a12      	lsrs	r2, r2, #8
 8002ef2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	617b      	str	r3, [r7, #20]
      break;
 8002efc:	e00c      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	0a12      	lsrs	r2, r2, #8
 8002f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
      break;
 8002f16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	0e5b      	lsrs	r3, r3, #25
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e001      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f38:	693b      	ldr	r3, [r7, #16]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200

08002f54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d10c      	bne.n	8002f92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f82:	68d2      	ldr	r2, [r2, #12]
 8002f84:	0a12      	lsrs	r2, r2, #8
 8002f86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
    break;
 8002f90:	e00c      	b.n	8002fac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	0a12      	lsrs	r2, r2, #8
 8002fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
    break;
 8002faa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0e5b      	lsrs	r3, r3, #25
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002fc6:	687b      	ldr	r3, [r7, #4]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	007a1200 	.word	0x007a1200
 8002fdc:	00f42400 	.word	0x00f42400

08002fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8098 	beq.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10d      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	4b40      	ldr	r3, [pc, #256]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	4a3f      	ldr	r2, [pc, #252]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6593      	str	r3, [r2, #88]	; 0x58
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003026:	2301      	movs	r3, #1
 8003028:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302a:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a39      	ldr	r2, [pc, #228]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003036:	f7fd fcdf 	bl	80009f8 <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800303c:	e009      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fd fcdb 	bl	80009f8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d902      	bls.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	74fb      	strb	r3, [r7, #19]
        break;
 8003050:	e005      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ef      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d159      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003064:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01e      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	d019      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fd fc9b 	bl	80009f8 <HAL_GetTick>
 80030c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c4:	e00b      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fd fc97 	bl	80009f8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d902      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	74fb      	strb	r3, [r7, #19]
            break;
 80030dc:	e006      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ec      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	74bb      	strb	r3, [r7, #18]
 800310e:	e005      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003110:	40021000 	.word	0x40021000
 8003114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311c:	7c7b      	ldrb	r3, [r7, #17]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4ba6      	ldr	r3, [pc, #664]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	4aa5      	ldr	r2, [pc, #660]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313a:	4ba0      	ldr	r3, [pc, #640]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f023 0203 	bic.w	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	499c      	ldr	r1, [pc, #624]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315c:	4b97      	ldr	r3, [pc, #604]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f023 020c 	bic.w	r2, r3, #12
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	4994      	ldr	r1, [pc, #592]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800317e:	4b8f      	ldr	r3, [pc, #572]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	498b      	ldr	r1, [pc, #556]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031a0:	4b86      	ldr	r3, [pc, #536]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	4983      	ldr	r1, [pc, #524]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031c2:	4b7e      	ldr	r3, [pc, #504]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	497a      	ldr	r1, [pc, #488]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e4:	4b75      	ldr	r3, [pc, #468]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4972      	ldr	r1, [pc, #456]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	4969      	ldr	r1, [pc, #420]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003228:	4b64      	ldr	r3, [pc, #400]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4961      	ldr	r1, [pc, #388]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800324a:	4b5c      	ldr	r3, [pc, #368]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	4958      	ldr	r1, [pc, #352]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d015      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	4950      	ldr	r1, [pc, #320]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800328a:	d105      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800328c:	4b4b      	ldr	r3, [pc, #300]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a4a      	ldr	r2, [pc, #296]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003296:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032a4:	4b45      	ldr	r3, [pc, #276]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	4942      	ldr	r1, [pc, #264]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c2:	d105      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c4:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a3c      	ldr	r2, [pc, #240]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d015      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032dc:	4b37      	ldr	r3, [pc, #220]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4934      	ldr	r1, [pc, #208]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032fa:	d105      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032fc:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003306:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003314:	4b29      	ldr	r3, [pc, #164]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003322:	4926      	ldr	r1, [pc, #152]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003332:	d105      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	4918      	ldr	r1, [pc, #96]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800336a:	d105      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a12      	ldr	r2, [pc, #72]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003376:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	490a      	ldr	r1, [pc, #40]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a2:	d105      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80033b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000

080033c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d2:	2b84      	cmp	r3, #132	; 0x84
 80033d4:	d005      	beq.n	80033e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	3303      	adds	r3, #3
 80033e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033f4:	f001 f804 	bl	8004400 <vTaskStartScheduler>
  
  return osOK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	bd80      	pop	{r7, pc}

080033fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003400:	b087      	sub	sp, #28
 8003402:	af02      	add	r7, sp, #8
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685c      	ldr	r4, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003414:	b29e      	uxth	r6, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ffcf 	bl	80033c0 <makeFreeRtosPriority>
 8003422:	4602      	mov	r2, r0
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	9200      	str	r2, [sp, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4632      	mov	r2, r6
 8003430:	4629      	mov	r1, r5
 8003432:	4620      	mov	r0, r4
 8003434:	f000 fe7e 	bl	8004134 <xTaskCreate>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d001      	beq.n	8003442 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003442:	68fb      	ldr	r3, [r7, #12]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800344c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <osDelay+0x16>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	e000      	b.n	8003464 <osDelay+0x18>
 8003462:	2301      	movs	r3, #1
 8003464:	4618      	mov	r0, r3
 8003466:	f000 ff97 	bl	8004398 <vTaskDelay>
  
  return osOK;
 800346a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d110      	bne.n	80034a6 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8003484:	2203      	movs	r2, #3
 8003486:	2100      	movs	r1, #0
 8003488:	2001      	movs	r0, #1
 800348a:	f000 f93f 	bl	800370c <xQueueGenericCreate>
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <osSemaphoreCreate+0x2e>
 8003496:	2300      	movs	r3, #0
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f98b 	bl	80037b8 <xQueueGenericSend>
    return sema;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	e000      	b.n	80034a8 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80034a6:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	4619      	mov	r1, r3
 80034c6:	f000 f921 	bl	800370c <xQueueGenericCreate>
 80034ca:	4603      	mov	r3, r0
#endif
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0208 	add.w	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f103 0208 	add.w	r2, r3, #8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f103 0208 	add.w	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d103      	bne.n	8003596 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e00c      	b.n	80035b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3308      	adds	r3, #8
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e002      	b.n	80035a4 <vListInsert+0x2e>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d2f6      	bcs.n	800359e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6892      	ldr	r2, [r2, #8]
 80035fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6852      	ldr	r2, [r2, #4]
 8003608:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d103      	bne.n	800361c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	1e5a      	subs	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003666:	f001 fddd 	bl	8005224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	68f9      	ldr	r1, [r7, #12]
 8003674:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	441a      	add	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	3b01      	subs	r3, #1
 8003698:	68f9      	ldr	r1, [r7, #12]
 800369a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	441a      	add	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	22ff      	movs	r2, #255	; 0xff
 80036b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d114      	bne.n	80036e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01a      	beq.n	80036fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3310      	adds	r3, #16
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 f8c3 	bl	8004854 <xTaskRemoveFromEventList>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <xQueueGenericReset+0xcc>)
 80036d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	e009      	b.n	80036fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3310      	adds	r3, #16
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fef2 	bl	80034d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3324      	adds	r3, #36	; 0x24
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff feed 	bl	80034d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036fa:	f001 fdc3 	bl	8005284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036fe:	2301      	movs	r3, #1
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	4613      	mov	r3, r2
 8003718:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	613b      	str	r3, [r7, #16]
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3348      	adds	r3, #72	; 0x48
 8003744:	4618      	mov	r0, r3
 8003746:	f001 fe8f 	bl	8005468 <pvPortMalloc>
 800374a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3348      	adds	r3, #72	; 0x48
 800375a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800375c:	79fa      	ldrb	r2, [r7, #7]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	4613      	mov	r3, r2
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f805 	bl	8003778 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800376e:	69bb      	ldr	r3, [r7, #24]
	}
 8003770:	4618      	mov	r0, r3
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e002      	b.n	800379a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037a6:	2101      	movs	r1, #1
 80037a8:	69b8      	ldr	r0, [r7, #24]
 80037aa:	f7ff ff47 	bl	800363c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08e      	sub	sp, #56	; 0x38
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037c6:	2300      	movs	r3, #0
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <xQueueGenericSend+0x32>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d103      	bne.n	80037f8 <xQueueGenericSend+0x40>
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <xQueueGenericSend+0x44>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <xQueueGenericSend+0x46>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <xQueueGenericSend+0x60>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d103      	bne.n	8003826 <xQueueGenericSend+0x6e>
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <xQueueGenericSend+0x72>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <xQueueGenericSend+0x74>
 800382a:	2300      	movs	r3, #0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xQueueGenericSend+0x8e>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	623b      	str	r3, [r7, #32]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003846:	f001 f9a1 	bl	8004b8c <xTaskGetSchedulerState>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d102      	bne.n	8003856 <xQueueGenericSend+0x9e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <xQueueGenericSend+0xa2>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <xQueueGenericSend+0xa4>
 800385a:	2300      	movs	r3, #0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <xQueueGenericSend+0xbe>
	__asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	61fb      	str	r3, [r7, #28]
}
 8003872:	bf00      	nop
 8003874:	e7fe      	b.n	8003874 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003876:	f001 fcd5 	bl	8005224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <xQueueGenericSend+0xd4>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d129      	bne.n	80038e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003892:	f000 fb3f 	bl	8003f14 <prvCopyDataToQueue>
 8003896:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	3324      	adds	r3, #36	; 0x24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 ffd5 	bl	8004854 <xTaskRemoveFromEventList>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <xQueueGenericSend+0x1f8>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	e00a      	b.n	80038d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038c8:	4b39      	ldr	r3, [pc, #228]	; (80039b0 <xQueueGenericSend+0x1f8>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038d8:	f001 fcd4 	bl	8005284 <vPortExitCritical>
				return pdPASS;
 80038dc:	2301      	movs	r3, #1
 80038de:	e063      	b.n	80039a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038e6:	f001 fccd 	bl	8005284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e05c      	b.n	80039a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f80d 	bl	8004918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003902:	f001 fcbf 	bl	8005284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003906:	f000 fdc3 	bl	8004490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800390a:	f001 fc8b 	bl	8005224 <vPortEnterCritical>
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003914:	b25b      	sxtb	r3, r3
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d103      	bne.n	8003924 <xQueueGenericSend+0x16c>
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800392a:	b25b      	sxtb	r3, r3
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d103      	bne.n	800393a <xQueueGenericSend+0x182>
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800393a:	f001 fca3 	bl	8005284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800393e:	1d3a      	adds	r2, r7, #4
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fffc 	bl	8004944 <xTaskCheckForTimeOut>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d124      	bne.n	800399c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003954:	f000 fbd6 	bl	8004104 <prvIsQueueFull>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	3310      	adds	r3, #16
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 ff50 	bl	800480c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800396c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800396e:	f000 fb61 	bl	8004034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003972:	f000 fd9b 	bl	80044ac <xTaskResumeAll>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f af7c 	bne.w	8003876 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <xQueueGenericSend+0x1f8>)
 8003980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	e772      	b.n	8003876 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003992:	f000 fb4f 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003996:	f000 fd89 	bl	80044ac <xTaskResumeAll>
 800399a:	e76c      	b.n	8003876 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800399c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399e:	f000 fb49 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039a2:	f000 fd83 	bl	80044ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3738      	adds	r7, #56	; 0x38
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08e      	sub	sp, #56	; 0x38
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueGiveFromISR+0x2a>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	623b      	str	r3, [r7, #32]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <xQueueGiveFromISR+0x48>
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	61fb      	str	r3, [r7, #28]
}
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <xQueueGiveFromISR+0x58>
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <xQueueGiveFromISR+0x5c>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <xQueueGiveFromISR+0x5e>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <xQueueGiveFromISR+0x78>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	61bb      	str	r3, [r7, #24]
}
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a2c:	f001 fcdc 	bl	80053e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a30:	f3ef 8211 	mrs	r2, BASEPRI
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	617a      	str	r2, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a48:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d22b      	bcs.n	8003ab4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d112      	bne.n	8003a9e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	3324      	adds	r3, #36	; 0x24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fee5 	bl	8004854 <xTaskRemoveFromEventList>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00e      	beq.n	8003aae <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e007      	b.n	8003aae <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	b25a      	sxtb	r2, r3
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab2:	e001      	b.n	8003ab8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ac2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3738      	adds	r7, #56	; 0x38
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <xQueueReceive+0x30>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	623b      	str	r3, [r7, #32]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueReceive+0x3e>
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <xQueueReceive+0x42>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <xQueueReceive+0x44>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xQueueReceive+0x5e>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	61fb      	str	r3, [r7, #28]
}
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b2e:	f001 f82d 	bl	8004b8c <xTaskGetSchedulerState>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <xQueueReceive+0x6e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <xQueueReceive+0x72>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueReceive+0x74>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xQueueReceive+0x8e>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	61bb      	str	r3, [r7, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b5e:	f001 fb61 	bl	8005224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01f      	beq.n	8003bae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b72:	f000 fa39 	bl	8003fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00f      	beq.n	8003ba6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	3310      	adds	r3, #16
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fe62 	bl	8004854 <xTaskRemoveFromEventList>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b96:	4b3d      	ldr	r3, [pc, #244]	; (8003c8c <xQueueReceive+0x1bc>)
 8003b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ba6:	f001 fb6d 	bl	8005284 <vPortExitCritical>
				return pdPASS;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e069      	b.n	8003c82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bb4:	f001 fb66 	bl	8005284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e062      	b.n	8003c82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fea6 	bl	8004918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bd0:	f001 fb58 	bl	8005284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bd4:	f000 fc5c 	bl	8004490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bd8:	f001 fb24 	bl	8005224 <vPortEnterCritical>
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d103      	bne.n	8003bf2 <xQueueReceive+0x122>
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d103      	bne.n	8003c08 <xQueueReceive+0x138>
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c08:	f001 fb3c 	bl	8005284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c0c:	1d3a      	adds	r2, r7, #4
 8003c0e:	f107 0310 	add.w	r3, r7, #16
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fe95 	bl	8004944 <xTaskCheckForTimeOut>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d123      	bne.n	8003c68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c22:	f000 fa59 	bl	80040d8 <prvIsQueueEmpty>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	3324      	adds	r3, #36	; 0x24
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fde9 	bl	800480c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3c:	f000 f9fa 	bl	8004034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c40:	f000 fc34 	bl	80044ac <xTaskResumeAll>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d189      	bne.n	8003b5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <xQueueReceive+0x1bc>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	e780      	b.n	8003b5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c5e:	f000 f9e9 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c62:	f000 fc23 	bl	80044ac <xTaskResumeAll>
 8003c66:	e77a      	b.n	8003b5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6a:	f000 f9e3 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6e:	f000 fc1d 	bl	80044ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c74:	f000 fa30 	bl	80040d8 <prvIsQueueEmpty>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f43f af6f 	beq.w	8003b5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	; 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	; 0x38
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	623b      	str	r3, [r7, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	61fb      	str	r3, [r7, #28]
}
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ce0:	f000 ff54 	bl	8004b8c <xTaskGetSchedulerState>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <xQueueSemaphoreTake+0x60>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <xQueueSemaphoreTake+0x64>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <xQueueSemaphoreTake+0x66>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	61bb      	str	r3, [r7, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d10:	f001 fa88 	bl	8005224 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d024      	beq.n	8003d6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d30:	f001 f8d4 	bl	8004edc <pvTaskIncrementMutexHeldCount>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00f      	beq.n	8003d62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	3310      	adds	r3, #16
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd84 	bl	8004854 <xTaskRemoveFromEventList>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d52:	4b54      	ldr	r3, [pc, #336]	; (8003ea4 <xQueueSemaphoreTake+0x214>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d62:	f001 fa8f 	bl	8005284 <vPortExitCritical>
				return pdPASS;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e097      	b.n	8003e9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	617b      	str	r3, [r7, #20]
}
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d8c:	f001 fa7a 	bl	8005284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e082      	b.n	8003e9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fdba 	bl	8004918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da8:	f001 fa6c 	bl	8005284 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dac:	f000 fb70 	bl	8004490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003db0:	f001 fa38 	bl	8005224 <vPortEnterCritical>
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <xQueueSemaphoreTake+0x13a>
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d103      	bne.n	8003de0 <xQueueSemaphoreTake+0x150>
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de0:	f001 fa50 	bl	8005284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de4:	463a      	mov	r2, r7
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fda9 	bl	8004944 <xTaskCheckForTimeOut>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d132      	bne.n	8003e5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dfa:	f000 f96d 	bl	80040d8 <prvIsQueueEmpty>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d026      	beq.n	8003e52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e0c:	f001 fa0a 	bl	8005224 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fed7 	bl	8004bc8 <xTaskPriorityInherit>
 8003e1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e1c:	f001 fa32 	bl	8005284 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	3324      	adds	r3, #36	; 0x24
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fcef 	bl	800480c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e30:	f000 f900 	bl	8004034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e34:	f000 fb3a 	bl	80044ac <xTaskResumeAll>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f47f af68 	bne.w	8003d10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <xQueueSemaphoreTake+0x214>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	e75e      	b.n	8003d10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e54:	f000 f8ee 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e58:	f000 fb28 	bl	80044ac <xTaskResumeAll>
 8003e5c:	e758      	b.n	8003d10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e60:	f000 f8e8 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e64:	f000 fb22 	bl	80044ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e6a:	f000 f935 	bl	80040d8 <prvIsQueueEmpty>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f43f af4d 	beq.w	8003d10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003e7c:	f001 f9d2 	bl	8005224 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e82:	f000 f82f 	bl	8003ee4 <prvGetDisinheritPriorityAfterTimeout>
 8003e86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 ff96 	bl	8004dc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e94:	f001 f9f6 	bl	8005284 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3738      	adds	r7, #56	; 0x38
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60bb      	str	r3, [r7, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003ecc:	f001 f9aa 	bl	8005224 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003ed6:	f001 f9d5 	bl	8005284 <vPortExitCritical>

	return uxReturn;
 8003eda:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1c3 0307 	rsb	r3, r3, #7
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e001      	b.n	8003f06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f06:	68fb      	ldr	r3, [r7, #12]
	}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d14d      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 feb8 	bl	8004cb4 <xTaskPriorityDisinherit>
 8003f44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e043      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d119      	bne.n	8003f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6858      	ldr	r0, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	f001 fc90 	bl	8005884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d32b      	bcc.n	8003fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	e026      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68d8      	ldr	r0, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	461a      	mov	r2, r3
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	f001 fc76 	bl	8005884 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d207      	bcs.n	8003fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	425b      	negs	r3, r3
 8003fbe:	441a      	add	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d105      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d018      	beq.n	800402c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d303      	bcc.n	800401c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68d9      	ldr	r1, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	461a      	mov	r2, r3
 8004026:	6838      	ldr	r0, [r7, #0]
 8004028:	f001 fc2c 	bl	8005884 <memcpy>
	}
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800403c:	f001 f8f2 	bl	8005224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004048:	e011      	b.n	800406e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d012      	beq.n	8004078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	; 0x24
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fbfc 	bl	8004854 <xTaskRemoveFromEventList>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004062:	f000 fcd1 	bl	8004a08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3b01      	subs	r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	dce9      	bgt.n	800404a <prvUnlockQueue+0x16>
 8004076:	e000      	b.n	800407a <prvUnlockQueue+0x46>
					break;
 8004078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	22ff      	movs	r2, #255	; 0xff
 800407e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004082:	f001 f8ff 	bl	8005284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004086:	f001 f8cd 	bl	8005224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004092:	e011      	b.n	80040b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d012      	beq.n	80040c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3310      	adds	r3, #16
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fbd7 	bl	8004854 <xTaskRemoveFromEventList>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040ac:	f000 fcac 	bl	8004a08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dce9      	bgt.n	8004094 <prvUnlockQueue+0x60>
 80040c0:	e000      	b.n	80040c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040cc:	f001 f8da 	bl	8005284 <vPortExitCritical>
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e0:	f001 f8a0 	bl	8005224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e001      	b.n	80040f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040f6:	f001 f8c5 	bl	8005284 <vPortExitCritical>

	return xReturn;
 80040fa:	68fb      	ldr	r3, [r7, #12]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800410c:	f001 f88a 	bl	8005224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	429a      	cmp	r2, r3
 800411a:	d102      	bne.n	8004122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e001      	b.n	8004126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004126:	f001 f8ad 	bl	8005284 <vPortExitCritical>

	return xReturn;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	; 0x30
 8004138:	af04      	add	r7, sp, #16
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f001 f98d 	bl	8005468 <pvPortMalloc>
 800414e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00e      	beq.n	8004174 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004156:	2054      	movs	r0, #84	; 0x54
 8004158:	f001 f986 	bl	8005468 <pvPortMalloc>
 800415c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
 800416a:	e005      	b.n	8004178 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800416c:	6978      	ldr	r0, [r7, #20]
 800416e:	f001 fa47 	bl	8005600 <vPortFree>
 8004172:	e001      	b.n	8004178 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d013      	beq.n	80041a6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	2300      	movs	r3, #0
 8004182:	9303      	str	r3, [sp, #12]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	9302      	str	r3, [sp, #8]
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f80e 	bl	80041b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800419a:	69f8      	ldr	r0, [r7, #28]
 800419c:	f000 f892 	bl	80042c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041a0:	2301      	movs	r3, #1
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	e002      	b.n	80041ac <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041a6:	f04f 33ff 	mov.w	r3, #4294967295
 80041aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041ac:	69bb      	ldr	r3, [r7, #24]
	}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b088      	sub	sp, #32
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041ce:	3b01      	subs	r3, #1
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f023 0307 	bic.w	r3, r3, #7
 80041dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <prvInitialiseNewTask+0x48>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	617b      	str	r3, [r7, #20]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01f      	beq.n	8004244 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e012      	b.n	8004230 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	7819      	ldrb	r1, [r3, #0]
 8004212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	3334      	adds	r3, #52	; 0x34
 800421a:	460a      	mov	r2, r1
 800421c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d006      	beq.n	8004238 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3301      	adds	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b0f      	cmp	r3, #15
 8004234:	d9e9      	bls.n	800420a <prvInitialiseNewTask+0x54>
 8004236:	e000      	b.n	800423a <prvInitialiseNewTask+0x84>
			{
				break;
 8004238:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004242:	e003      	b.n	800424c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	2b06      	cmp	r3, #6
 8004250:	d901      	bls.n	8004256 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004252:	2306      	movs	r3, #6
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004260:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2200      	movs	r2, #0
 8004266:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	3304      	adds	r3, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff f951 	bl	8003514 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	3318      	adds	r3, #24
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff f94c 	bl	8003514 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004280:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	f1c3 0207 	rsb	r2, r3, #7
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004290:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	2200      	movs	r2, #0
 8004296:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	68f9      	ldr	r1, [r7, #12]
 80042a4:	69b8      	ldr	r0, [r7, #24]
 80042a6:	f000 fe93 	bl	8004fd0 <pxPortInitialiseStack>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042bc:	bf00      	nop
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042cc:	f000 ffaa 	bl	8005224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042d0:	4b2a      	ldr	r3, [pc, #168]	; (800437c <prvAddNewTaskToReadyList+0xb8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a29      	ldr	r2, [pc, #164]	; (800437c <prvAddNewTaskToReadyList+0xb8>)
 80042d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042da:	4b29      	ldr	r3, [pc, #164]	; (8004380 <prvAddNewTaskToReadyList+0xbc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042e2:	4a27      	ldr	r2, [pc, #156]	; (8004380 <prvAddNewTaskToReadyList+0xbc>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <prvAddNewTaskToReadyList+0xb8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d110      	bne.n	8004312 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042f0:	f000 fbae 	bl	8004a50 <prvInitialiseTaskLists>
 80042f4:	e00d      	b.n	8004312 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042f6:	4b23      	ldr	r3, [pc, #140]	; (8004384 <prvAddNewTaskToReadyList+0xc0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <prvAddNewTaskToReadyList+0xbc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	429a      	cmp	r2, r3
 800430a:	d802      	bhi.n	8004312 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800430c:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <prvAddNewTaskToReadyList+0xbc>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <prvAddNewTaskToReadyList+0xc4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <prvAddNewTaskToReadyList+0xc4>)
 800431a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	2201      	movs	r2, #1
 8004322:	409a      	lsls	r2, r3
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <prvAddNewTaskToReadyList+0xc8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4313      	orrs	r3, r2
 800432a:	4a18      	ldr	r2, [pc, #96]	; (800438c <prvAddNewTaskToReadyList+0xc8>)
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4a15      	ldr	r2, [pc, #84]	; (8004390 <prvAddNewTaskToReadyList+0xcc>)
 800433c:	441a      	add	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f7ff f8f2 	bl	800352e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800434a:	f000 ff9b 	bl	8005284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <prvAddNewTaskToReadyList+0xc0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00e      	beq.n	8004374 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <prvAddNewTaskToReadyList+0xbc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d207      	bcs.n	8004374 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <prvAddNewTaskToReadyList+0xd0>)
 8004366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000194 	.word	0x20000194
 8004380:	20000094 	.word	0x20000094
 8004384:	200001a0 	.word	0x200001a0
 8004388:	200001b0 	.word	0x200001b0
 800438c:	2000019c 	.word	0x2000019c
 8004390:	20000098 	.word	0x20000098
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043aa:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <vTaskDelay+0x60>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <vTaskDelay+0x30>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60bb      	str	r3, [r7, #8]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043c8:	f000 f862 	bl	8004490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043cc:	2100      	movs	r1, #0
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fd98 	bl	8004f04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043d4:	f000 f86a 	bl	80044ac <xTaskResumeAll>
 80043d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <vTaskDelay+0x64>)
 80043e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	200001bc 	.word	0x200001bc
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <vTaskStartScheduler+0x78>)
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	2300      	movs	r3, #0
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2300      	movs	r3, #0
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	491a      	ldr	r1, [pc, #104]	; (800447c <vTaskStartScheduler+0x7c>)
 8004414:	481a      	ldr	r0, [pc, #104]	; (8004480 <vTaskStartScheduler+0x80>)
 8004416:	f7ff fe8d 	bl	8004134 <xTaskCreate>
 800441a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d116      	bne.n	8004450 <vTaskStartScheduler+0x50>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60bb      	str	r3, [r7, #8]
}
 8004434:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <vTaskStartScheduler+0x84>)
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <vTaskStartScheduler+0x88>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <vTaskStartScheduler+0x8c>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800444a:	f000 fe49 	bl	80050e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800444e:	e00e      	b.n	800446e <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d10a      	bne.n	800446e <vTaskStartScheduler+0x6e>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	607b      	str	r3, [r7, #4]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <vTaskStartScheduler+0x6c>
}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	200001b8 	.word	0x200001b8
 800447c:	0800592c 	.word	0x0800592c
 8004480:	08004a21 	.word	0x08004a21
 8004484:	200001b4 	.word	0x200001b4
 8004488:	200001a0 	.word	0x200001a0
 800448c:	20000198 	.word	0x20000198

08004490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <vTaskSuspendAll+0x18>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	4a03      	ldr	r2, [pc, #12]	; (80044a8 <vTaskSuspendAll+0x18>)
 800449c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	200001bc 	.word	0x200001bc

080044ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <xTaskResumeAll+0x114>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	603b      	str	r3, [r7, #0]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044d8:	f000 fea4 	bl	8005224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044dc:	4b38      	ldr	r3, [pc, #224]	; (80045c0 <xTaskResumeAll+0x114>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	4a37      	ldr	r2, [pc, #220]	; (80045c0 <xTaskResumeAll+0x114>)
 80044e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e6:	4b36      	ldr	r3, [pc, #216]	; (80045c0 <xTaskResumeAll+0x114>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d161      	bne.n	80045b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044ee:	4b35      	ldr	r3, [pc, #212]	; (80045c4 <xTaskResumeAll+0x118>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d05d      	beq.n	80045b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044f6:	e02e      	b.n	8004556 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f8:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <xTaskResumeAll+0x11c>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3318      	adds	r3, #24
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f86f 	bl	80035e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3304      	adds	r3, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f86a 	bl	80035e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	2201      	movs	r2, #1
 800451a:	409a      	lsls	r2, r3
 800451c:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <xTaskResumeAll+0x120>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4313      	orrs	r3, r2
 8004522:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <xTaskResumeAll+0x120>)
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <xTaskResumeAll+0x124>)
 8004534:	441a      	add	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f7fe fff6 	bl	800352e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004546:	4b23      	ldr	r3, [pc, #140]	; (80045d4 <xTaskResumeAll+0x128>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	429a      	cmp	r2, r3
 800454e:	d302      	bcc.n	8004556 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004550:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <xTaskResumeAll+0x12c>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <xTaskResumeAll+0x11c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1cc      	bne.n	80044f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004564:	f000 faf2 	bl	8004b4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004568:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <xTaskResumeAll+0x130>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d010      	beq.n	8004596 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004574:	f000 f836 	bl	80045e4 <xTaskIncrementTick>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <xTaskResumeAll+0x12c>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f1      	bne.n	8004574 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004590:	4b12      	ldr	r3, [pc, #72]	; (80045dc <xTaskResumeAll+0x130>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <xTaskResumeAll+0x12c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800459e:	2301      	movs	r3, #1
 80045a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <xTaskResumeAll+0x134>)
 80045a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045b2:	f000 fe67 	bl	8005284 <vPortExitCritical>

	return xAlreadyYielded;
 80045b6:	68bb      	ldr	r3, [r7, #8]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	200001bc 	.word	0x200001bc
 80045c4:	20000194 	.word	0x20000194
 80045c8:	20000154 	.word	0x20000154
 80045cc:	2000019c 	.word	0x2000019c
 80045d0:	20000098 	.word	0x20000098
 80045d4:	20000094 	.word	0x20000094
 80045d8:	200001a8 	.word	0x200001a8
 80045dc:	200001a4 	.word	0x200001a4
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ee:	4b4e      	ldr	r3, [pc, #312]	; (8004728 <xTaskIncrementTick+0x144>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 808e 	bne.w	8004714 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045f8:	4b4c      	ldr	r3, [pc, #304]	; (800472c <xTaskIncrementTick+0x148>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3301      	adds	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004600:	4a4a      	ldr	r2, [pc, #296]	; (800472c <xTaskIncrementTick+0x148>)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d120      	bne.n	800464e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800460c:	4b48      	ldr	r3, [pc, #288]	; (8004730 <xTaskIncrementTick+0x14c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <xTaskIncrementTick+0x48>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	603b      	str	r3, [r7, #0]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xTaskIncrementTick+0x46>
 800462c:	4b40      	ldr	r3, [pc, #256]	; (8004730 <xTaskIncrementTick+0x14c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	4b40      	ldr	r3, [pc, #256]	; (8004734 <xTaskIncrementTick+0x150>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3e      	ldr	r2, [pc, #248]	; (8004730 <xTaskIncrementTick+0x14c>)
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <xTaskIncrementTick+0x150>)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <xTaskIncrementTick+0x154>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3301      	adds	r3, #1
 8004646:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <xTaskIncrementTick+0x154>)
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	f000 fa7f 	bl	8004b4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800464e:	4b3b      	ldr	r3, [pc, #236]	; (800473c <xTaskIncrementTick+0x158>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d348      	bcc.n	80046ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <xTaskIncrementTick+0x14c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <xTaskIncrementTick+0x158>)
 8004664:	f04f 32ff 	mov.w	r2, #4294967295
 8004668:	601a      	str	r2, [r3, #0]
					break;
 800466a:	e03e      	b.n	80046ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466c:	4b30      	ldr	r3, [pc, #192]	; (8004730 <xTaskIncrementTick+0x14c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d203      	bcs.n	800468c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004684:	4a2d      	ldr	r2, [pc, #180]	; (800473c <xTaskIncrementTick+0x158>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800468a:	e02e      	b.n	80046ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	3304      	adds	r3, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe ffa9 	bl	80035e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3318      	adds	r3, #24
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe ffa0 	bl	80035e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	2201      	movs	r2, #1
 80046ae:	409a      	lsls	r2, r3
 80046b0:	4b23      	ldr	r3, [pc, #140]	; (8004740 <xTaskIncrementTick+0x15c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	4a22      	ldr	r2, [pc, #136]	; (8004740 <xTaskIncrementTick+0x15c>)
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <xTaskIncrementTick+0x160>)
 80046c8:	441a      	add	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4619      	mov	r1, r3
 80046d0:	4610      	mov	r0, r2
 80046d2:	f7fe ff2c 	bl	800352e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <xTaskIncrementTick+0x164>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3b9      	bcc.n	8004658 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e8:	e7b6      	b.n	8004658 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046ea:	4b17      	ldr	r3, [pc, #92]	; (8004748 <xTaskIncrementTick+0x164>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4914      	ldr	r1, [pc, #80]	; (8004744 <xTaskIncrementTick+0x160>)
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d901      	bls.n	8004706 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004702:	2301      	movs	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <xTaskIncrementTick+0x168>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800470e:	2301      	movs	r3, #1
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e004      	b.n	800471e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004714:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <xTaskIncrementTick+0x16c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <xTaskIncrementTick+0x16c>)
 800471c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800471e:	697b      	ldr	r3, [r7, #20]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	200001bc 	.word	0x200001bc
 800472c:	20000198 	.word	0x20000198
 8004730:	2000014c 	.word	0x2000014c
 8004734:	20000150 	.word	0x20000150
 8004738:	200001ac 	.word	0x200001ac
 800473c:	200001b4 	.word	0x200001b4
 8004740:	2000019c 	.word	0x2000019c
 8004744:	20000098 	.word	0x20000098
 8004748:	20000094 	.word	0x20000094
 800474c:	200001a8 	.word	0x200001a8
 8004750:	200001a4 	.word	0x200001a4

08004754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <vTaskSwitchContext+0xa4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <vTaskSwitchContext+0xa8>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004768:	e03f      	b.n	80047ea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <vTaskSwitchContext+0xa8>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <vTaskSwitchContext+0xac>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	f1c3 031f 	rsb	r3, r3, #31
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	491f      	ldr	r1, [pc, #124]	; (8004804 <vTaskSwitchContext+0xb0>)
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	607b      	str	r3, [r7, #4]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <vTaskSwitchContext+0x5a>
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4a12      	ldr	r2, [pc, #72]	; (8004804 <vTaskSwitchContext+0xb0>)
 80047bc:	4413      	add	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	3308      	adds	r3, #8
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d104      	bne.n	80047e0 <vTaskSwitchContext+0x8c>
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4a08      	ldr	r2, [pc, #32]	; (8004808 <vTaskSwitchContext+0xb4>)
 80047e8:	6013      	str	r3, [r2, #0]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	200001bc 	.word	0x200001bc
 80047fc:	200001a8 	.word	0x200001a8
 8004800:	2000019c 	.word	0x2000019c
 8004804:	20000098 	.word	0x20000098
 8004808:	20000094 	.word	0x20000094

0800480c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60fb      	str	r3, [r7, #12]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <vTaskPlaceOnEventList+0x44>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3318      	adds	r3, #24
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fe fe9b 	bl	8003576 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004840:	2101      	movs	r1, #1
 8004842:	6838      	ldr	r0, [r7, #0]
 8004844:	f000 fb5e 	bl	8004f04 <prvAddCurrentTaskToDelayedList>
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000094 	.word	0x20000094

08004854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	60fb      	str	r3, [r7, #12]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	3318      	adds	r3, #24
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe feaf 	bl	80035e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <xTaskRemoveFromEventList+0xac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11c      	bne.n	80048cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3304      	adds	r3, #4
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe fea6 	bl	80035e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	2201      	movs	r2, #1
 80048a2:	409a      	lsls	r2, r3
 80048a4:	4b17      	ldr	r3, [pc, #92]	; (8004904 <xTaskRemoveFromEventList+0xb0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	4a16      	ldr	r2, [pc, #88]	; (8004904 <xTaskRemoveFromEventList+0xb0>)
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <xTaskRemoveFromEventList+0xb4>)
 80048bc:	441a      	add	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe fe32 	bl	800352e <vListInsertEnd>
 80048ca:	e005      	b.n	80048d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3318      	adds	r3, #24
 80048d0:	4619      	mov	r1, r3
 80048d2:	480e      	ldr	r0, [pc, #56]	; (800490c <xTaskRemoveFromEventList+0xb8>)
 80048d4:	f7fe fe2b 	bl	800352e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <xTaskRemoveFromEventList+0xbc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d905      	bls.n	80048f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048e6:	2301      	movs	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <xTaskRemoveFromEventList+0xc0>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e001      	b.n	80048f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	200001bc 	.word	0x200001bc
 8004904:	2000019c 	.word	0x2000019c
 8004908:	20000098 	.word	0x20000098
 800490c:	20000154 	.word	0x20000154
 8004910:	20000094 	.word	0x20000094
 8004914:	200001a8 	.word	0x200001a8

08004918 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <vTaskInternalSetTimeOutState+0x24>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <vTaskInternalSetTimeOutState+0x28>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	605a      	str	r2, [r3, #4]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	200001ac 	.word	0x200001ac
 8004940:	20000198 	.word	0x20000198

08004944 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	613b      	str	r3, [r7, #16]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	60fb      	str	r3, [r7, #12]
}
 8004982:	bf00      	nop
 8004984:	e7fe      	b.n	8004984 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004986:	f000 fc4d 	bl	8005224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800498a:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <xTaskCheckForTimeOut+0xbc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d102      	bne.n	80049aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e023      	b.n	80049f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <xTaskCheckForTimeOut+0xc0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d007      	beq.n	80049c6 <xTaskCheckForTimeOut+0x82>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e015      	b.n	80049f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d20b      	bcs.n	80049e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff9b 	bl	8004918 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e004      	b.n	80049f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049f2:	f000 fc47 	bl	8005284 <vPortExitCritical>

	return xReturn;
 80049f6:	69fb      	ldr	r3, [r7, #28]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000198 	.word	0x20000198
 8004a04:	200001ac 	.word	0x200001ac

08004a08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <vTaskMissedYield+0x14>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	200001a8 	.word	0x200001a8

08004a20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a28:	f000 f852 	bl	8004ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <prvIdleTask+0x28>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d9f9      	bls.n	8004a28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <prvIdleTask+0x2c>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a44:	e7f0      	b.n	8004a28 <prvIdleTask+0x8>
 8004a46:	bf00      	nop
 8004a48:	20000098 	.word	0x20000098
 8004a4c:	e000ed04 	.word	0xe000ed04

08004a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	e00c      	b.n	8004a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <prvInitialiseTaskLists+0x60>)
 8004a68:	4413      	add	r3, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe fd32 	bl	80034d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3301      	adds	r3, #1
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b06      	cmp	r3, #6
 8004a7a:	d9ef      	bls.n	8004a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a7c:	480d      	ldr	r0, [pc, #52]	; (8004ab4 <prvInitialiseTaskLists+0x64>)
 8004a7e:	f7fe fd29 	bl	80034d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a82:	480d      	ldr	r0, [pc, #52]	; (8004ab8 <prvInitialiseTaskLists+0x68>)
 8004a84:	f7fe fd26 	bl	80034d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a88:	480c      	ldr	r0, [pc, #48]	; (8004abc <prvInitialiseTaskLists+0x6c>)
 8004a8a:	f7fe fd23 	bl	80034d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a8e:	480c      	ldr	r0, [pc, #48]	; (8004ac0 <prvInitialiseTaskLists+0x70>)
 8004a90:	f7fe fd20 	bl	80034d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a94:	480b      	ldr	r0, [pc, #44]	; (8004ac4 <prvInitialiseTaskLists+0x74>)
 8004a96:	f7fe fd1d 	bl	80034d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <prvInitialiseTaskLists+0x78>)
 8004a9c:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <prvInitialiseTaskLists+0x64>)
 8004a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <prvInitialiseTaskLists+0x7c>)
 8004aa2:	4a05      	ldr	r2, [pc, #20]	; (8004ab8 <prvInitialiseTaskLists+0x68>)
 8004aa4:	601a      	str	r2, [r3, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000098 	.word	0x20000098
 8004ab4:	20000124 	.word	0x20000124
 8004ab8:	20000138 	.word	0x20000138
 8004abc:	20000154 	.word	0x20000154
 8004ac0:	20000168 	.word	0x20000168
 8004ac4:	20000180 	.word	0x20000180
 8004ac8:	2000014c 	.word	0x2000014c
 8004acc:	20000150 	.word	0x20000150

08004ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ad6:	e019      	b.n	8004b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ad8:	f000 fba4 	bl	8005224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <prvCheckTasksWaitingTermination+0x50>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe fd7d 	bl	80035e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004aee:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <prvCheckTasksWaitingTermination+0x54>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <prvCheckTasksWaitingTermination+0x54>)
 8004af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <prvCheckTasksWaitingTermination+0x58>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <prvCheckTasksWaitingTermination+0x58>)
 8004b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b02:	f000 fbbf 	bl	8005284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f810 	bl	8004b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <prvCheckTasksWaitingTermination+0x58>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e1      	bne.n	8004ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000168 	.word	0x20000168
 8004b24:	20000194 	.word	0x20000194
 8004b28:	2000017c 	.word	0x2000017c

08004b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fd61 	bl	8005600 <vPortFree>
			vPortFree( pxTCB );
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fd5e 	bl	8005600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <prvResetNextTaskUnblockTime+0x38>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <prvResetNextTaskUnblockTime+0x3c>)
 8004b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b64:	e008      	b.n	8004b78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <prvResetNextTaskUnblockTime+0x38>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <prvResetNextTaskUnblockTime+0x3c>)
 8004b76:	6013      	str	r3, [r2, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	2000014c 	.word	0x2000014c
 8004b88:	200001b4 	.word	0x200001b4

08004b8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <xTaskGetSchedulerState+0x34>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e008      	b.n	8004bb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba0:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <xTaskGetSchedulerState+0x38>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	e001      	b.n	8004bb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bb2:	687b      	ldr	r3, [r7, #4]
	}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	200001a0 	.word	0x200001a0
 8004bc4:	200001bc 	.word	0x200001bc

08004bc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d05e      	beq.n	8004c9c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <xTaskPriorityInherit+0xe0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d24e      	bcs.n	8004c8a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	db06      	blt.n	8004c02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf4:	4b2c      	ldr	r3, [pc, #176]	; (8004ca8 <xTaskPriorityInherit+0xe0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	f1c3 0207 	rsb	r2, r3, #7
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6959      	ldr	r1, [r3, #20]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4a26      	ldr	r2, [pc, #152]	; (8004cac <xTaskPriorityInherit+0xe4>)
 8004c14:	4413      	add	r3, r2
 8004c16:	4299      	cmp	r1, r3
 8004c18:	d12f      	bne.n	8004c7a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fce2 	bl	80035e8 <uxListRemove>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	2201      	movs	r2, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43da      	mvns	r2, r3
 8004c36:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <xTaskPriorityInherit+0xe8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <xTaskPriorityInherit+0xe8>)
 8004c3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <xTaskPriorityInherit+0xe0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	2201      	movs	r2, #1
 8004c50:	409a      	lsls	r2, r3
 8004c52:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <xTaskPriorityInherit+0xe8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <xTaskPriorityInherit+0xe8>)
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4a10      	ldr	r2, [pc, #64]	; (8004cac <xTaskPriorityInherit+0xe4>)
 8004c6a:	441a      	add	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f7fe fc5b 	bl	800352e <vListInsertEnd>
 8004c78:	e004      	b.n	8004c84 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <xTaskPriorityInherit+0xe0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e008      	b.n	8004c9c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <xTaskPriorityInherit+0xe0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d201      	bcs.n	8004c9c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
	}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000094 	.word	0x20000094
 8004cac:	20000098 	.word	0x20000098
 8004cb0:	2000019c 	.word	0x2000019c

08004cb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d06e      	beq.n	8004da8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cca:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <xTaskPriorityDisinherit+0x100>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d00a      	beq.n	8004cea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60bb      	str	r3, [r7, #8]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d044      	beq.n	8004da8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d140      	bne.n	8004da8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fc5c 	bl	80035e8 <uxListRemove>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d115      	bne.n	8004d62 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	491f      	ldr	r1, [pc, #124]	; (8004db8 <xTaskPriorityDisinherit+0x104>)
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xTaskPriorityDisinherit+0xae>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	2201      	movs	r2, #1
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43da      	mvns	r2, r3
 8004d58:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <xTaskPriorityDisinherit+0x108>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <xTaskPriorityDisinherit+0x108>)
 8004d60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	f1c3 0207 	rsb	r2, r3, #7
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <xTaskPriorityDisinherit+0x108>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <xTaskPriorityDisinherit+0x108>)
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <xTaskPriorityDisinherit+0x104>)
 8004d96:	441a      	add	r2, r3
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f7fe fbc5 	bl	800352e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004da8:	697b      	ldr	r3, [r7, #20]
	}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000094 	.word	0x20000094
 8004db8:	20000098 	.word	0x20000098
 8004dbc:	2000019c 	.word	0x2000019c

08004dc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d077      	beq.n	8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60fb      	str	r3, [r7, #12]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d902      	bls.n	8004e06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e002      	b.n	8004e0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d058      	beq.n	8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d153      	bne.n	8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e20:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d10a      	bne.n	8004e40 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	60bb      	str	r3, [r7, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	db04      	blt.n	8004e5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f1c3 0207 	rsb	r2, r3, #7
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	6959      	ldr	r1, [r3, #20]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004e6e:	4413      	add	r3, r2
 8004e70:	4299      	cmp	r1, r3
 8004e72:	d129      	bne.n	8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe fbb5 	bl	80035e8 <uxListRemove>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	2201      	movs	r2, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43da      	mvns	r2, r3
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4013      	ands	r3, r2
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004e98:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	4a0b      	ldr	r2, [pc, #44]	; (8004ed8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4a06      	ldr	r2, [pc, #24]	; (8004ed4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004eba:	441a      	add	r2, r3
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7fe fb33 	bl	800352e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ec8:	bf00      	nop
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000094 	.word	0x20000094
 8004ed4:	20000098 	.word	0x20000098
 8004ed8:	2000019c 	.word	0x2000019c

08004edc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eee:	3201      	adds	r2, #1
 8004ef0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004ef2:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
	}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20000094 	.word	0x20000094

08004f04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f0e:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f14:	4b28      	ldr	r3, [pc, #160]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fb64 	bl	80035e8 <uxListRemove>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43da      	mvns	r2, r3
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d10a      	bne.n	8004f5c <prvAddCurrentTaskToDelayedList+0x58>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	481a      	ldr	r0, [pc, #104]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f56:	f7fe faea 	bl	800352e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f5a:	e026      	b.n	8004faa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d209      	bcs.n	8004f88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7fe faf8 	bl	8003576 <vListInsert>
}
 8004f86:	e010      	b.n	8004faa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f7fe faee 	bl	8003576 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d202      	bcs.n	8004faa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fa4:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6013      	str	r3, [r2, #0]
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000198 	.word	0x20000198
 8004fb8:	20000094 	.word	0x20000094
 8004fbc:	2000019c 	.word	0x2000019c
 8004fc0:	20000180 	.word	0x20000180
 8004fc4:	20000150 	.word	0x20000150
 8004fc8:	2000014c 	.word	0x2000014c
 8004fcc:	200001b4 	.word	0x200001b4

08004fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3b04      	subs	r3, #4
 8004fe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3b04      	subs	r3, #4
 8004fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3b04      	subs	r3, #4
 8004ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005000:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <pxPortInitialiseStack+0x64>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3b14      	subs	r3, #20
 800500a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3b04      	subs	r3, #4
 8005016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f06f 0202 	mvn.w	r2, #2
 800501e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3b20      	subs	r3, #32
 8005024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005026:	68fb      	ldr	r3, [r7, #12]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	08005039 	.word	0x08005039

08005038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <prvTaskExitError+0x54>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d00a      	beq.n	8005062 <prvTaskExitError+0x2a>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	60fb      	str	r3, [r7, #12]
}
 800505e:	bf00      	nop
 8005060:	e7fe      	b.n	8005060 <prvTaskExitError+0x28>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60bb      	str	r3, [r7, #8]
}
 8005074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005076:	bf00      	nop
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0fc      	beq.n	8005078 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	20000010 	.word	0x20000010

08005090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <pxCurrentTCBConst2>)
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	6808      	ldr	r0, [r1, #0]
 8005096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509a:	f380 8809 	msr	PSP, r0
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f380 8811 	msr	BASEPRI, r0
 80050aa:	4770      	bx	lr
 80050ac:	f3af 8000 	nop.w

080050b0 <pxCurrentTCBConst2>:
 80050b0:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050b8:	4808      	ldr	r0, [pc, #32]	; (80050dc <prvPortStartFirstTask+0x24>)
 80050ba:	6800      	ldr	r0, [r0, #0]
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	f380 8808 	msr	MSP, r0
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f380 8814 	msr	CONTROL, r0
 80050ca:	b662      	cpsie	i
 80050cc:	b661      	cpsie	f
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	df00      	svc	0
 80050d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050da:	bf00      	nop
 80050dc:	e000ed08 	.word	0xe000ed08

080050e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050e6:	4b46      	ldr	r3, [pc, #280]	; (8005200 <xPortStartScheduler+0x120>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a46      	ldr	r2, [pc, #280]	; (8005204 <xPortStartScheduler+0x124>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10a      	bne.n	8005106 <xPortStartScheduler+0x26>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	613b      	str	r3, [r7, #16]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005106:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <xPortStartScheduler+0x120>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3f      	ldr	r2, [pc, #252]	; (8005208 <xPortStartScheduler+0x128>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10a      	bne.n	8005126 <xPortStartScheduler+0x46>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60fb      	str	r3, [r7, #12]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005126:	4b39      	ldr	r3, [pc, #228]	; (800520c <xPortStartScheduler+0x12c>)
 8005128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	22ff      	movs	r2, #255	; 0xff
 8005136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <xPortStartScheduler+0x130>)
 800514c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <xPortStartScheduler+0x134>)
 8005150:	2207      	movs	r2, #7
 8005152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005154:	e009      	b.n	800516a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005156:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <xPortStartScheduler+0x134>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3b01      	subs	r3, #1
 800515c:	4a2d      	ldr	r2, [pc, #180]	; (8005214 <xPortStartScheduler+0x134>)
 800515e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b80      	cmp	r3, #128	; 0x80
 8005174:	d0ef      	beq.n	8005156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005176:	4b27      	ldr	r3, [pc, #156]	; (8005214 <xPortStartScheduler+0x134>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1c3 0307 	rsb	r3, r3, #7
 800517e:	2b04      	cmp	r3, #4
 8005180:	d00a      	beq.n	8005198 <xPortStartScheduler+0xb8>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	60bb      	str	r3, [r7, #8]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <xPortStartScheduler+0x134>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <xPortStartScheduler+0x134>)
 80051a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <xPortStartScheduler+0x134>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <xPortStartScheduler+0x134>)
 80051ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051b6:	4b18      	ldr	r3, [pc, #96]	; (8005218 <xPortStartScheduler+0x138>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a17      	ldr	r2, [pc, #92]	; (8005218 <xPortStartScheduler+0x138>)
 80051bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <xPortStartScheduler+0x138>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a14      	ldr	r2, [pc, #80]	; (8005218 <xPortStartScheduler+0x138>)
 80051c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051ce:	f000 f8dd 	bl	800538c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <xPortStartScheduler+0x13c>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051d8:	f000 f8fc 	bl	80053d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051dc:	4b10      	ldr	r3, [pc, #64]	; (8005220 <xPortStartScheduler+0x140>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0f      	ldr	r2, [pc, #60]	; (8005220 <xPortStartScheduler+0x140>)
 80051e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051e8:	f7ff ff66 	bl	80050b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051ec:	f7ff fab2 	bl	8004754 <vTaskSwitchContext>
	prvTaskExitError();
 80051f0:	f7ff ff22 	bl	8005038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	e000ed00 	.word	0xe000ed00
 8005204:	410fc271 	.word	0x410fc271
 8005208:	410fc270 	.word	0x410fc270
 800520c:	e000e400 	.word	0xe000e400
 8005210:	200001c0 	.word	0x200001c0
 8005214:	200001c4 	.word	0x200001c4
 8005218:	e000ed20 	.word	0xe000ed20
 800521c:	20000010 	.word	0x20000010
 8005220:	e000ef34 	.word	0xe000ef34

08005224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	607b      	str	r3, [r7, #4]
}
 800523c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <vPortEnterCritical+0x58>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3301      	adds	r3, #1
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <vPortEnterCritical+0x58>)
 8005246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <vPortEnterCritical+0x58>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d10f      	bne.n	8005270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <vPortEnterCritical+0x5c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <vPortEnterCritical+0x4c>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	603b      	str	r3, [r7, #0]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <vPortEnterCritical+0x4a>
	}
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	20000010 	.word	0x20000010
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <vPortExitCritical+0x50>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <vPortExitCritical+0x24>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	607b      	str	r3, [r7, #4]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <vPortExitCritical+0x50>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <vPortExitCritical+0x50>)
 80052b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <vPortExitCritical+0x50>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d105      	bne.n	80052c6 <vPortExitCritical+0x42>
 80052ba:	2300      	movs	r3, #0
 80052bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f383 8811 	msr	BASEPRI, r3
}
 80052c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010
	...

080052e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052e0:	f3ef 8009 	mrs	r0, PSP
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4b15      	ldr	r3, [pc, #84]	; (8005340 <pxCurrentTCBConst>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	f01e 0f10 	tst.w	lr, #16
 80052f0:	bf08      	it	eq
 80052f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fa:	6010      	str	r0, [r2, #0]
 80052fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005304:	f380 8811 	msr	BASEPRI, r0
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f7ff fa20 	bl	8004754 <vTaskSwitchContext>
 8005314:	f04f 0000 	mov.w	r0, #0
 8005318:	f380 8811 	msr	BASEPRI, r0
 800531c:	bc09      	pop	{r0, r3}
 800531e:	6819      	ldr	r1, [r3, #0]
 8005320:	6808      	ldr	r0, [r1, #0]
 8005322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005326:	f01e 0f10 	tst.w	lr, #16
 800532a:	bf08      	it	eq
 800532c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005330:	f380 8809 	msr	PSP, r0
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	f3af 8000 	nop.w

08005340 <pxCurrentTCBConst>:
 8005340:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	607b      	str	r3, [r7, #4]
}
 8005360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005362:	f7ff f93f 	bl	80045e4 <xTaskIncrementTick>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <xPortSysTickHandler+0x40>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	2300      	movs	r3, #0
 8005376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f383 8811 	msr	BASEPRI, r3
}
 800537e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <vPortSetupTimerInterrupt+0x34>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <vPortSetupTimerInterrupt+0x38>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <vPortSetupTimerInterrupt+0x3c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <vPortSetupTimerInterrupt+0x40>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <vPortSetupTimerInterrupt+0x44>)
 80053aa:	3b01      	subs	r3, #1
 80053ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <vPortSetupTimerInterrupt+0x34>)
 80053b0:	2207      	movs	r2, #7
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e010 	.word	0xe000e010
 80053c4:	e000e018 	.word	0xe000e018
 80053c8:	20000004 	.word	0x20000004
 80053cc:	10624dd3 	.word	0x10624dd3
 80053d0:	e000e014 	.word	0xe000e014

080053d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053e4 <vPortEnableVFP+0x10>
 80053d8:	6801      	ldr	r1, [r0, #0]
 80053da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053de:	6001      	str	r1, [r0, #0]
 80053e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053e2:	bf00      	nop
 80053e4:	e000ed88 	.word	0xe000ed88

080053e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053ee:	f3ef 8305 	mrs	r3, IPSR
 80053f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d914      	bls.n	8005424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053fa:	4a17      	ldr	r2, [pc, #92]	; (8005458 <vPortValidateInterruptPriority+0x70>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005404:	4b15      	ldr	r3, [pc, #84]	; (800545c <vPortValidateInterruptPriority+0x74>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	7afa      	ldrb	r2, [r7, #11]
 800540a:	429a      	cmp	r2, r3
 800540c:	d20a      	bcs.n	8005424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <vPortValidateInterruptPriority+0x78>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800542c:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <vPortValidateInterruptPriority+0x7c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d90a      	bls.n	800544a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	603b      	str	r3, [r7, #0]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <vPortValidateInterruptPriority+0x60>
	}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	e000e3f0 	.word	0xe000e3f0
 800545c:	200001c0 	.word	0x200001c0
 8005460:	e000ed0c 	.word	0xe000ed0c
 8005464:	200001c4 	.word	0x200001c4

08005468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005474:	f7ff f80c 	bl	8004490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005478:	4b5b      	ldr	r3, [pc, #364]	; (80055e8 <pvPortMalloc+0x180>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005480:	f000 f920 	bl	80056c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005484:	4b59      	ldr	r3, [pc, #356]	; (80055ec <pvPortMalloc+0x184>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	f040 8093 	bne.w	80055b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01d      	beq.n	80054d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005498:	2208      	movs	r2, #8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d014      	beq.n	80054d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f023 0307 	bic.w	r3, r3, #7
 80054b0:	3308      	adds	r3, #8
 80054b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <pvPortMalloc+0x6c>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	617b      	str	r3, [r7, #20]
}
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d06e      	beq.n	80055b8 <pvPortMalloc+0x150>
 80054da:	4b45      	ldr	r3, [pc, #276]	; (80055f0 <pvPortMalloc+0x188>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d869      	bhi.n	80055b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054e4:	4b43      	ldr	r3, [pc, #268]	; (80055f4 <pvPortMalloc+0x18c>)
 80054e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054e8:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <pvPortMalloc+0x18c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ee:	e004      	b.n	80054fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d903      	bls.n	800550c <pvPortMalloc+0xa4>
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f1      	bne.n	80054f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800550c:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <pvPortMalloc+0x180>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005512:	429a      	cmp	r2, r3
 8005514:	d050      	beq.n	80055b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2208      	movs	r2, #8
 800551c:	4413      	add	r3, r2
 800551e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	2308      	movs	r3, #8
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	429a      	cmp	r2, r3
 8005536:	d91f      	bls.n	8005578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <pvPortMalloc+0xf8>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	613b      	str	r3, [r7, #16]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	1ad2      	subs	r2, r2, r3
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005572:	69b8      	ldr	r0, [r7, #24]
 8005574:	f000 f908 	bl	8005788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <pvPortMalloc+0x188>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	4a1b      	ldr	r2, [pc, #108]	; (80055f0 <pvPortMalloc+0x188>)
 8005584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005586:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <pvPortMalloc+0x188>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <pvPortMalloc+0x190>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d203      	bcs.n	800559a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005592:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <pvPortMalloc+0x188>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <pvPortMalloc+0x190>)
 8005598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <pvPortMalloc+0x184>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <pvPortMalloc+0x194>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	4a11      	ldr	r2, [pc, #68]	; (80055fc <pvPortMalloc+0x194>)
 80055b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055b8:	f7fe ff78 	bl	80044ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <pvPortMalloc+0x174>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60fb      	str	r3, [r7, #12]
}
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <pvPortMalloc+0x172>
	return pvReturn;
 80055dc:	69fb      	ldr	r3, [r7, #28]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3728      	adds	r7, #40	; 0x28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000dd0 	.word	0x20000dd0
 80055ec:	20000de4 	.word	0x20000de4
 80055f0:	20000dd4 	.word	0x20000dd4
 80055f4:	20000dc8 	.word	0x20000dc8
 80055f8:	20000dd8 	.word	0x20000dd8
 80055fc:	20000ddc 	.word	0x20000ddc

08005600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d04d      	beq.n	80056ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005612:	2308      	movs	r3, #8
 8005614:	425b      	negs	r3, r3
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <vPortFree+0xb8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <vPortFree+0x44>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	60fb      	str	r3, [r7, #12]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <vPortFree+0x62>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60bb      	str	r3, [r7, #8]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <vPortFree+0xb8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01e      	beq.n	80056ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11a      	bne.n	80056ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <vPortFree+0xb8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005688:	f7fe ff02 	bl	8004490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <vPortFree+0xbc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4413      	add	r3, r2
 8005696:	4a09      	ldr	r2, [pc, #36]	; (80056bc <vPortFree+0xbc>)
 8005698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800569a:	6938      	ldr	r0, [r7, #16]
 800569c:	f000 f874 	bl	8005788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <vPortFree+0xc0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	4a06      	ldr	r2, [pc, #24]	; (80056c0 <vPortFree+0xc0>)
 80056a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056aa:	f7fe feff 	bl	80044ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056ae:	bf00      	nop
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000de4 	.word	0x20000de4
 80056bc:	20000dd4 	.word	0x20000dd4
 80056c0:	20000de0 	.word	0x20000de0

080056c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056d0:	4b27      	ldr	r3, [pc, #156]	; (8005770 <prvHeapInit+0xac>)
 80056d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3307      	adds	r3, #7
 80056e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0307 	bic.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <prvHeapInit+0xac>)
 80056f4:	4413      	add	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <prvHeapInit+0xb0>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <prvHeapInit+0xb0>)
 8005704:	2200      	movs	r2, #0
 8005706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4413      	add	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005710:	2208      	movs	r2, #8
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0307 	bic.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a15      	ldr	r2, [pc, #84]	; (8005778 <prvHeapInit+0xb4>)
 8005724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <prvHeapInit+0xb4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2200      	movs	r2, #0
 800572c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <prvHeapInit+0xb4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <prvHeapInit+0xb4>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a0a      	ldr	r2, [pc, #40]	; (800577c <prvHeapInit+0xb8>)
 8005752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4a09      	ldr	r2, [pc, #36]	; (8005780 <prvHeapInit+0xbc>)
 800575a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <prvHeapInit+0xc0>)
 800575e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005762:	601a      	str	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	200001c8 	.word	0x200001c8
 8005774:	20000dc8 	.word	0x20000dc8
 8005778:	20000dd0 	.word	0x20000dd0
 800577c:	20000dd8 	.word	0x20000dd8
 8005780:	20000dd4 	.word	0x20000dd4
 8005784:	20000de4 	.word	0x20000de4

08005788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005790:	4b28      	ldr	r3, [pc, #160]	; (8005834 <prvInsertBlockIntoFreeList+0xac>)
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	e002      	b.n	800579c <prvInsertBlockIntoFreeList+0x14>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d8f7      	bhi.n	8005796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4413      	add	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d108      	bne.n	80057ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	441a      	add	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d118      	bne.n	8005810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b15      	ldr	r3, [pc, #84]	; (8005838 <prvInsertBlockIntoFreeList+0xb0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d00d      	beq.n	8005806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	441a      	add	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e008      	b.n	8005818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005806:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <prvInsertBlockIntoFreeList+0xb0>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	e003      	b.n	8005818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	429a      	cmp	r2, r3
 800581e:	d002      	beq.n	8005826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000dc8 	.word	0x20000dc8
 8005838:	20000dd0 	.word	0x20000dd0

0800583c <__libc_init_array>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4d0d      	ldr	r5, [pc, #52]	; (8005874 <__libc_init_array+0x38>)
 8005840:	4c0d      	ldr	r4, [pc, #52]	; (8005878 <__libc_init_array+0x3c>)
 8005842:	1b64      	subs	r4, r4, r5
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	2600      	movs	r6, #0
 8005848:	42a6      	cmp	r6, r4
 800584a:	d109      	bne.n	8005860 <__libc_init_array+0x24>
 800584c:	4d0b      	ldr	r5, [pc, #44]	; (800587c <__libc_init_array+0x40>)
 800584e:	4c0c      	ldr	r4, [pc, #48]	; (8005880 <__libc_init_array+0x44>)
 8005850:	f000 f82e 	bl	80058b0 <_init>
 8005854:	1b64      	subs	r4, r4, r5
 8005856:	10a4      	asrs	r4, r4, #2
 8005858:	2600      	movs	r6, #0
 800585a:	42a6      	cmp	r6, r4
 800585c:	d105      	bne.n	800586a <__libc_init_array+0x2e>
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	f855 3b04 	ldr.w	r3, [r5], #4
 8005864:	4798      	blx	r3
 8005866:	3601      	adds	r6, #1
 8005868:	e7ee      	b.n	8005848 <__libc_init_array+0xc>
 800586a:	f855 3b04 	ldr.w	r3, [r5], #4
 800586e:	4798      	blx	r3
 8005870:	3601      	adds	r6, #1
 8005872:	e7f2      	b.n	800585a <__libc_init_array+0x1e>
 8005874:	08005944 	.word	0x08005944
 8005878:	08005944 	.word	0x08005944
 800587c:	08005944 	.word	0x08005944
 8005880:	08005948 	.word	0x08005948

08005884 <memcpy>:
 8005884:	440a      	add	r2, r1
 8005886:	4291      	cmp	r1, r2
 8005888:	f100 33ff 	add.w	r3, r0, #4294967295
 800588c:	d100      	bne.n	8005890 <memcpy+0xc>
 800588e:	4770      	bx	lr
 8005890:	b510      	push	{r4, lr}
 8005892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589a:	4291      	cmp	r1, r2
 800589c:	d1f9      	bne.n	8005892 <memcpy+0xe>
 800589e:	bd10      	pop	{r4, pc}

080058a0 <memset>:
 80058a0:	4402      	add	r2, r0
 80058a2:	4603      	mov	r3, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
