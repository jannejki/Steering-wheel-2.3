
Steering wheel 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b04  08005b04  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005b04  08005b04  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b04  08005b04  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  20000014  08005b20  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de8  08005b20  00020de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001036f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b69  00000000  00000000  000303b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00032f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00033eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000366d  00000000  00000000  00034d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110a3  00000000  00000000  00038385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd98e  00000000  00000000  00049428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106db6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003efc  00000000  00000000  00106e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005a70 	.word	0x08005a70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08005a70 	.word	0x08005a70

08000220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b092      	sub	sp, #72	; 0x48
 8000224:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000226:	f000 fbb6 	bl	8000996 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022a:	f000 f865 	bl	80002f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022e:	f000 f8e9 	bl	8000404 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000232:	f000 f8a1 	bl	8000378 <MX_I2C1_Init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of ECU_ACK */
	osSemaphoreDef(ECU_ACK);
 8000236:	2300      	movs	r3, #0
 8000238:	647b      	str	r3, [r7, #68]	; 0x44
	ECU_ACKHandle = osSemaphoreCreate(osSemaphore(ECU_ACK), 1);
 800023a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800023e:	2101      	movs	r1, #1
 8000240:	4618      	mov	r0, r3
 8000242:	f003 f9f1 	bl	8003628 <osSemaphoreCreate>
 8000246:	4603      	mov	r3, r0
 8000248:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <main+0xb4>)
 800024a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of ECUQueue */
	osMessageQDef(ECUQueue, 10, struct InputEvent);
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <main+0xb8>)
 800024e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000256:	e883 0003 	stmia.w	r3, {r0, r1}
	ECUQueueHandle = osMessageCreate(osMessageQ(ECUQueue), NULL);
 800025a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f003 f9ff 	bl	8003664 <osMessageCreate>
 8000266:	4603      	mov	r3, r0
 8000268:	4a1c      	ldr	r2, [pc, #112]	; (80002dc <main+0xbc>)
 800026a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Watchdog */
	osThreadDef(Watchdog, StartWatchdog, osPriorityNormal, 0, 128);
 800026c:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <main+0xc0>)
 800026e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	682b      	ldr	r3, [r5, #0]
 800027a:	6023      	str	r3, [r4, #0]
	WatchdogHandle = osThreadCreate(osThread(Watchdog), NULL);
 800027c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f003 f995 	bl	80035b2 <osThreadCreate>
 8000288:	4603      	mov	r3, r0
 800028a:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <main+0xc4>)
 800028c:	6013      	str	r3, [r2, #0]

	/* definition and creation of ECUTask */
	osThreadDef(ECUTask, StartECUTask, osPriorityNormal, 0, 128);
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <main+0xc8>)
 8000290:	f107 0414 	add.w	r4, r7, #20
 8000294:	461d      	mov	r5, r3
 8000296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029a:	682b      	ldr	r3, [r5, #0]
 800029c:	6023      	str	r3, [r4, #0]
	ECUTaskHandle = osThreadCreate(osThread(ECUTask), NULL);
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f003 f984 	bl	80035b2 <osThreadCreate>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <main+0xcc>)
 80002ae:	6013      	str	r3, [r2, #0]

	/* definition and creation of InputTask */
	osThreadDef(InputTask, StartInputTask, osPriorityNormal, 0, 128);
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <main+0xd0>)
 80002b2:	463c      	mov	r4, r7
 80002b4:	461d      	mov	r5, r3
 80002b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ba:	682b      	ldr	r3, [r5, #0]
 80002bc:	6023      	str	r3, [r4, #0]
	InputTaskHandle = osThreadCreate(osThread(InputTask), NULL);
 80002be:	463b      	mov	r3, r7
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 f975 	bl	80035b2 <osThreadCreate>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <main+0xd4>)
 80002cc:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002ce:	f003 f969 	bl	80035a4 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002d2:	e7fe      	b.n	80002d2 <main+0xb2>
 80002d4:	2000008c 	.word	0x2000008c
 80002d8:	08005aa8 	.word	0x08005aa8
 80002dc:	20000088 	.word	0x20000088
 80002e0:	08005ab0 	.word	0x08005ab0
 80002e4:	2000007c 	.word	0x2000007c
 80002e8:	08005ac4 	.word	0x08005ac4
 80002ec:	20000080 	.word	0x20000080
 80002f0:	08005ad8 	.word	0x08005ad8
 80002f4:	20000084 	.word	0x20000084

080002f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b094      	sub	sp, #80	; 0x50
 80002fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2238      	movs	r2, #56	; 0x38
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f005 fbaa 	bl	8005a60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800031e:	f002 f999 	bl	8002654 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2340      	movs	r3, #64	; 0x40
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	2300      	movs	r3, #0
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f002 fa2f 	bl	800279c <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x50>
		Error_Handler();
 8000344:	f000 fa00 	bl	8000748 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fd33 	bl	8002dcc <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x78>
		Error_Handler();
 800036c:	f000 f9ec 	bl	8000748 <Error_Handler>
	}
}
 8000370:	bf00      	nop
 8000372:	3750      	adds	r7, #80	; 0x50
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800037c:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <MX_I2C1_Init+0x7c>)
 800037e:	4a1e      	ldr	r2, [pc, #120]	; (80003f8 <MX_I2C1_Init+0x80>)
 8000380:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <MX_I2C1_Init+0x7c>)
 8000384:	4a1d      	ldr	r2, [pc, #116]	; (80003fc <MX_I2C1_Init+0x84>)
 8000386:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 64;
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_I2C1_Init+0x7c>)
 800038a:	2240      	movs	r2, #64	; 0x40
 800038c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_I2C1_Init+0x7c>)
 8000390:	2201      	movs	r2, #1
 8000392:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_I2C1_Init+0x7c>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_I2C1_Init+0x7c>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80003b2:	4810      	ldr	r0, [pc, #64]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003b4:	f000 feb0 	bl	8001118 <HAL_I2C_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80003be:	f000 f9c3 	bl	8000748 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80003c2:	2100      	movs	r1, #0
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003c6:	f002 f8ad 	bl	8002524 <HAL_I2CEx_ConfigAnalogFilter>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80003d0:	f000 f9ba 	bl	8000748 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80003d4:	2100      	movs	r1, #0
 80003d6:	4807      	ldr	r0, [pc, #28]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003d8:	f002 f8ef 	bl	80025ba <HAL_I2CEx_ConfigDigitalFilter>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80003e2:	f000 f9b1 	bl	8000748 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	HAL_I2C_Slave_Transmit_IT(&hi2c1, dataBuffer, BUFFER_SIZE); // Start listening for requests
 80003e6:	2202      	movs	r2, #2
 80003e8:	4905      	ldr	r1, [pc, #20]	; (8000400 <MX_I2C1_Init+0x88>)
 80003ea:	4802      	ldr	r0, [pc, #8]	; (80003f4 <MX_I2C1_Init+0x7c>)
 80003ec:	f000 ff24 	bl	8001238 <HAL_I2C_Slave_Transmit_IT>
	/* USER CODE END I2C1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000030 	.word	0x20000030
 80003f8:	40005400 	.word	0x40005400
 80003fc:	00303d5b 	.word	0x00303d5b
 8000400:	20000000 	.word	0x20000000

08000404 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b31      	ldr	r3, [pc, #196]	; (80004e0 <MX_GPIO_Init+0xdc>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a30      	ldr	r2, [pc, #192]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a2a      	ldr	r2, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_GPIO_Init+0xdc>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0302 	and.w	r3, r3, #2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin | DISP_RES_Pin | DISP_SA0_Pin,
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 fe2e 	bl	80010b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045e:	4821      	ldr	r0, [pc, #132]	; (80004e4 <MX_GPIO_Init+0xe0>)
 8000460:	f000 fe28 	bl	80010b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin JOY_DOWN_Pin */
	GPIO_InitStruct.Pin = JOY_RIGHT_Pin | JOY_LEFT_Pin | JOY_DOWN_Pin;
 8000464:	23c4      	movs	r3, #196	; 0xc4
 8000466:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 fc81 	bl	8000d80 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_LEFT_DOWN_Pin BTN_LEFT_UP_Pin JOY_PRESS_Pin JOY_UP_Pin */
	GPIO_InitStruct.Pin = BTN_LEFT_DOWN_Pin | BTN_LEFT_UP_Pin | JOY_PRESS_Pin
 800047e:	f24c 0330 	movw	r3, #49200	; 0xc030
 8000482:	60fb      	str	r3, [r7, #12]
			| JOY_UP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	4619      	mov	r1, r3
 8000492:	4814      	ldr	r0, [pc, #80]	; (80004e4 <MX_GPIO_Init+0xe0>)
 8000494:	f000 fc74 	bl	8000d80 <HAL_GPIO_Init>

	/*Configure GPIO pins : DEBUG_LED_Pin DISP_RES_Pin DISP_SA0_Pin */
	GPIO_InitStruct.Pin = DEBUG_LED_Pin | DISP_RES_Pin | DISP_SA0_Pin;
 8000498:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800049c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fc64 	bl	8000d80 <HAL_GPIO_Init>

	/*Configure GPIO pin : INTERRUPT_LINE_Pin */
	GPIO_InitStruct.Pin = INTERRUPT_LINE_Pin;
 80004b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(INTERRUPT_LINE_GPIO_Port, &GPIO_InitStruct);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4619      	mov	r1, r3
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_GPIO_Init+0xe0>)
 80004d2:	f000 fc55 	bl	8000d80 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80004d6:	bf00      	nop
 80004d8:	3720      	adds	r7, #32
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000400 	.word	0x48000400

080004e8 <lcd_init>:
	for (uint8_t i = 0; i < length; i++) {
		lcd_send_data(string[i]);
	}
}

void lcd_init() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	// make sure that RES and SA0 pins are named correctly
	HAL_GPIO_WritePin(DISP_RES_GPIO_Port, DISP_RES_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f000 fddd 	bl	80010b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SA0_GPIO_Port, DISP_SA0_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 fdd6 	bl	80010b4 <HAL_GPIO_WritePin>
	// don't clear display, w're writing the whole thing anyway
	lcd_send_cmd(0x01); // clear display
	lcd_send_cmd(0x80); // set DDRAM address to 0x00
	lcd_send_cmd(0x0C); // display ON
#endif
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Transmit_IT(&hi2c1, dataBuffer, BUFFER_SIZE);
 8000514:	2202      	movs	r2, #2
 8000516:	4911      	ldr	r1, [pc, #68]	; (800055c <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000518:	4811      	ldr	r0, [pc, #68]	; (8000560 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 800051a:	f000 fe8d 	bl	8001238 <HAL_I2C_Slave_Transmit_IT>
	HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <HAL_I2C_SlaveTxCpltCallback+0x58>)
 8000526:	f000 fdc5 	bl	80010b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
	dataBuffer[0] = 0x00;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
	dataBuffer[1] = 0x00;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000536:	2200      	movs	r2, #0
 8000538:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Slave_Transmit_IT(&hi2c1, dataBuffer, BUFFER_SIZE); // Start
 800053a:	2202      	movs	r2, #2
 800053c:	4907      	ldr	r1, [pc, #28]	; (800055c <HAL_I2C_SlaveTxCpltCallback+0x50>)
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 8000540:	f000 fe7a 	bl	8001238 <HAL_I2C_Slave_Transmit_IT>

	xSemaphoreGiveFromISR(ECU_ACKHandle, &xHigherPriorityTaskWoken);
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_I2C_SlaveTxCpltCallback+0x5c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f107 020c 	add.w	r2, r7, #12
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fb0a 	bl	8003b68 <xQueueGiveFromISR>
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000000 	.word	0x20000000
 8000560:	20000030 	.word	0x20000030
 8000564:	48000400 	.word	0x48000400
 8000568:	2000008c 	.word	0x2000008c

0800056c <checkJoystick>:
		e.group = noGroup;
	}
	return e;
}
#endif
struct InputEvent checkJoystick() {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	struct InputEvent e;
	if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_RESET) {
 8000572:	2120      	movs	r1, #32
 8000574:	4837      	ldr	r0, [pc, #220]	; (8000654 <checkJoystick+0xe8>)
 8000576:	f000 fd85 	bl	8001084 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d10f      	bne.n	80005a0 <checkJoystick+0x34>
		while (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_RESET) {
 8000580:	e002      	b.n	8000588 <checkJoystick+0x1c>
			vTaskDelay(30);
 8000582:	201e      	movs	r0, #30
 8000584:	f003 ffe2 	bl	800454c <vTaskDelay>
		while (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_RESET) {
 8000588:	2120      	movs	r1, #32
 800058a:	4832      	ldr	r0, [pc, #200]	; (8000654 <checkJoystick+0xe8>)
 800058c:	f000 fd7a 	bl	8001084 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f5      	beq.n	8000582 <checkJoystick+0x16>
		}
		e.button = 0x01;
 8000596:	2301      	movs	r3, #1
 8000598:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 800059a:	2301      	movs	r3, #1
 800059c:	703b      	strb	r3, [r7, #0]
 800059e:	e04c      	b.n	800063a <checkJoystick+0xce>
	} else if (HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin)
 80005a0:	2104      	movs	r1, #4
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fd6d 	bl	8001084 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d110      	bne.n	80005d2 <checkJoystick+0x66>
			== GPIO_PIN_RESET) {
		while (HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin)
 80005b0:	e002      	b.n	80005b8 <checkJoystick+0x4c>
				== GPIO_PIN_RESET) {
			vTaskDelay(30);
 80005b2:	201e      	movs	r0, #30
 80005b4:	f003 ffca 	bl	800454c <vTaskDelay>
		while (HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin)
 80005b8:	2104      	movs	r1, #4
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f000 fd61 	bl	8001084 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f4      	beq.n	80005b2 <checkJoystick+0x46>
		}
		e.button = 0x02;
 80005c8:	2302      	movs	r3, #2
 80005ca:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 80005cc:	2301      	movs	r3, #1
 80005ce:	703b      	strb	r3, [r7, #0]
 80005d0:	e033      	b.n	800063a <checkJoystick+0xce>
	} else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fd54 	bl	8001084 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d110      	bne.n	8000604 <checkJoystick+0x98>
			== GPIO_PIN_RESET) {
		while (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)
 80005e2:	e002      	b.n	80005ea <checkJoystick+0x7e>
				== GPIO_PIN_RESET) {
			vTaskDelay(30);
 80005e4:	201e      	movs	r0, #30
 80005e6:	f003 ffb1 	bl	800454c <vTaskDelay>
		while (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f000 fd48 	bl	8001084 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f4      	beq.n	80005e4 <checkJoystick+0x78>
		}
		e.button = 0x03;
 80005fa:	2303      	movs	r3, #3
 80005fc:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 80005fe:	2301      	movs	r3, #1
 8000600:	703b      	strb	r3, [r7, #0]
 8000602:	e01a      	b.n	800063a <checkJoystick+0xce>
		 == GPIO_PIN_RESET) {
		 vTaskDelay(30);
		 }
		 e.button = 0x04;
		 e.group = JOY;*/
	} else if (HAL_GPIO_ReadPin(JOY_PRESS_GPIO_Port, JOY_PRESS_Pin)
 8000604:	2110      	movs	r1, #16
 8000606:	4813      	ldr	r0, [pc, #76]	; (8000654 <checkJoystick+0xe8>)
 8000608:	f000 fd3c 	bl	8001084 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10f      	bne.n	8000632 <checkJoystick+0xc6>
			== GPIO_PIN_RESET) {

		while (HAL_GPIO_ReadPin(JOY_PRESS_GPIO_Port, JOY_PRESS_Pin)
 8000612:	e002      	b.n	800061a <checkJoystick+0xae>
				== GPIO_PIN_RESET) {
			vTaskDelay(30);
 8000614:	201e      	movs	r0, #30
 8000616:	f003 ff99 	bl	800454c <vTaskDelay>
		while (HAL_GPIO_ReadPin(JOY_PRESS_GPIO_Port, JOY_PRESS_Pin)
 800061a:	2110      	movs	r1, #16
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <checkJoystick+0xe8>)
 800061e:	f000 fd31 	bl	8001084 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f5      	beq.n	8000614 <checkJoystick+0xa8>
		}
		e.button = 0x05;
 8000628:	2305      	movs	r3, #5
 800062a:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 800062c:	2301      	movs	r3, #1
 800062e:	703b      	strb	r3, [r7, #0]
 8000630:	e003      	b.n	800063a <checkJoystick+0xce>
	} else {
		e.button = 0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	707b      	strb	r3, [r7, #1]
		e.group = noGroup;
 8000636:	2300      	movs	r3, #0
 8000638:	703b      	strb	r3, [r7, #0]
	}
	return e;
 800063a:	883b      	ldrh	r3, [r7, #0]
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	2300      	movs	r3, #0
 8000640:	793a      	ldrb	r2, [r7, #4]
 8000642:	f362 0307 	bfi	r3, r2, #0, #8
 8000646:	797a      	ldrb	r2, [r7, #5]
 8000648:	f362 230f 	bfi	r3, r2, #8, #8
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	48000400 	.word	0x48000400

08000658 <StartWatchdog>:
 * @brief  Function implementing the Watchdog thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdog */
void StartWatchdog(void const *argument) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	lcd_init();
 8000660:	f7ff ff42 	bl	80004e8 <lcd_init>
	UBaseType_t queueLength = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]

	for (;;) {
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f000 fd38 	bl	80010e4 <HAL_GPIO_TogglePin>
		queueLength = uxQueueMessagesWaiting(ECUQueueHandle);
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <StartWatchdog+0x40>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fcef 	bl	800405c <uxQueueMessagesWaiting>
 800067e:	60f8      	str	r0, [r7, #12]
		if (queueLength > 0) {
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d003      	beq.n	800068e <StartWatchdog+0x36>
			osDelay(200);
 8000686:	20c8      	movs	r0, #200	; 0xc8
 8000688:	f002 ffba 	bl	8003600 <osDelay>
 800068c:	e7ec      	b.n	8000668 <StartWatchdog+0x10>
		} else {
			osDelay(1000);
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f002 ffb5 	bl	8003600 <osDelay>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000696:	e7e7      	b.n	8000668 <StartWatchdog+0x10>
 8000698:	20000088 	.word	0x20000088

0800069c <StartECUTask>:
 * @brief Function implementing the ECUTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartECUTask */
void StartECUTask(void const *argument) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartECUTask */
	struct InputEvent e;
	BaseType_t ecuACK;
	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(ECUQueueHandle, &(e), (TickType_t) 10) == pdPASS) {
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <StartECUTask+0x60>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f107 0108 	add.w	r1, r7, #8
 80006ac:	220a      	movs	r2, #10
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fae8 	bl	8003c84 <xQueueReceive>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d11c      	bne.n	80006f4 <StartECUTask+0x58>
			dataBuffer[0] = e.group;
 80006ba:	7a3a      	ldrb	r2, [r7, #8]
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <StartECUTask+0x64>)
 80006be:	701a      	strb	r2, [r3, #0]
			dataBuffer[1] = e.button;
 80006c0:	7a7a      	ldrb	r2, [r7, #9]
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <StartECUTask+0x64>)
 80006c4:	705a      	strb	r2, [r3, #1]

			HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <StartECUTask+0x68>)
 80006ce:	f000 fcf1 	bl	80010b4 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
			ecuACK = xSemaphoreTake(ECU_ACKHandle, 10000);
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <StartECUTask+0x6c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f242 7110 	movw	r1, #10000	; 0x2710
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fbb2 	bl	8003e44 <xQueueSemaphoreTake>
 80006e0:	60f8      	str	r0, [r7, #12]

			if (ecuACK == pdFALSE) {
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d105      	bne.n	80006f4 <StartECUTask+0x58>
				xQueueReset(ECUQueueHandle);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <StartECUTask+0x60>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 f87e 	bl	80037f0 <xQueueGenericReset>
			}
		}
		osDelay(200);
 80006f4:	20c8      	movs	r0, #200	; 0xc8
 80006f6:	f002 ff83 	bl	8003600 <osDelay>
		if (xQueueReceive(ECUQueueHandle, &(e), (TickType_t) 10) == pdPASS) {
 80006fa:	e7d3      	b.n	80006a4 <StartECUTask+0x8>
 80006fc:	20000088 	.word	0x20000088
 8000700:	20000000 	.word	0x20000000
 8000704:	48000400 	.word	0x48000400
 8000708:	2000008c 	.word	0x2000008c

0800070c <StartInputTask>:
 * @brief Function implementing the InputTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInputTask */
void StartInputTask(void const *argument) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartInputTask */
	struct InputEvent input;
	input.group = 0x00;
 8000714:	2300      	movs	r3, #0
 8000716:	733b      	strb	r3, [r7, #12]
	input.button = 0x00;
 8000718:	2300      	movs	r3, #0
 800071a:	737b      	strb	r3, [r7, #13]

	/* Infinite loop */
	for (;;) {

		input = checkJoystick();
 800071c:	f7ff ff26 	bl	800056c <checkJoystick>
 8000720:	4603      	mov	r3, r0
 8000722:	81bb      	strh	r3, [r7, #12]
		if (input.group != noGroup) {
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d007      	beq.n	800073a <StartInputTask+0x2e>
			xQueueSend(ECUQueueHandle, (void* ) &input, (TickType_t ) 0);
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <StartInputTask+0x38>)
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	f107 010c 	add.w	r1, r7, #12
 8000732:	2300      	movs	r3, #0
 8000734:	2200      	movs	r2, #0
 8000736:	f003 f919 	bl	800396c <xQueueGenericSend>
		}
		osDelay(200);
 800073a:	20c8      	movs	r0, #200	; 0xc8
 800073c:	f002 ff60 	bl	8003600 <osDelay>
		input = checkJoystick();
 8000740:	e7ec      	b.n	800071c <StartInputTask+0x10>
 8000742:	bf00      	nop
 8000744:	20000088 	.word	0x20000088

08000748 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_MspInit+0x4c>)
 800075c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6613      	str	r3, [r2, #96]	; 0x60
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_MspInit+0x4c>)
 8000768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_MspInit+0x4c>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_MspInit+0x4c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6593      	str	r3, [r2, #88]	; 0x58
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	210f      	movs	r1, #15
 800078e:	f06f 0001 	mvn.w	r0, #1
 8000792:	f000 fa4c 	bl	8000c2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09c      	sub	sp, #112	; 0x70
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	2244      	movs	r2, #68	; 0x44
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 f94b 	bl	8005a60 <memset>
  if(hi2c->Instance==I2C1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a35      	ldr	r2, [pc, #212]	; (80008a4 <HAL_I2C_MspInit+0x100>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d163      	bne.n	800089c <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007d8:	2300      	movs	r3, #0
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fcd7 	bl	8003194 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007ec:	f7ff ffac 	bl	8000748 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f4:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	4a26      	ldr	r2, [pc, #152]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000824:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f000 fa9e 	bl	8000d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000854:	2304      	movs	r3, #4
 8000856:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800085c:	4619      	mov	r1, r3
 800085e:	4813      	ldr	r0, [pc, #76]	; (80008ac <HAL_I2C_MspInit+0x108>)
 8000860:	f000 fa8e 	bl	8000d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 800086a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086e:	6593      	str	r3, [r2, #88]	; 0x58
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_I2C_MspInit+0x104>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2105      	movs	r1, #5
 8000880:	201f      	movs	r0, #31
 8000882:	f000 f9d4 	bl	8000c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000886:	201f      	movs	r0, #31
 8000888:	f000 f9eb 	bl	8000c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2105      	movs	r1, #5
 8000890:	2020      	movs	r0, #32
 8000892:	f000 f9cc 	bl	8000c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000896:	2020      	movs	r0, #32
 8000898:	f000 f9e3 	bl	8000c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	; 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40005400 	.word	0x40005400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 f8ac 	bl	8000a3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008e4:	f004 fa2c 	bl	8004d40 <xTaskGetSchedulerState>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d001      	beq.n	80008f2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008ee:	f004 fe0b 	bl	8005508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <I2C1_EV_IRQHandler+0x10>)
 80008fe:	f000 fceb 	bl	80012d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000030 	.word	0x20000030

0800090c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <I2C1_ER_IRQHandler+0x10>)
 8000912:	f000 fcfb 	bl	800130c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000030 	.word	0x20000030

08000920 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000946:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094a:	490e      	ldr	r1, [pc, #56]	; (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <LoopForever+0xe>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000960:	4c0b      	ldr	r4, [pc, #44]	; (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096e:	f7ff ffd7 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f005 f843 	bl	80059fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000976:	f7ff fc53 	bl	8000220 <main>

0800097a <LoopForever>:

LoopForever:
    b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   r0, =_estack
 800097c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000988:	08005b0c 	.word	0x08005b0c
  ldr r2, =_sbss
 800098c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000990:	20000de8 	.word	0x20000de8

08000994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_2_IRQHandler>

08000996 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f939 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a6:	200f      	movs	r0, #15
 80009a8:	f000 f80e 	bl	80009c8 <HAL_InitTick>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	e001      	b.n	80009bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b8:	f7ff fecc 	bl	8000754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009bc:	79fb      	ldrb	r3, [r7, #7]

}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_InitTick+0x68>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d022      	beq.n	8000a22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_InitTick+0x6c>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_InitTick+0x68>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80009ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f944 	bl	8000c7e <HAL_SYSTICK_Config>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10f      	bne.n	8000a1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	d809      	bhi.n	8000a16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a02:	2200      	movs	r2, #0
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0a:	f000 f910 	bl	8000c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_InitTick+0x70>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e007      	b.n	8000a26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
 8000a1a:	e004      	b.n	8000a26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	e001      	b.n	8000a26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000000c 	.word	0x2000000c
 8000a34:	20000004 	.word	0x20000004
 8000a38:	20000008 	.word	0x20000008

08000a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x1c>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x20>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <HAL_IncTick+0x1c>)
 8000a4c:	6013      	str	r3, [r2, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	20000090 	.word	0x20000090
 8000a5c:	2000000c 	.word	0x2000000c

08000a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000090 	.word	0x20000090

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff29 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff40 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff90 	bl	8000b6c <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5f 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff33 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa4 	bl	8000bd4 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b084      	sub	sp, #16
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d00d      	beq.n	8000cca <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e047      	b.n	8000d5a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 020e 	bic.w	r2, r2, #14
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f003 021f 	and.w	r2, r3, #31
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d00c      	beq.n	8000d3a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	4798      	blx	r3
    }
  }
  return status;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d72:	b2db      	uxtb	r3, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d8e:	e15a      	b.n	8001046 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 814c 	beq.w	8001040 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d005      	beq.n	8000dc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	f003 0201 	and.w	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d017      	beq.n	8000e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d123      	bne.n	8000eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	6939      	ldr	r1, [r7, #16]
 8000eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0203 	and.w	r2, r3, #3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 80a6 	beq.w	8001040 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef4:	4b5b      	ldr	r3, [pc, #364]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	4a5a      	ldr	r2, [pc, #360]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6613      	str	r3, [r2, #96]	; 0x60
 8000f00:	4b58      	ldr	r3, [pc, #352]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0c:	4a56      	ldr	r2, [pc, #344]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f36:	d01f      	beq.n	8000f78 <HAL_GPIO_Init+0x1f8>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_GPIO_Init+0x2ec>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d019      	beq.n	8000f74 <HAL_GPIO_Init+0x1f4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d013      	beq.n	8000f70 <HAL_GPIO_Init+0x1f0>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00d      	beq.n	8000f6c <HAL_GPIO_Init+0x1ec>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_GPIO_Init+0x2f8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0x1e8>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d101      	bne.n	8000f64 <HAL_GPIO_Init+0x1e4>
 8000f60:	2305      	movs	r3, #5
 8000f62:	e00a      	b.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f64:	2306      	movs	r3, #6
 8000f66:	e008      	b.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e004      	b.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	f002 0203 	and.w	r2, r2, #3
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	4093      	lsls	r3, r2
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8a:	4937      	ldr	r1, [pc, #220]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f98:	4b39      	ldr	r3, [pc, #228]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fbc:	4a30      	ldr	r2, [pc, #192]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe6:	4a26      	ldr	r2, [pc, #152]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <HAL_GPIO_Init+0x300>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_GPIO_Init+0x300>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800103a:	4a11      	ldr	r2, [pc, #68]	; (8001080 <HAL_GPIO_Init+0x300>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	f47f ae9d 	bne.w	8000d90 <HAL_GPIO_Init+0x10>
  }
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800
 8001074:	48000c00 	.word	0x48000c00
 8001078:	48001000 	.word	0x48001000
 800107c:	48001400 	.word	0x48001400
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e001      	b.n	80010a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43d9      	mvns	r1, r3
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	400b      	ands	r3, r1
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e081      	b.n	800122e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d106      	bne.n	8001144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fb30 	bl	80007a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2224      	movs	r2, #36	; 0x24
 8001148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001168:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001178:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e006      	b.n	80011a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800119e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d104      	bne.n	80011b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69d9      	ldr	r1, [r3, #28]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2220      	movs	r2, #32
 800121a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	d139      	bne.n	80012c6 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_I2C_Slave_Transmit_IT+0x28>
 800125c:	2302      	movs	r3, #2
 800125e:	e033      	b.n	80012c8 <HAL_I2C_Slave_Transmit_IT+0x90>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2221      	movs	r2, #33	; 0x21
 800126c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2220      	movs	r2, #32
 8001274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	88fa      	ldrh	r2, [r7, #6]
 8001298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_I2C_Slave_Transmit_IT+0x98>)
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_I2C_Slave_Transmit_IT+0x9c>)
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80012b8:	f248 0101 	movw	r1, #32769	; 0x8001
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f001 f86f 	bl	80023a0 <I2C_Enable_IRQ>

    return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 80012c6:	2302      	movs	r3, #2
  }
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	ffff0000 	.word	0xffff0000
 80012d4:	0800148b 	.word	0x0800148b

080012d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	4798      	blx	r3
  }
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d010      	beq.n	8001352 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	09db      	lsrs	r3, r3, #7
 8001334:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00a      	beq.n	8001352 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001350:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	0a9b      	lsrs	r3, r3, #10
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d010      	beq.n	8001380 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	09db      	lsrs	r3, r3, #7
 8001362:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f043 0208 	orr.w	r2, r3, #8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	0a5b      	lsrs	r3, r3, #9
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d010      	beq.n	80013ae <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	09db      	lsrs	r3, r3, #7
 8001390:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00a      	beq.n	80013ae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f043 0202 	orr.w	r2, r3, #2
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 030b 	and.w	r3, r3, #11
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80013be:	68f9      	ldr	r1, [r7, #12]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fe81 	bl	80020c8 <I2C_ITError>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	70fb      	strb	r3, [r7, #3]
 8001416:	4613      	mov	r3, r2
 8001418:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <I2C_Slave_ISR_IT+0x24>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e0ec      	b.n	8001688 <I2C_Slave_ISR_IT+0x1fe>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	095b      	lsrs	r3, r3, #5
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d009      	beq.n	80014d6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	095b      	lsrs	r3, r3, #5
 80014c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80014ce:	6939      	ldr	r1, [r7, #16]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fc99 	bl	8001e08 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d04d      	beq.n	800157e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d047      	beq.n	800157e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d128      	bne.n	800154a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b28      	cmp	r3, #40	; 0x28
 8001502:	d108      	bne.n	8001516 <I2C_Slave_ISR_IT+0x8c>
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800150a:	d104      	bne.n	8001516 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800150c:	6939      	ldr	r1, [r7, #16]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 fd84 	bl	800201c <I2C_ITListenCplt>
 8001514:	e032      	b.n	800157c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b29      	cmp	r3, #41	; 0x29
 8001520:	d10e      	bne.n	8001540 <I2C_Slave_ISR_IT+0xb6>
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001528:	d00a      	beq.n	8001540 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2210      	movs	r2, #16
 8001530:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 febf 	bl	80022b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 fb3d 	bl	8001bb8 <I2C_ITSlaveSeqCplt>
 800153e:	e01d      	b.n	800157c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2210      	movs	r2, #16
 8001546:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001548:	e096      	b.n	8001678 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2210      	movs	r2, #16
 8001550:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f043 0204 	orr.w	r2, r3, #4
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <I2C_Slave_ISR_IT+0xe4>
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156a:	f040 8085 	bne.w	8001678 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 fda7 	bl	80020c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800157a:	e07d      	b.n	8001678 <I2C_Slave_ISR_IT+0x1ee>
 800157c:	e07c      	b.n	8001678 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d030      	beq.n	80015ec <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001592:	2b00      	cmp	r3, #0
 8001594:	d02a      	beq.n	80015ec <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d018      	beq.n	80015d2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015bc:	3b01      	subs	r3, #1
 80015be:	b29a      	uxth	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d14f      	bne.n	800167c <I2C_Slave_ISR_IT+0x1f2>
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015e2:	d04b      	beq.n	800167c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 fae7 	bl	8001bb8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80015ea:	e047      	b.n	800167c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00a      	beq.n	800160e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 fa15 	bl	8001a36 <I2C_ITAddrCplt>
 800160c:	e037      	b.n	800167e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d031      	beq.n	800167e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001622:	2b00      	cmp	r3, #0
 8001624:	d02b      	beq.n	800167e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162a:	b29b      	uxth	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d018      	beq.n	8001662 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164a:	b29b      	uxth	r3, r3
 800164c:	3b01      	subs	r3, #1
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	3b01      	subs	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	851a      	strh	r2, [r3, #40]	; 0x28
 8001660:	e00d      	b.n	800167e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d002      	beq.n	8001670 <I2C_Slave_ISR_IT+0x1e6>
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d106      	bne.n	800167e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 faa1 	bl	8001bb8 <I2C_ITSlaveSeqCplt>
 8001676:	e002      	b.n	800167e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001678:	bf00      	nop
 800167a:	e000      	b.n	800167e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800167c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af02      	add	r7, sp, #8
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <I2C_Master_ISR_DMA+0x1a>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e0e1      	b.n	800186e <I2C_Master_ISR_DMA+0x1de>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d017      	beq.n	80016ee <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d011      	beq.n	80016ee <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2210      	movs	r2, #16
 80016d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f043 0204 	orr.w	r2, r3, #4
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80016de:	2120      	movs	r1, #32
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 fe5d 	bl	80023a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fde5 	bl	80022b6 <I2C_Flush_TXDR>
 80016ec:	e0ba      	b.n	8001864 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	09db      	lsrs	r3, r3, #7
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d072      	beq.n	80017e0 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	099b      	lsrs	r3, r3, #6
 80016fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001702:	2b00      	cmp	r3, #0
 8001704:	d06c      	beq.n	80017e0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001714:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d04e      	beq.n	80017be <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	b29b      	uxth	r3, r3
 8001728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800172c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	2bff      	cmp	r3, #255	; 0xff
 8001736:	d906      	bls.n	8001746 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	22ff      	movs	r2, #255	; 0xff
 800173c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800173e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e010      	b.n	8001768 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001758:	d003      	beq.n	8001762 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e002      	b.n	8001768 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001766:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176c:	b2da      	uxtb	r2, r3
 800176e:	8a79      	ldrh	r1, [r7, #18]
 8001770:	2300      	movs	r3, #0
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fde0 	bl	800233c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b22      	cmp	r3, #34	; 0x22
 8001798:	d108      	bne.n	80017ac <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017aa:	e05b      	b.n	8001864 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ba:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017bc:	e052      	b.n	8001864 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017cc:	d003      	beq.n	80017d6 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f9b5 	bl	8001b3e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80017d4:	e046      	b.n	8001864 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80017d6:	2140      	movs	r1, #64	; 0x40
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 fc75 	bl	80020c8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80017de:	e041      	b.n	8001864 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	099b      	lsrs	r3, r3, #6
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d029      	beq.n	8001840 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d023      	beq.n	8001840 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d119      	bne.n	8001836 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001810:	d027      	beq.n	8001862 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800181a:	d108      	bne.n	800182e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800182a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800182c:	e019      	b.n	8001862 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f985 	bl	8001b3e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001834:	e015      	b.n	8001862 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fc45 	bl	80020c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800183e:	e010      	b.n	8001862 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00b      	beq.n	8001864 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fa0a 	bl	8001c74 <I2C_ITMasterCplt>
 8001860:	e000      	b.n	8001864 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001862:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b088      	sub	sp, #32
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <I2C_Slave_ISR_DMA+0x24>
 8001896:	2302      	movs	r3, #2
 8001898:	e0c9      	b.n	8001a2e <I2C_Slave_ISR_DMA+0x1b8>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 faa3 	bl	8001e08 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 809a 	beq.w	8001a04 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8093 	beq.w	8001a04 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0b9b      	lsrs	r3, r3, #14
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d105      	bne.n	80018f6 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0bdb      	lsrs	r3, r3, #15
 80018ee:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d07f      	beq.n	80019f6 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00d      	beq.n	800191a <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0bdb      	lsrs	r3, r3, #15
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001916:	2301      	movs	r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00d      	beq.n	800193e <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	0b9b      	lsrs	r3, r3, #14
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800193a:	2301      	movs	r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d128      	bne.n	8001996 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b28      	cmp	r3, #40	; 0x28
 800194e:	d108      	bne.n	8001962 <I2C_Slave_ISR_DMA+0xec>
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001956:	d104      	bne.n	8001962 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fb5e 	bl	800201c <I2C_ITListenCplt>
 8001960:	e048      	b.n	80019f4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b29      	cmp	r3, #41	; 0x29
 800196c:	d10e      	bne.n	800198c <I2C_Slave_ISR_DMA+0x116>
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001974:	d00a      	beq.n	800198c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2210      	movs	r2, #16
 800197c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fc99 	bl	80022b6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f917 	bl	8001bb8 <I2C_ITSlaveSeqCplt>
 800198a:	e033      	b.n	80019f4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2210      	movs	r2, #16
 8001992:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001994:	e034      	b.n	8001a00 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2210      	movs	r2, #16
 800199c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f043 0204 	orr.w	r2, r3, #4
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <I2C_Slave_ISR_DMA+0x14a>
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019be:	d11f      	bne.n	8001a00 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b21      	cmp	r3, #33	; 0x21
 80019c4:	d002      	beq.n	80019cc <I2C_Slave_ISR_DMA+0x156>
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	2b29      	cmp	r3, #41	; 0x29
 80019ca:	d103      	bne.n	80019d4 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2221      	movs	r2, #33	; 0x21
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
 80019d2:	e008      	b.n	80019e6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b22      	cmp	r3, #34	; 0x22
 80019d8:	d002      	beq.n	80019e0 <I2C_Slave_ISR_DMA+0x16a>
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	2b2a      	cmp	r3, #42	; 0x2a
 80019de:	d102      	bne.n	80019e6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2222      	movs	r2, #34	; 0x22
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4619      	mov	r1, r3
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fb6b 	bl	80020c8 <I2C_ITError>
      if (treatdmanack == 1U)
 80019f2:	e005      	b.n	8001a00 <I2C_Slave_ISR_DMA+0x18a>
 80019f4:	e004      	b.n	8001a00 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2210      	movs	r2, #16
 80019fc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80019fe:	e011      	b.n	8001a24 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001a00:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001a02:	e00f      	b.n	8001a24 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	08db      	lsrs	r3, r3, #3
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d009      	beq.n	8001a24 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	08db      	lsrs	r3, r3, #3
 8001a14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f809 	bl	8001a36 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001a4c:	2b28      	cmp	r3, #40	; 0x28
 8001a4e:	d16a      	bne.n	8001b26 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a6e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a7c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a8a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d138      	bne.n	8001b06 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a94:	897b      	ldrh	r3, [r7, #10]
 8001a96:	09db      	lsrs	r3, r3, #7
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	89bb      	ldrh	r3, [r7, #12]
 8001a9c:	4053      	eors	r3, r2
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f003 0306 	and.w	r3, r3, #6
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11c      	bne.n	8001ae2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001aa8:	897b      	ldrh	r3, [r7, #10]
 8001aaa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d13b      	bne.n	8001b36 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ad4:	89ba      	ldrh	r2, [r7, #12]
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fc95 	bl	800140a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ae0:	e029      	b.n	8001b36 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ae2:	893b      	ldrh	r3, [r7, #8]
 8001ae4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fcbc 	bl	8002468 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001af8:	89ba      	ldrh	r2, [r7, #12]
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fc83 	bl	800140a <HAL_I2C_AddrCallback>
}
 8001b04:	e017      	b.n	8001b36 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fcac 	bl	8002468 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b18:	89ba      	ldrh	r2, [r7, #12]
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fc73 	bl	800140a <HAL_I2C_AddrCallback>
}
 8001b24:	e007      	b.n	8001b36 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b21      	cmp	r3, #33	; 0x21
 8001b58:	d115      	bne.n	8001b86 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2211      	movs	r2, #17
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b6e:	2101      	movs	r1, #1
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fc79 	bl	8002468 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fc25 	bl	80013ce <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001b84:	e014      	b.n	8001bb0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2212      	movs	r2, #18
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fc63 	bl	8002468 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fc19 	bl	80013e2 <HAL_I2C_MasterRxCpltCallback>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0b9b      	lsrs	r3, r3, #14
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e00d      	b.n	8001c0a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	0bdb      	lsrs	r3, r3, #15
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c08:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b29      	cmp	r3, #41	; 0x29
 8001c14:	d112      	bne.n	8001c3c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2228      	movs	r2, #40	; 0x28
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2221      	movs	r2, #33	; 0x21
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c24:	2101      	movs	r1, #1
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fc1e 	bl	8002468 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7fe fc69 	bl	800050c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001c3a:	e017      	b.n	8001c6c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b2a      	cmp	r3, #42	; 0x2a
 8001c46:	d111      	bne.n	8001c6c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2228      	movs	r2, #40	; 0x28
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2222      	movs	r2, #34	; 0x22
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c56:	2102      	movs	r1, #2
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fc05 	bl	8002468 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fbc5 	bl	80013f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2220      	movs	r2, #32
 8001c88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b21      	cmp	r3, #33	; 0x21
 8001c94:	d107      	bne.n	8001ca6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c96:	2101      	movs	r1, #1
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fbe5 	bl	8002468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2211      	movs	r2, #17
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca4:	e00c      	b.n	8001cc0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b22      	cmp	r3, #34	; 0x22
 8001cb0:	d106      	bne.n	8001cc0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fbd7 	bl	8002468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2212      	movs	r2, #18
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <I2C_ITMasterCplt+0x18c>)
 8001ccc:	400b      	ands	r3, r1
 8001cce:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4a      	ldr	r2, [pc, #296]	; (8001e04 <I2C_ITMasterCplt+0x190>)
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2210      	movs	r2, #16
 8001cee:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f043 0204 	orr.w	r2, r3, #4
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b60      	cmp	r3, #96	; 0x60
 8001d06:	d10b      	bne.n	8001d20 <I2C_ITMasterCplt+0xac>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fac8 	bl	80022b6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b60      	cmp	r3, #96	; 0x60
 8001d36:	d002      	beq.n	8001d3e <I2C_ITMasterCplt+0xca>
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f9bf 	bl	80020c8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d4a:	e054      	b.n	8001df6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b21      	cmp	r3, #33	; 0x21
 8001d56:	d124      	bne.n	8001da2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d10b      	bne.n	8001d8a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fb59 	bl	800143a <HAL_I2C_MemTxCpltCallback>
}
 8001d88:	e035      	b.n	8001df6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fb17 	bl	80013ce <HAL_I2C_MasterTxCpltCallback>
}
 8001da0:	e029      	b.n	8001df6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b22      	cmp	r3, #34	; 0x22
 8001dac:	d123      	bne.n	8001df6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d10b      	bne.n	8001de0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fb38 	bl	800144e <HAL_I2C_MemRxCpltCallback>
}
 8001dde:	e00a      	b.n	8001df6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff faf6 	bl	80013e2 <HAL_I2C_MasterRxCpltCallback>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	fe00e800 	.word	0xfe00e800
 8001e04:	ffff0000 	.word	0xffff0000

08001e08 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e24:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b21      	cmp	r3, #33	; 0x21
 8001e32:	d002      	beq.n	8001e3a <I2C_ITSlaveCplt+0x32>
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	2b29      	cmp	r3, #41	; 0x29
 8001e38:	d108      	bne.n	8001e4c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001e3a:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fb12 	bl	8002468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2221      	movs	r2, #33	; 0x21
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
 8001e4a:	e00d      	b.n	8001e68 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b22      	cmp	r3, #34	; 0x22
 8001e50:	d002      	beq.n	8001e58 <I2C_ITSlaveCplt+0x50>
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	2b2a      	cmp	r3, #42	; 0x2a
 8001e56:	d107      	bne.n	8001e68 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001e58:	f248 0102 	movw	r1, #32770	; 0x8002
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fb03 	bl	8002468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2222      	movs	r2, #34	; 0x22
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e76:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6859      	ldr	r1, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b64      	ldr	r3, [pc, #400]	; (8002014 <I2C_ITSlaveCplt+0x20c>)
 8001e84:	400b      	ands	r3, r1
 8001e86:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fa14 	bl	80022b6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	0b9b      	lsrs	r3, r3, #14
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d013      	beq.n	8001ec2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ea8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d020      	beq.n	8001ef4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ec0:	e018      	b.n	8001ef4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	0bdb      	lsrs	r3, r3, #15
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d012      	beq.n	8001ef4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001edc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4619      	mov	r1, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8a7 	bl	80020c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b28      	cmp	r3, #40	; 0x28
 8001f84:	d141      	bne.n	800200a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f86:	6979      	ldr	r1, [r7, #20]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f847 	bl	800201c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f8e:	e03c      	b.n	800200a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f98:	d014      	beq.n	8001fc4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff fe0c 	bl	8001bb8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <I2C_ITSlaveCplt+0x210>)
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fa32 	bl	8001426 <HAL_I2C_ListenCpltCallback>
}
 8001fc2:	e022      	b.n	800200a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b22      	cmp	r3, #34	; 0x22
 8001fce:	d10e      	bne.n	8001fee <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fa05 	bl	80013f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001fec:	e00d      	b.n	800200a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7fe fa81 	bl	800050c <HAL_I2C_SlaveTxCpltCallback>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	fe00e800 	.word	0xfe00e800
 8002018:	ffff0000 	.word	0xffff0000

0800201c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <I2C_ITListenCplt+0xa8>)
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d022      	beq.n	800209a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d012      	beq.n	800209a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f043 0204 	orr.w	r2, r3, #4
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800209a:	f248 0103 	movw	r1, #32771	; 0x8003
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9e2 	bl	8002468 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2210      	movs	r2, #16
 80020aa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff f9b6 	bl	8001426 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	ffff0000 	.word	0xffff0000

080020c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a5d      	ldr	r2, [pc, #372]	; (800225c <I2C_ITError+0x194>)
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2b28      	cmp	r3, #40	; 0x28
 80020fe:	d005      	beq.n	800210c <I2C_ITError+0x44>
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b29      	cmp	r3, #41	; 0x29
 8002104:	d002      	beq.n	800210c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	2b2a      	cmp	r3, #42	; 0x2a
 800210a:	d10b      	bne.n	8002124 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800210c:	2103      	movs	r1, #3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f9aa 	bl	8002468 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2228      	movs	r2, #40	; 0x28
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a50      	ldr	r2, [pc, #320]	; (8002260 <I2C_ITError+0x198>)
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
 8002122:	e011      	b.n	8002148 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002124:	f248 0103 	movw	r1, #32771	; 0x8003
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f99d 	bl	8002468 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b60      	cmp	r3, #96	; 0x60
 8002138:	d003      	beq.n	8002142 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	2b00      	cmp	r3, #0
 8002154:	d039      	beq.n	80021ca <I2C_ITError+0x102>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b11      	cmp	r3, #17
 800215a:	d002      	beq.n	8002162 <I2C_ITError+0x9a>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b21      	cmp	r3, #33	; 0x21
 8002160:	d133      	bne.n	80021ca <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002170:	d107      	bne.n	8002182 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002180:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fdec 	bl	8000d64 <HAL_DMA_GetState>
 800218c:	4603      	mov	r3, r0
 800218e:	2b01      	cmp	r3, #1
 8002190:	d017      	beq.n	80021c2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	4a33      	ldr	r2, [pc, #204]	; (8002264 <I2C_ITError+0x19c>)
 8002198:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fd75 	bl	8000c96 <HAL_DMA_Abort_IT>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04d      	beq.n	800224e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021bc:	4610      	mov	r0, r2
 80021be:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021c0:	e045      	b.n	800224e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f850 	bl	8002268 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021c8:	e041      	b.n	800224e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d039      	beq.n	8002246 <I2C_ITError+0x17e>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b12      	cmp	r3, #18
 80021d6:	d002      	beq.n	80021de <I2C_ITError+0x116>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b22      	cmp	r3, #34	; 0x22
 80021dc:	d133      	bne.n	8002246 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ec:	d107      	bne.n	80021fe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fdae 	bl	8000d64 <HAL_DMA_GetState>
 8002208:	4603      	mov	r3, r0
 800220a:	2b01      	cmp	r3, #1
 800220c:	d017      	beq.n	800223e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <I2C_ITError+0x19c>)
 8002214:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fd37 	bl	8000c96 <HAL_DMA_Abort_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d011      	beq.n	8002252 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002238:	4610      	mov	r0, r2
 800223a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800223c:	e009      	b.n	8002252 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f812 	bl	8002268 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002244:	e005      	b.n	8002252 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f80e 	bl	8002268 <I2C_TreatErrorCallback>
  }
}
 800224c:	e002      	b.n	8002254 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800224e:	bf00      	nop
 8002250:	e000      	b.n	8002254 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002252:	bf00      	nop
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	ffff0000 	.word	0xffff0000
 8002260:	0800148b 	.word	0x0800148b
 8002264:	080022ff 	.word	0x080022ff

08002268 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b60      	cmp	r3, #96	; 0x60
 800227a:	d10e      	bne.n	800229a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff f8ef 	bl	8001476 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002298:	e009      	b.n	80022ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff f8da 	bl	8001462 <HAL_I2C_ErrorCallback>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d103      	bne.n	80022d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2200      	movs	r2, #0
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d007      	beq.n	80022f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	619a      	str	r2, [r3, #24]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	2200      	movs	r2, #0
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	2200      	movs	r2, #0
 800232a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff ff9b 	bl	8002268 <I2C_TreatErrorCallback>
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	817b      	strh	r3, [r7, #10]
 800234a:	4613      	mov	r3, r2
 800234c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002354:	7a7b      	ldrb	r3, [r7, #9]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800235c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	4313      	orrs	r3, r2
 8002366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800236a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	0d5b      	lsrs	r3, r3, #21
 8002376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <I2C_TransferConfig+0x60>)
 800237c:	430b      	orrs	r3, r1
 800237e:	43db      	mvns	r3, r3
 8002380:	ea02 0103 	and.w	r1, r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	03ff63ff 	.word	0x03ff63ff

080023a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b4:	4a2a      	ldr	r2, [pc, #168]	; (8002460 <I2C_Enable_IRQ+0xc0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80023be:	4a29      	ldr	r2, [pc, #164]	; (8002464 <I2C_Enable_IRQ+0xc4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d11d      	bne.n	8002400 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80023c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	da03      	bge.n	80023d4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80023d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d103      	bne.n	80023e2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80023e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d103      	bne.n	80023f0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d125      	bne.n	8002442 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023fc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80023fe:	e020      	b.n	8002442 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002400:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002404:	2b00      	cmp	r3, #0
 8002406:	da03      	bge.n	8002410 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800240e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002420:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002432:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	2b20      	cmp	r3, #32
 8002438:	d103      	bne.n	8002442 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	08001691 	.word	0x08001691
 8002464:	08001877 	.word	0x08001877

08002468 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00f      	beq.n	80024a2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002488:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002496:	2b28      	cmp	r3, #40	; 0x28
 8002498:	d003      	beq.n	80024a2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80024a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00f      	beq.n	80024cc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80024b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024c0:	2b28      	cmp	r3, #40	; 0x28
 80024c2:	d003      	beq.n	80024cc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80024ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80024cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da03      	bge.n	80024dc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80024da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80024dc:	887b      	ldrh	r3, [r7, #2]
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d103      	bne.n	80024ea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d103      	bne.n	80024f8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f043 0320 	orr.w	r3, r3, #32
 80024f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d103      	bne.n	8002506 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002504:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43da      	mvns	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	400a      	ands	r2, r1
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	d138      	bne.n	80025ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002544:	2302      	movs	r3, #2
 8002546:	e032      	b.n	80025ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	; 0x24
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d139      	bne.n	8002644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025da:	2302      	movs	r3, #2
 80025dc:	e033      	b.n	8002646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2224      	movs	r2, #36	; 0x24
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800260c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d141      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002662:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800266a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266e:	d131      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002670:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002676:	4a46      	ldr	r2, [pc, #280]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800267c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002688:	4a41      	ldr	r2, [pc, #260]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002690:	4b40      	ldr	r3, [pc, #256]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2232      	movs	r2, #50	; 0x32
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	4a3f      	ldr	r2, [pc, #252]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9b      	lsrs	r3, r3, #18
 80026a2:	3301      	adds	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a6:	e002      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ae:	4b38      	ldr	r3, [pc, #224]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d102      	bne.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f2      	bne.n	80026a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026c2:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d158      	bne.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e057      	b.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d4:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026da:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026e4:	e04d      	b.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ec:	d141      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fa:	d131      	bne.n	8002760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002702:	4a23      	ldr	r2, [pc, #140]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002714:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2232      	movs	r2, #50	; 0x32
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	0c9b      	lsrs	r3, r3, #18
 800272e:	3301      	adds	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002732:	e002      	b.n	800273a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3b01      	subs	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002746:	d102      	bne.n	800274e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f2      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	d112      	bne.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e011      	b.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002770:	e007      	b.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002780:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40007000 	.word	0x40007000
 8002794:	20000004 	.word	0x20000004
 8002798:	431bde83 	.word	0x431bde83

0800279c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e306      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d075      	beq.n	80028a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ba:	4b97      	ldr	r3, [pc, #604]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c4:	4b94      	ldr	r3, [pc, #592]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d102      	bne.n	80027da <HAL_RCC_OscConfig+0x3e>
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d002      	beq.n	80027e0 <HAL_RCC_OscConfig+0x44>
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d10b      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	4b8d      	ldr	r3, [pc, #564]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d05b      	beq.n	80028a4 <HAL_RCC_OscConfig+0x108>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d157      	bne.n	80028a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e2e1      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d106      	bne.n	8002810 <HAL_RCC_OscConfig+0x74>
 8002802:	4b85      	ldr	r3, [pc, #532]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a84      	ldr	r2, [pc, #528]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e01d      	b.n	800284c <HAL_RCC_OscConfig+0xb0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x98>
 800281a:	4b7f      	ldr	r3, [pc, #508]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7e      	ldr	r2, [pc, #504]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b7c      	ldr	r3, [pc, #496]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7b      	ldr	r2, [pc, #492]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0xb0>
 8002834:	4b78      	ldr	r3, [pc, #480]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a77      	ldr	r2, [pc, #476]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b75      	ldr	r3, [pc, #468]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a74      	ldr	r2, [pc, #464]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe f904 	bl	8000a60 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7fe f900 	bl	8000a60 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e2a6      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286e:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0xc0>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe f8f0 	bl	8000a60 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe f8ec 	bl	8000a60 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e292      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002896:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0xe8>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d075      	beq.n	800299e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b2:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028bc:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d102      	bne.n	80028d2 <HAL_RCC_OscConfig+0x136>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_OscConfig+0x13c>
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d11f      	bne.n	8002918 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d8:	4b4f      	ldr	r3, [pc, #316]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x154>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e265      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	4946      	ldr	r1, [pc, #280]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002904:	4b45      	ldr	r3, [pc, #276]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe f85d 	bl	80009c8 <HAL_InitTick>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d043      	beq.n	800299c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e251      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d023      	beq.n	8002968 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe f898 	bl	8000a60 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7fe f894 	bl	8000a60 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e23a      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002946:	4b34      	ldr	r3, [pc, #208]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	492d      	ldr	r1, [pc, #180]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
 8002966:	e01a      	b.n	800299e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 800296e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe f874 	bl	8000a60 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe f870 	bl	8000a60 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e216      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1e0>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d041      	beq.n	8002a2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01c      	beq.n	80029ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b2:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe f84d 	bl	8000a60 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe f849 	bl	8000a60 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1ef      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0ef      	beq.n	80029ca <HAL_RCC_OscConfig+0x22e>
 80029ea:	e020      	b.n	8002a2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe f830 	bl	8000a60 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a02:	e00d      	b.n	8002a20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fe f82c 	bl	8000a60 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d906      	bls.n	8002a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1d2      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a20:	4b8c      	ldr	r3, [pc, #560]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ea      	bne.n	8002a04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80a6 	beq.w	8002b88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a40:	4b84      	ldr	r3, [pc, #528]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2b4>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x2b6>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4b7f      	ldr	r3, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	4a7e      	ldr	r2, [pc, #504]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
 8002a62:	4b7c      	ldr	r3, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a72:	4b79      	ldr	r3, [pc, #484]	; (8002c58 <HAL_RCC_OscConfig+0x4bc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a7e:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x4bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a75      	ldr	r2, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x4bc>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7fd ffe9 	bl	8000a60 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fd ffe5 	bl	8000a60 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e18b      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa4:	4b6c      	ldr	r3, [pc, #432]	; (8002c58 <HAL_RCC_OscConfig+0x4bc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d108      	bne.n	8002aca <HAL_RCC_OscConfig+0x32e>
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	4a65      	ldr	r2, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac8:	e024      	b.n	8002b14 <HAL_RCC_OscConfig+0x378>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d110      	bne.n	8002af4 <HAL_RCC_OscConfig+0x358>
 8002ad2:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	4a5e      	ldr	r2, [pc, #376]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	4a5a      	ldr	r2, [pc, #360]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af2:	e00f      	b.n	8002b14 <HAL_RCC_OscConfig+0x378>
 8002af4:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d016      	beq.n	8002b4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fd ffa0 	bl	8000a60 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fd ff9c 	bl	8000a60 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e140      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3a:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ed      	beq.n	8002b24 <HAL_RCC_OscConfig+0x388>
 8002b48:	e015      	b.n	8002b76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fd ff89 	bl	8000a60 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fd ff85 	bl	8000a60 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e129      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b68:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ed      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b76:	7ffb      	ldrb	r3, [r7, #31]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	4a34      	ldr	r2, [pc, #208]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b9c:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ba2:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fd ff58 	bl	8000a60 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb4:	f7fd ff54 	bl	8000a60 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0fa      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ef      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x418>
 8002bd4:	e01b      	b.n	8002c0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fd ff3b 	bl	8000a60 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bee:	f7fd ff37 	bl	8000a60 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0dd      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ef      	bne.n	8002bee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80d1 	beq.w	8002dba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	f000 808b 	beq.w	8002d3c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d15e      	bne.n	8002cec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <HAL_RCC_OscConfig+0x4b8>)
 8002c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fd ff11 	bl	8000a60 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c40:	e00c      	b.n	8002c5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fd ff0d 	bl	8000a60 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d905      	bls.n	8002c5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0b3      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ec      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c68:	4b56      	ldr	r3, [pc, #344]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4b56      	ldr	r3, [pc, #344]	; (8002dc8 <HAL_RCC_OscConfig+0x62c>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6a11      	ldr	r1, [r2, #32]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c82:	0212      	lsls	r2, r2, #8
 8002c84:	4311      	orrs	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c8a:	0852      	lsrs	r2, r2, #1
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	0552      	lsls	r2, r2, #21
 8002c90:	4311      	orrs	r1, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c96:	0852      	lsrs	r2, r2, #1
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	0652      	lsls	r2, r2, #25
 8002c9c:	4311      	orrs	r1, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ca2:	06d2      	lsls	r2, r2, #27
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	4947      	ldr	r1, [pc, #284]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cac:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a44      	ldr	r2, [pc, #272]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb8:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a41      	ldr	r2, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fd fecc 	bl	8000a60 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fd fec8 	bl	8000a60 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e06e      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x530>
 8002cea:	e066      	b.n	8002dba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a31      	ldr	r2, [pc, #196]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d04:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a2e      	ldr	r2, [pc, #184]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002d0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fd fea4 	bl	8000a60 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fd fea0 	bl	8000a60 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e046      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2e:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x580>
 8002d3a:	e03e      	b.n	8002dba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e039      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_OscConfig+0x628>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d12c      	bne.n	8002db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	3b01      	subs	r3, #1
 8002d68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d123      	bne.n	8002db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d11b      	bne.n	8002db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d113      	bne.n	8002db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d109      	bne.n	8002db6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	3b01      	subs	r3, #1
 8002db0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	019f800c 	.word	0x019f800c

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e11e      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b8e      	ldr	r3, [pc, #568]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	498c      	ldr	r1, [pc, #560]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b8a      	ldr	r3, [pc, #552]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e106      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d073      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d129      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e28:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0f4      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e38:	f000 f966 	bl	8003108 <RCC_GetSysClockFreqFromPLLSource>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4a7c      	ldr	r2, [pc, #496]	; (8003034 <HAL_RCC_ClockConfig+0x268>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d93f      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e46:	4b7a      	ldr	r3, [pc, #488]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d033      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d12f      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e66:	4b72      	ldr	r3, [pc, #456]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6e:	4a70      	ldr	r2, [pc, #448]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e024      	b.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e84:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0c6      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e94:	4b66      	ldr	r3, [pc, #408]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0be      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ea4:	f000 f8ce 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4a61      	ldr	r2, [pc, #388]	; (8003034 <HAL_RCC_ClockConfig+0x268>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d909      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eba:	4a5d      	ldr	r2, [pc, #372]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b5a      	ldr	r3, [pc, #360]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4957      	ldr	r1, [pc, #348]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed8:	f7fd fdc2 	bl	8000a60 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fd fdbe 	bl	8000a60 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e095      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d023      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f20:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a42      	ldr	r2, [pc, #264]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f38:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f40:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4936      	ldr	r1, [pc, #216]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b80      	cmp	r3, #128	; 0x80
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f62:	4b33      	ldr	r3, [pc, #204]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4a32      	ldr	r2, [pc, #200]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d21d      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 020f 	bic.w	r2, r3, #15
 8002f84:	4929      	ldr	r1, [pc, #164]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f8c:	f7fd fd68 	bl	8000a60 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fd fd64 	bl	8000a60 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e03b      	b.n	8003022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_ClockConfig+0x260>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1ed      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4917      	ldr	r1, [pc, #92]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	490f      	ldr	r1, [pc, #60]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff6:	f000 f825 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	490c      	ldr	r1, [pc, #48]	; (8003038 <HAL_RCC_ClockConfig+0x26c>)
 8003008:	5ccb      	ldrb	r3, [r1, r3]
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	fa22 f303 	lsr.w	r3, r2, r3
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x270>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fcd4 	bl	80009c8 <HAL_InitTick>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	04c4b400 	.word	0x04c4b400
 8003038:	08005af4 	.word	0x08005af4
 800303c:	20000004 	.word	0x20000004
 8003040:	20000008 	.word	0x20000008

08003044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d102      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003056:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	e047      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d102      	bne.n	800306e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e03e      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d136      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	3301      	adds	r3, #1
 8003090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003098:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	4a16      	ldr	r2, [pc, #88]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a2:	68d2      	ldr	r2, [r2, #12]
 80030a4:	0a12      	lsrs	r2, r2, #8
 80030a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	617b      	str	r3, [r7, #20]
      break;
 80030b0:	e00c      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	4a10      	ldr	r2, [pc, #64]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80030bc:	68d2      	ldr	r2, [r2, #12]
 80030be:	0a12      	lsrs	r2, r2, #8
 80030c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
      break;
 80030ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0e5b      	lsrs	r3, r3, #25
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	3301      	adds	r3, #1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e001      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030ec:	693b      	ldr	r3, [r7, #16]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	00f42400 	.word	0x00f42400
 8003104:	007a1200 	.word	0x007a1200

08003108 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800310e:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d10c      	bne.n	8003146 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800312c:	4a17      	ldr	r2, [pc, #92]	; (800318c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003136:	68d2      	ldr	r2, [r2, #12]
 8003138:	0a12      	lsrs	r2, r2, #8
 800313a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	617b      	str	r3, [r7, #20]
    break;
 8003144:	e00c      	b.n	8003160 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003150:	68d2      	ldr	r2, [r2, #12]
 8003152:	0a12      	lsrs	r2, r2, #8
 8003154:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
    break;
 800315e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0e5b      	lsrs	r3, r3, #25
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	3301      	adds	r3, #1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800317a:	687b      	ldr	r3, [r7, #4]
}
 800317c:	4618      	mov	r0, r3
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40021000 	.word	0x40021000
 800318c:	007a1200 	.word	0x007a1200
 8003190:	00f42400 	.word	0x00f42400

08003194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800319c:	2300      	movs	r3, #0
 800319e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031a0:	2300      	movs	r3, #0
 80031a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8098 	beq.w	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	4a3f      	ldr	r2, [pc, #252]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031da:	2301      	movs	r3, #1
 80031dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031de:	4b3a      	ldr	r3, [pc, #232]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a39      	ldr	r2, [pc, #228]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ea:	f7fd fc39 	bl	8000a60 <HAL_GetTick>
 80031ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031f0:	e009      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fd fc35 	bl	8000a60 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d902      	bls.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	74fb      	strb	r3, [r7, #19]
        break;
 8003204:	e005      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003206:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0ef      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d159      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003218:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01e      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	d019      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003234:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003250:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003260:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fd fbf5 	bl	8000a60 <HAL_GetTick>
 8003276:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003278:	e00b      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd fbf1 	bl	8000a60 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d902      	bls.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	74fb      	strb	r3, [r7, #19]
            break;
 8003290:	e006      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ec      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10b      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032bc:	e008      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032be:	7cfb      	ldrb	r3, [r7, #19]
 80032c0:	74bb      	strb	r3, [r7, #18]
 80032c2:	e005      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d0:	7c7b      	ldrb	r3, [r7, #17]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4ba6      	ldr	r3, [pc, #664]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	4aa5      	ldr	r2, [pc, #660]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ee:	4ba0      	ldr	r3, [pc, #640]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	499c      	ldr	r1, [pc, #624]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003310:	4b97      	ldr	r3, [pc, #604]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 020c 	bic.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4994      	ldr	r1, [pc, #592]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003332:	4b8f      	ldr	r3, [pc, #572]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	498b      	ldr	r1, [pc, #556]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003354:	4b86      	ldr	r3, [pc, #536]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	4983      	ldr	r1, [pc, #524]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003376:	4b7e      	ldr	r3, [pc, #504]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	497a      	ldr	r1, [pc, #488]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003398:	4b75      	ldr	r3, [pc, #468]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	4972      	ldr	r1, [pc, #456]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ba:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	4969      	ldr	r1, [pc, #420]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033dc:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4961      	ldr	r1, [pc, #388]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033fe:	4b5c      	ldr	r3, [pc, #368]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	4958      	ldr	r1, [pc, #352]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	4950      	ldr	r1, [pc, #320]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003440:	4b4b      	ldr	r3, [pc, #300]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a4a      	ldr	r2, [pc, #296]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800344a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003458:	4b45      	ldr	r3, [pc, #276]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	4942      	ldr	r1, [pc, #264]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003476:	d105      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003478:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003482:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003490:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4934      	ldr	r1, [pc, #208]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ae:	d105      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a2e      	ldr	r2, [pc, #184]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	4926      	ldr	r1, [pc, #152]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e6:	d105      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	4918      	ldr	r1, [pc, #96]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351e:	d105      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4a12      	ldr	r2, [pc, #72]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	490a      	ldr	r1, [pc, #40]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003556:	d105      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003564:	7cbb      	ldrb	r3, [r7, #18]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000

08003574 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003586:	2b84      	cmp	r3, #132	; 0x84
 8003588:	d005      	beq.n	8003596 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800358a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	3303      	adds	r3, #3
 8003594:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003596:	68fb      	ldr	r3, [r7, #12]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035a8:	f001 f804 	bl	80045b4 <vTaskStartScheduler>
  
  return osOK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b4:	b087      	sub	sp, #28
 80035b6:	af02      	add	r7, sp, #8
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685c      	ldr	r4, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035c8:	b29e      	uxth	r6, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ffcf 	bl	8003574 <makeFreeRtosPriority>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	9200      	str	r2, [sp, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4632      	mov	r2, r6
 80035e4:	4629      	mov	r1, r5
 80035e6:	4620      	mov	r0, r4
 80035e8:	f000 fe7e 	bl	80042e8 <xTaskCreate>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e000      	b.n	80035f8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003600 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <osDelay+0x16>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	e000      	b.n	8003618 <osDelay+0x18>
 8003616:	2301      	movs	r3, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 ff97 	bl	800454c <vTaskDelay>
  
  return osOK;
 800361e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d110      	bne.n	800365a <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8003638:	2203      	movs	r2, #3
 800363a:	2100      	movs	r1, #0
 800363c:	2001      	movs	r0, #1
 800363e:	f000 f93f 	bl	80038c0 <xQueueGenericCreate>
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <osSemaphoreCreate+0x2e>
 800364a:	2300      	movs	r3, #0
 800364c:	2200      	movs	r2, #0
 800364e:	2100      	movs	r1, #0
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f98b 	bl	800396c <xQueueGenericSend>
    return sema;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	e000      	b.n	800365c <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800365a:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	4619      	mov	r1, r3
 800367a:	f000 f921 	bl	80038c0 <xQueueGenericCreate>
 800367e:	4603      	mov	r3, r0
#endif
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f103 0208 	add.w	r2, r3, #8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f103 0208 	add.w	r2, r3, #8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f103 0208 	add.w	r2, r3, #8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d103      	bne.n	800374a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e00c      	b.n	8003764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3308      	adds	r3, #8
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e002      	b.n	8003758 <vListInsert+0x2e>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d2f6      	bcs.n	8003752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6892      	ldr	r2, [r2, #8]
 80037b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6852      	ldr	r2, [r2, #4]
 80037bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d103      	bne.n	80037d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003816:	bf00      	nop
 8003818:	e7fe      	b.n	8003818 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800381a:	f001 fde3 	bl	80053e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	68f9      	ldr	r1, [r7, #12]
 8003828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	441a      	add	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	3b01      	subs	r3, #1
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	441a      	add	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	22ff      	movs	r2, #255	; 0xff
 800385e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	22ff      	movs	r2, #255	; 0xff
 8003866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d114      	bne.n	800389a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01a      	beq.n	80038ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3310      	adds	r3, #16
 800387c:	4618      	mov	r0, r3
 800387e:	f001 f8c3 	bl	8004a08 <xTaskRemoveFromEventList>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <xQueueGenericReset+0xcc>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	e009      	b.n	80038ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3310      	adds	r3, #16
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fef2 	bl	8003688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff feed 	bl	8003688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038ae:	f001 fdc9 	bl	8005444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038b2:	2301      	movs	r3, #1
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	613b      	str	r3, [r7, #16]
}
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	3348      	adds	r3, #72	; 0x48
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fe95 	bl	8005628 <pvPortMalloc>
 80038fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3348      	adds	r3, #72	; 0x48
 800390e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003910:	79fa      	ldrb	r2, [r7, #7]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4613      	mov	r3, r2
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f805 	bl	800392c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003922:	69bb      	ldr	r3, [r7, #24]
	}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e002      	b.n	800394e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800395a:	2101      	movs	r1, #1
 800395c:	69b8      	ldr	r0, [r7, #24]
 800395e:	f7ff ff47 	bl	80037f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	; 0x38
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800397a:	2300      	movs	r3, #0
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <xQueueGenericSend+0x32>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <xQueueGenericSend+0x40>
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <xQueueGenericSend+0x44>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <xQueueGenericSend+0x46>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <xQueueGenericSend+0x60>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d103      	bne.n	80039da <xQueueGenericSend+0x6e>
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <xQueueGenericSend+0x72>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <xQueueGenericSend+0x74>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xQueueGenericSend+0x8e>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	623b      	str	r3, [r7, #32]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039fa:	f001 f9a1 	bl	8004d40 <xTaskGetSchedulerState>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <xQueueGenericSend+0x9e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <xQueueGenericSend+0xa2>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xQueueGenericSend+0xa4>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xQueueGenericSend+0xbe>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	61fb      	str	r3, [r7, #28]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a2a:	f001 fcdb 	bl	80053e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <xQueueGenericSend+0xd4>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d129      	bne.n	8003a94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a46:	f000 fb3f 	bl	80040c8 <prvCopyDataToQueue>
 8003a4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d010      	beq.n	8003a76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	3324      	adds	r3, #36	; 0x24
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 ffd5 	bl	8004a08 <xTaskRemoveFromEventList>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d013      	beq.n	8003a8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a64:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <xQueueGenericSend+0x1f8>)
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	e00a      	b.n	8003a8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a7c:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <xQueueGenericSend+0x1f8>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a8c:	f001 fcda 	bl	8005444 <vPortExitCritical>
				return pdPASS;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e063      	b.n	8003b5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a9a:	f001 fcd3 	bl	8005444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e05c      	b.n	8003b5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 f80d 	bl	8004acc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ab6:	f001 fcc5 	bl	8005444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aba:	f000 fdc3 	bl	8004644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003abe:	f001 fc91 	bl	80053e4 <vPortEnterCritical>
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d103      	bne.n	8003ad8 <xQueueGenericSend+0x16c>
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ade:	b25b      	sxtb	r3, r3
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d103      	bne.n	8003aee <xQueueGenericSend+0x182>
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aee:	f001 fca9 	bl	8005444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003af2:	1d3a      	adds	r2, r7, #4
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fffc 	bl	8004af8 <xTaskCheckForTimeOut>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d124      	bne.n	8003b50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b08:	f000 fbd6 	bl	80042b8 <prvIsQueueFull>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d018      	beq.n	8003b44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	3310      	adds	r3, #16
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 ff50 	bl	80049c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b22:	f000 fb61 	bl	80041e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b26:	f000 fd9b 	bl	8004660 <xTaskResumeAll>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f47f af7c 	bne.w	8003a2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <xQueueGenericSend+0x1f8>)
 8003b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	e772      	b.n	8003a2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b46:	f000 fb4f 	bl	80041e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b4a:	f000 fd89 	bl	8004660 <xTaskResumeAll>
 8003b4e:	e76c      	b.n	8003a2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b52:	f000 fb49 	bl	80041e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b56:	f000 fd83 	bl	8004660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3738      	adds	r7, #56	; 0x38
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08e      	sub	sp, #56	; 0x38
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	623b      	str	r3, [r7, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	61fb      	str	r3, [r7, #28]
}
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <xQueueGiveFromISR+0x58>
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <xQueueGiveFromISR+0x5c>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <xQueueGiveFromISR+0x5e>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	61bb      	str	r3, [r7, #24]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003be0:	f001 fce2 	bl	80055a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003be4:	f3ef 8211 	mrs	r2, BASEPRI
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	617a      	str	r2, [r7, #20]
 8003bfa:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bfc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d22b      	bcs.n	8003c68 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d112      	bne.n	8003c52 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d016      	beq.n	8003c62 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	3324      	adds	r3, #36	; 0x24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fee5 	bl	8004a08 <xTaskRemoveFromEventList>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00e      	beq.n	8003c62 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e007      	b.n	8003c62 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c56:	3301      	adds	r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	b25a      	sxtb	r2, r3
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c62:	2301      	movs	r3, #1
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
 8003c66:	e001      	b.n	8003c6c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3738      	adds	r7, #56	; 0x38
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	; 0x30
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <xQueueReceive+0x30>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	623b      	str	r3, [r7, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <xQueueReceive+0x3e>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <xQueueReceive+0x42>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <xQueueReceive+0x44>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <xQueueReceive+0x5e>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	61fb      	str	r3, [r7, #28]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ce2:	f001 f82d 	bl	8004d40 <xTaskGetSchedulerState>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <xQueueReceive+0x6e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <xQueueReceive+0x72>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <xQueueReceive+0x74>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xQueueReceive+0x8e>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	61bb      	str	r3, [r7, #24]
}
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d12:	f001 fb67 	bl	80053e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01f      	beq.n	8003d62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d26:	f000 fa39 	bl	800419c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00f      	beq.n	8003d5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fe62 	bl	8004a08 <xTaskRemoveFromEventList>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d4a:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <xQueueReceive+0x1bc>)
 8003d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d5a:	f001 fb73 	bl	8005444 <vPortExitCritical>
				return pdPASS;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e069      	b.n	8003e36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d68:	f001 fb6c 	bl	8005444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e062      	b.n	8003e36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d76:	f107 0310 	add.w	r3, r7, #16
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fea6 	bl	8004acc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d84:	f001 fb5e 	bl	8005444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d88:	f000 fc5c 	bl	8004644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d8c:	f001 fb2a 	bl	80053e4 <vPortEnterCritical>
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d96:	b25b      	sxtb	r3, r3
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d103      	bne.n	8003da6 <xQueueReceive+0x122>
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dac:	b25b      	sxtb	r3, r3
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d103      	bne.n	8003dbc <xQueueReceive+0x138>
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dbc:	f001 fb42 	bl	8005444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dc0:	1d3a      	adds	r2, r7, #4
 8003dc2:	f107 0310 	add.w	r3, r7, #16
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fe95 	bl	8004af8 <xTaskCheckForTimeOut>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d123      	bne.n	8003e1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd6:	f000 fa59 	bl	800428c <prvIsQueueEmpty>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d017      	beq.n	8003e10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	3324      	adds	r3, #36	; 0x24
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fde9 	bl	80049c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df0:	f000 f9fa 	bl	80041e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003df4:	f000 fc34 	bl	8004660 <xTaskResumeAll>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d189      	bne.n	8003d12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <xQueueReceive+0x1bc>)
 8003e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	e780      	b.n	8003d12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e12:	f000 f9e9 	bl	80041e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e16:	f000 fc23 	bl	8004660 <xTaskResumeAll>
 8003e1a:	e77a      	b.n	8003d12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e1e:	f000 f9e3 	bl	80041e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e22:	f000 fc1d 	bl	8004660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e28:	f000 fa30 	bl	800428c <prvIsQueueEmpty>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f43f af6f 	beq.w	8003d12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3730      	adds	r7, #48	; 0x30
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08e      	sub	sp, #56	; 0x38
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	623b      	str	r3, [r7, #32]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	61fb      	str	r3, [r7, #28]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e94:	f000 ff54 	bl	8004d40 <xTaskGetSchedulerState>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <xQueueSemaphoreTake+0x60>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <xQueueSemaphoreTake+0x64>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <xQueueSemaphoreTake+0x66>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	61bb      	str	r3, [r7, #24]
}
 8003ec0:	bf00      	nop
 8003ec2:	e7fe      	b.n	8003ec2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ec4:	f001 fa8e 	bl	80053e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d024      	beq.n	8003f1e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	1e5a      	subs	r2, r3, #1
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ee4:	f001 f8d4 	bl	8005090 <pvTaskIncrementMutexHeldCount>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00f      	beq.n	8003f16 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	3310      	adds	r3, #16
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fd84 	bl	8004a08 <xTaskRemoveFromEventList>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f06:	4b54      	ldr	r3, [pc, #336]	; (8004058 <xQueueSemaphoreTake+0x214>)
 8003f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f16:	f001 fa95 	bl	8005444 <vPortExitCritical>
				return pdPASS;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e097      	b.n	800404e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d111      	bne.n	8003f48 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	617b      	str	r3, [r7, #20]
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f40:	f001 fa80 	bl	8005444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e082      	b.n	800404e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fdba 	bl	8004acc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f5c:	f001 fa72 	bl	8005444 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f60:	f000 fb70 	bl	8004644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f64:	f001 fa3e 	bl	80053e4 <vPortEnterCritical>
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d103      	bne.n	8003f7e <xQueueSemaphoreTake+0x13a>
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f84:	b25b      	sxtb	r3, r3
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d103      	bne.n	8003f94 <xQueueSemaphoreTake+0x150>
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f94:	f001 fa56 	bl	8005444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f98:	463a      	mov	r2, r7
 8003f9a:	f107 030c 	add.w	r3, r7, #12
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fda9 	bl	8004af8 <xTaskCheckForTimeOut>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d132      	bne.n	8004012 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fae:	f000 f96d 	bl	800428c <prvIsQueueEmpty>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d026      	beq.n	8004006 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003fc0:	f001 fa10 	bl	80053e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fed7 	bl	8004d7c <xTaskPriorityInherit>
 8003fce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003fd0:	f001 fa38 	bl	8005444 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	3324      	adds	r3, #36	; 0x24
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fcef 	bl	80049c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fe4:	f000 f900 	bl	80041e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fe8:	f000 fb3a 	bl	8004660 <xTaskResumeAll>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f47f af68 	bne.w	8003ec4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <xQueueSemaphoreTake+0x214>)
 8003ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	e75e      	b.n	8003ec4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004008:	f000 f8ee 	bl	80041e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800400c:	f000 fb28 	bl	8004660 <xTaskResumeAll>
 8004010:	e758      	b.n	8003ec4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004014:	f000 f8e8 	bl	80041e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004018:	f000 fb22 	bl	8004660 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800401c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800401e:	f000 f935 	bl	800428c <prvIsQueueEmpty>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	f43f af4d 	beq.w	8003ec4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004030:	f001 f9d8 	bl	80053e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004036:	f000 f82f 	bl	8004098 <prvGetDisinheritPriorityAfterTimeout>
 800403a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004042:	4618      	mov	r0, r3
 8004044:	f000 ff96 	bl	8004f74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004048:	f001 f9fc 	bl	8005444 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800404c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800404e:	4618      	mov	r0, r3
 8004050:	3738      	adds	r7, #56	; 0x38
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60bb      	str	r3, [r7, #8]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004080:	f001 f9b0 	bl	80053e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800408a:	f001 f9db 	bl	8005444 <vPortExitCritical>

	return uxReturn;
 800408e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d006      	beq.n	80040b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f1c3 0307 	rsb	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e001      	b.n	80040ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80040ba:	68fb      	ldr	r3, [r7, #12]
	}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10d      	bne.n	8004102 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d14d      	bne.n	800418a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 feb8 	bl	8004e68 <xTaskPriorityDisinherit>
 80040f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	e043      	b.n	800418a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d119      	bne.n	800413c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6858      	ldr	r0, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	461a      	mov	r2, r3
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	f001 fc96 	bl	8005a44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	441a      	add	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	d32b      	bcc.n	800418a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	e026      	b.n	800418a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68d8      	ldr	r0, [r3, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	461a      	mov	r2, r3
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	f001 fc7c 	bl	8005a44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	425b      	negs	r3, r3
 8004156:	441a      	add	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d207      	bcs.n	8004178 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	425b      	negs	r3, r3
 8004172:	441a      	add	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d105      	bne.n	800418a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	3b01      	subs	r3, #1
 8004188:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004192:	697b      	ldr	r3, [r7, #20]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	441a      	add	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d303      	bcc.n	80041d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68d9      	ldr	r1, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	461a      	mov	r2, r3
 80041da:	6838      	ldr	r0, [r7, #0]
 80041dc:	f001 fc32 	bl	8005a44 <memcpy>
	}
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041f0:	f001 f8f8 	bl	80053e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041fc:	e011      	b.n	8004222 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b00      	cmp	r3, #0
 8004204:	d012      	beq.n	800422c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3324      	adds	r3, #36	; 0x24
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fbfc 	bl	8004a08 <xTaskRemoveFromEventList>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004216:	f000 fcd1 	bl	8004bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	3b01      	subs	r3, #1
 800421e:	b2db      	uxtb	r3, r3
 8004220:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	dce9      	bgt.n	80041fe <prvUnlockQueue+0x16>
 800422a:	e000      	b.n	800422e <prvUnlockQueue+0x46>
					break;
 800422c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	22ff      	movs	r2, #255	; 0xff
 8004232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004236:	f001 f905 	bl	8005444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800423a:	f001 f8d3 	bl	80053e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004244:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004246:	e011      	b.n	800426c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d012      	beq.n	8004276 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3310      	adds	r3, #16
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fbd7 	bl	8004a08 <xTaskRemoveFromEventList>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004260:	f000 fcac 	bl	8004bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004264:	7bbb      	ldrb	r3, [r7, #14]
 8004266:	3b01      	subs	r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800426c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004270:	2b00      	cmp	r3, #0
 8004272:	dce9      	bgt.n	8004248 <prvUnlockQueue+0x60>
 8004274:	e000      	b.n	8004278 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004276:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	22ff      	movs	r2, #255	; 0xff
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004280:	f001 f8e0 	bl	8005444 <vPortExitCritical>
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004294:	f001 f8a6 	bl	80053e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	e001      	b.n	80042aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042aa:	f001 f8cb 	bl	8005444 <vPortExitCritical>

	return xReturn;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042c0:	f001 f890 	bl	80053e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d102      	bne.n	80042d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e001      	b.n	80042da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042da:	f001 f8b3 	bl	8005444 <vPortExitCritical>

	return xReturn;
 80042de:	68fb      	ldr	r3, [r7, #12]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af04      	add	r7, sp, #16
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f993 	bl	8005628 <pvPortMalloc>
 8004302:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00e      	beq.n	8004328 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800430a:	2054      	movs	r0, #84	; 0x54
 800430c:	f001 f98c 	bl	8005628 <pvPortMalloc>
 8004310:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
 800431e:	e005      	b.n	800432c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004320:	6978      	ldr	r0, [r7, #20]
 8004322:	f001 fa4d 	bl	80057c0 <vPortFree>
 8004326:	e001      	b.n	800432c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d013      	beq.n	800435a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	2300      	movs	r3, #0
 8004336:	9303      	str	r3, [sp, #12]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	9302      	str	r3, [sp, #8]
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f80e 	bl	800436a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800434e:	69f8      	ldr	r0, [r7, #28]
 8004350:	f000 f892 	bl	8004478 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004354:	2301      	movs	r3, #1
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e002      	b.n	8004360 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004360:	69bb      	ldr	r3, [r7, #24]
	}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b088      	sub	sp, #32
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004382:	3b01      	subs	r3, #1
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f023 0307 	bic.w	r3, r3, #7
 8004390:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	617b      	str	r3, [r7, #20]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01f      	beq.n	80043f8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e012      	b.n	80043e4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	7819      	ldrb	r1, [r3, #0]
 80043c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	3334      	adds	r3, #52	; 0x34
 80043ce:	460a      	mov	r2, r1
 80043d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b0f      	cmp	r3, #15
 80043e8:	d9e9      	bls.n	80043be <prvInitialiseNewTask+0x54>
 80043ea:	e000      	b.n	80043ee <prvInitialiseNewTask+0x84>
			{
				break;
 80043ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f6:	e003      	b.n	8004400 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	2b06      	cmp	r3, #6
 8004404:	d901      	bls.n	800440a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004406:	2306      	movs	r3, #6
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	2200      	movs	r2, #0
 800441a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	3304      	adds	r3, #4
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff f951 	bl	80036c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	3318      	adds	r3, #24
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff f94c 	bl	80036c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004434:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	f1c3 0207 	rsb	r2, r3, #7
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004444:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	2200      	movs	r2, #0
 800444a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	69b8      	ldr	r0, [r7, #24]
 800445a:	f000 fe93 	bl	8005184 <pxPortInitialiseStack>
 800445e:	4602      	mov	r2, r0
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004470:	bf00      	nop
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004480:	f000 ffb0 	bl	80053e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004484:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <prvAddNewTaskToReadyList+0xb8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	4a29      	ldr	r2, [pc, #164]	; (8004530 <prvAddNewTaskToReadyList+0xb8>)
 800448c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800448e:	4b29      	ldr	r3, [pc, #164]	; (8004534 <prvAddNewTaskToReadyList+0xbc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004496:	4a27      	ldr	r2, [pc, #156]	; (8004534 <prvAddNewTaskToReadyList+0xbc>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800449c:	4b24      	ldr	r3, [pc, #144]	; (8004530 <prvAddNewTaskToReadyList+0xb8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d110      	bne.n	80044c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044a4:	f000 fbae 	bl	8004c04 <prvInitialiseTaskLists>
 80044a8:	e00d      	b.n	80044c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044aa:	4b23      	ldr	r3, [pc, #140]	; (8004538 <prvAddNewTaskToReadyList+0xc0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <prvAddNewTaskToReadyList+0xbc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d802      	bhi.n	80044c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <prvAddNewTaskToReadyList+0xbc>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <prvAddNewTaskToReadyList+0xc4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	4a1b      	ldr	r2, [pc, #108]	; (800453c <prvAddNewTaskToReadyList+0xc4>)
 80044ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2201      	movs	r2, #1
 80044d6:	409a      	lsls	r2, r3
 80044d8:	4b19      	ldr	r3, [pc, #100]	; (8004540 <prvAddNewTaskToReadyList+0xc8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4313      	orrs	r3, r2
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <prvAddNewTaskToReadyList+0xc8>)
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <prvAddNewTaskToReadyList+0xcc>)
 80044f0:	441a      	add	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f7ff f8f2 	bl	80036e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044fe:	f000 ffa1 	bl	8005444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <prvAddNewTaskToReadyList+0xc0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <prvAddNewTaskToReadyList+0xbc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	429a      	cmp	r2, r3
 8004516:	d207      	bcs.n	8004528 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <prvAddNewTaskToReadyList+0xd0>)
 800451a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000194 	.word	0x20000194
 8004534:	20000094 	.word	0x20000094
 8004538:	200001a0 	.word	0x200001a0
 800453c:	200001b0 	.word	0x200001b0
 8004540:	2000019c 	.word	0x2000019c
 8004544:	20000098 	.word	0x20000098
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d017      	beq.n	800458e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <vTaskDelay+0x60>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <vTaskDelay+0x30>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	60bb      	str	r3, [r7, #8]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800457c:	f000 f862 	bl	8004644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004580:	2100      	movs	r1, #0
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fd98 	bl	80050b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004588:	f000 f86a 	bl	8004660 <xTaskResumeAll>
 800458c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d107      	bne.n	80045a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <vTaskDelay+0x64>)
 8004596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200001bc 	.word	0x200001bc
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <vTaskStartScheduler+0x78>)
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	2300      	movs	r3, #0
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	2300      	movs	r3, #0
 80045c4:	2280      	movs	r2, #128	; 0x80
 80045c6:	491a      	ldr	r1, [pc, #104]	; (8004630 <vTaskStartScheduler+0x7c>)
 80045c8:	481a      	ldr	r0, [pc, #104]	; (8004634 <vTaskStartScheduler+0x80>)
 80045ca:	f7ff fe8d 	bl	80042e8 <xTaskCreate>
 80045ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d116      	bne.n	8004604 <vTaskStartScheduler+0x50>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60bb      	str	r3, [r7, #8]
}
 80045e8:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045ea:	4b13      	ldr	r3, [pc, #76]	; (8004638 <vTaskStartScheduler+0x84>)
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295
 80045f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <vTaskStartScheduler+0x88>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <vTaskStartScheduler+0x8c>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045fe:	f000 fe4f 	bl	80052a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004602:	e00e      	b.n	8004622 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d10a      	bne.n	8004622 <vTaskStartScheduler+0x6e>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	607b      	str	r3, [r7, #4]
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <vTaskStartScheduler+0x6c>
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200001b8 	.word	0x200001b8
 8004630:	08005aec 	.word	0x08005aec
 8004634:	08004bd5 	.word	0x08004bd5
 8004638:	200001b4 	.word	0x200001b4
 800463c:	200001a0 	.word	0x200001a0
 8004640:	20000198 	.word	0x20000198

08004644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <vTaskSuspendAll+0x18>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3301      	adds	r3, #1
 800464e:	4a03      	ldr	r2, [pc, #12]	; (800465c <vTaskSuspendAll+0x18>)
 8004650:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004652:	bf00      	nop
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	200001bc 	.word	0x200001bc

08004660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800466e:	4b41      	ldr	r3, [pc, #260]	; (8004774 <xTaskResumeAll+0x114>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <xTaskResumeAll+0x2c>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	603b      	str	r3, [r7, #0]
}
 8004688:	bf00      	nop
 800468a:	e7fe      	b.n	800468a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800468c:	f000 feaa 	bl	80053e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004690:	4b38      	ldr	r3, [pc, #224]	; (8004774 <xTaskResumeAll+0x114>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3b01      	subs	r3, #1
 8004696:	4a37      	ldr	r2, [pc, #220]	; (8004774 <xTaskResumeAll+0x114>)
 8004698:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800469a:	4b36      	ldr	r3, [pc, #216]	; (8004774 <xTaskResumeAll+0x114>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d161      	bne.n	8004766 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046a2:	4b35      	ldr	r3, [pc, #212]	; (8004778 <xTaskResumeAll+0x118>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d05d      	beq.n	8004766 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046aa:	e02e      	b.n	800470a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ac:	4b33      	ldr	r3, [pc, #204]	; (800477c <xTaskResumeAll+0x11c>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3318      	adds	r3, #24
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff f86f 	bl	800379c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff f86a 	bl	800379c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	2201      	movs	r2, #1
 80046ce:	409a      	lsls	r2, r3
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <xTaskResumeAll+0x120>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <xTaskResumeAll+0x120>)
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4a27      	ldr	r2, [pc, #156]	; (8004784 <xTaskResumeAll+0x124>)
 80046e8:	441a      	add	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7fe fff6 	bl	80036e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	4b23      	ldr	r3, [pc, #140]	; (8004788 <xTaskResumeAll+0x128>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004704:	4b21      	ldr	r3, [pc, #132]	; (800478c <xTaskResumeAll+0x12c>)
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800470a:	4b1c      	ldr	r3, [pc, #112]	; (800477c <xTaskResumeAll+0x11c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1cc      	bne.n	80046ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004718:	f000 faf2 	bl	8004d00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800471c:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <xTaskResumeAll+0x130>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d010      	beq.n	800474a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004728:	f000 f836 	bl	8004798 <xTaskIncrementTick>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004732:	4b16      	ldr	r3, [pc, #88]	; (800478c <xTaskResumeAll+0x12c>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3b01      	subs	r3, #1
 800473c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f1      	bne.n	8004728 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004744:	4b12      	ldr	r3, [pc, #72]	; (8004790 <xTaskResumeAll+0x130>)
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <xTaskResumeAll+0x12c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004756:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <xTaskResumeAll+0x134>)
 8004758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004766:	f000 fe6d 	bl	8005444 <vPortExitCritical>

	return xAlreadyYielded;
 800476a:	68bb      	ldr	r3, [r7, #8]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	200001bc 	.word	0x200001bc
 8004778:	20000194 	.word	0x20000194
 800477c:	20000154 	.word	0x20000154
 8004780:	2000019c 	.word	0x2000019c
 8004784:	20000098 	.word	0x20000098
 8004788:	20000094 	.word	0x20000094
 800478c:	200001a8 	.word	0x200001a8
 8004790:	200001a4 	.word	0x200001a4
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047a2:	4b4e      	ldr	r3, [pc, #312]	; (80048dc <xTaskIncrementTick+0x144>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f040 808e 	bne.w	80048c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047ac:	4b4c      	ldr	r3, [pc, #304]	; (80048e0 <xTaskIncrementTick+0x148>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047b4:	4a4a      	ldr	r2, [pc, #296]	; (80048e0 <xTaskIncrementTick+0x148>)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d120      	bne.n	8004802 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047c0:	4b48      	ldr	r3, [pc, #288]	; (80048e4 <xTaskIncrementTick+0x14c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	603b      	str	r3, [r7, #0]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <xTaskIncrementTick+0x46>
 80047e0:	4b40      	ldr	r3, [pc, #256]	; (80048e4 <xTaskIncrementTick+0x14c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	4b40      	ldr	r3, [pc, #256]	; (80048e8 <xTaskIncrementTick+0x150>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3e      	ldr	r2, [pc, #248]	; (80048e4 <xTaskIncrementTick+0x14c>)
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4a3e      	ldr	r2, [pc, #248]	; (80048e8 <xTaskIncrementTick+0x150>)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b3d      	ldr	r3, [pc, #244]	; (80048ec <xTaskIncrementTick+0x154>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	4a3c      	ldr	r2, [pc, #240]	; (80048ec <xTaskIncrementTick+0x154>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	f000 fa7f 	bl	8004d00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004802:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <xTaskIncrementTick+0x158>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	429a      	cmp	r2, r3
 800480a:	d348      	bcc.n	800489e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480c:	4b35      	ldr	r3, [pc, #212]	; (80048e4 <xTaskIncrementTick+0x14c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004816:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <xTaskIncrementTick+0x158>)
 8004818:	f04f 32ff 	mov.w	r2, #4294967295
 800481c:	601a      	str	r2, [r3, #0]
					break;
 800481e:	e03e      	b.n	800489e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004820:	4b30      	ldr	r3, [pc, #192]	; (80048e4 <xTaskIncrementTick+0x14c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d203      	bcs.n	8004840 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004838:	4a2d      	ldr	r2, [pc, #180]	; (80048f0 <xTaskIncrementTick+0x158>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800483e:	e02e      	b.n	800489e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe ffa9 	bl	800379c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	3318      	adds	r3, #24
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe ffa0 	bl	800379c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <xTaskIncrementTick+0x15c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <xTaskIncrementTick+0x15c>)
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <xTaskIncrementTick+0x160>)
 800487c:	441a      	add	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3304      	adds	r3, #4
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f7fe ff2c 	bl	80036e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <xTaskIncrementTick+0x164>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	429a      	cmp	r2, r3
 8004896:	d3b9      	bcc.n	800480c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800489c:	e7b6      	b.n	800480c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800489e:	4b17      	ldr	r3, [pc, #92]	; (80048fc <xTaskIncrementTick+0x164>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4914      	ldr	r1, [pc, #80]	; (80048f8 <xTaskIncrementTick+0x160>)
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d901      	bls.n	80048ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80048b6:	2301      	movs	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <xTaskIncrementTick+0x168>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e004      	b.n	80048d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <xTaskIncrementTick+0x16c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	4a0d      	ldr	r2, [pc, #52]	; (8004904 <xTaskIncrementTick+0x16c>)
 80048d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048d2:	697b      	ldr	r3, [r7, #20]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	200001bc 	.word	0x200001bc
 80048e0:	20000198 	.word	0x20000198
 80048e4:	2000014c 	.word	0x2000014c
 80048e8:	20000150 	.word	0x20000150
 80048ec:	200001ac 	.word	0x200001ac
 80048f0:	200001b4 	.word	0x200001b4
 80048f4:	2000019c 	.word	0x2000019c
 80048f8:	20000098 	.word	0x20000098
 80048fc:	20000094 	.word	0x20000094
 8004900:	200001a8 	.word	0x200001a8
 8004904:	200001a4 	.word	0x200001a4

08004908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800490e:	4b27      	ldr	r3, [pc, #156]	; (80049ac <vTaskSwitchContext+0xa4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004916:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <vTaskSwitchContext+0xa8>)
 8004918:	2201      	movs	r2, #1
 800491a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800491c:	e03f      	b.n	800499e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800491e:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <vTaskSwitchContext+0xa8>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004924:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <vTaskSwitchContext+0xac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	f1c3 031f 	rsb	r3, r3, #31
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	491f      	ldr	r1, [pc, #124]	; (80049b8 <vTaskSwitchContext+0xb0>)
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <vTaskSwitchContext+0x5c>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	607b      	str	r3, [r7, #4]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <vTaskSwitchContext+0x5a>
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <vTaskSwitchContext+0xb0>)
 8004970:	4413      	add	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3308      	adds	r3, #8
 8004986:	429a      	cmp	r2, r3
 8004988:	d104      	bne.n	8004994 <vTaskSwitchContext+0x8c>
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4a08      	ldr	r2, [pc, #32]	; (80049bc <vTaskSwitchContext+0xb4>)
 800499c:	6013      	str	r3, [r2, #0]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	200001bc 	.word	0x200001bc
 80049b0:	200001a8 	.word	0x200001a8
 80049b4:	2000019c 	.word	0x2000019c
 80049b8:	20000098 	.word	0x20000098
 80049bc:	20000094 	.word	0x20000094

080049c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <vTaskPlaceOnEventList+0x44>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3318      	adds	r3, #24
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fe fe9b 	bl	800372a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049f4:	2101      	movs	r1, #1
 80049f6:	6838      	ldr	r0, [r7, #0]
 80049f8:	f000 fb5e 	bl	80050b8 <prvAddCurrentTaskToDelayedList>
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000094 	.word	0x20000094

08004a08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60fb      	str	r3, [r7, #12]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	3318      	adds	r3, #24
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe feaf 	bl	800379c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <xTaskRemoveFromEventList+0xac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d11c      	bne.n	8004a80 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fea6 	bl	800379c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	2201      	movs	r2, #1
 8004a56:	409a      	lsls	r2, r3
 8004a58:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <xTaskRemoveFromEventList+0xb0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <xTaskRemoveFromEventList+0xb0>)
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <xTaskRemoveFromEventList+0xb4>)
 8004a70:	441a      	add	r2, r3
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fe fe32 	bl	80036e2 <vListInsertEnd>
 8004a7e:	e005      	b.n	8004a8c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3318      	adds	r3, #24
 8004a84:	4619      	mov	r1, r3
 8004a86:	480e      	ldr	r0, [pc, #56]	; (8004ac0 <xTaskRemoveFromEventList+0xb8>)
 8004a88:	f7fe fe2b 	bl	80036e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <xTaskRemoveFromEventList+0xbc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d905      	bls.n	8004aa6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <xTaskRemoveFromEventList+0xc0>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e001      	b.n	8004aaa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004aaa:	697b      	ldr	r3, [r7, #20]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200001bc 	.word	0x200001bc
 8004ab8:	2000019c 	.word	0x2000019c
 8004abc:	20000098 	.word	0x20000098
 8004ac0:	20000154 	.word	0x20000154
 8004ac4:	20000094 	.word	0x20000094
 8004ac8:	200001a8 	.word	0x200001a8

08004acc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <vTaskInternalSetTimeOutState+0x24>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <vTaskInternalSetTimeOutState+0x28>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	605a      	str	r2, [r3, #4]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	200001ac 	.word	0x200001ac
 8004af4:	20000198 	.word	0x20000198

08004af8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	613b      	str	r3, [r7, #16]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	60fb      	str	r3, [r7, #12]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b3a:	f000 fc53 	bl	80053e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <xTaskCheckForTimeOut+0xbc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d102      	bne.n	8004b5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e023      	b.n	8004ba6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <xTaskCheckForTimeOut+0xc0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d007      	beq.n	8004b7a <xTaskCheckForTimeOut+0x82>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d302      	bcc.n	8004b7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e015      	b.n	8004ba6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d20b      	bcs.n	8004b9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad2      	subs	r2, r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff9b 	bl	8004acc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e004      	b.n	8004ba6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ba6:	f000 fc4d 	bl	8005444 <vPortExitCritical>

	return xReturn;
 8004baa:	69fb      	ldr	r3, [r7, #28]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3720      	adds	r7, #32
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000198 	.word	0x20000198
 8004bb8:	200001ac 	.word	0x200001ac

08004bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <vTaskMissedYield+0x14>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	200001a8 	.word	0x200001a8

08004bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bdc:	f000 f852 	bl	8004c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <prvIdleTask+0x28>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d9f9      	bls.n	8004bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <prvIdleTask+0x2c>)
 8004bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bf8:	e7f0      	b.n	8004bdc <prvIdleTask+0x8>
 8004bfa:	bf00      	nop
 8004bfc:	20000098 	.word	0x20000098
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	e00c      	b.n	8004c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <prvInitialiseTaskLists+0x60>)
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fd32 	bl	8003688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3301      	adds	r3, #1
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b06      	cmp	r3, #6
 8004c2e:	d9ef      	bls.n	8004c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c30:	480d      	ldr	r0, [pc, #52]	; (8004c68 <prvInitialiseTaskLists+0x64>)
 8004c32:	f7fe fd29 	bl	8003688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c36:	480d      	ldr	r0, [pc, #52]	; (8004c6c <prvInitialiseTaskLists+0x68>)
 8004c38:	f7fe fd26 	bl	8003688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c3c:	480c      	ldr	r0, [pc, #48]	; (8004c70 <prvInitialiseTaskLists+0x6c>)
 8004c3e:	f7fe fd23 	bl	8003688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c42:	480c      	ldr	r0, [pc, #48]	; (8004c74 <prvInitialiseTaskLists+0x70>)
 8004c44:	f7fe fd20 	bl	8003688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c48:	480b      	ldr	r0, [pc, #44]	; (8004c78 <prvInitialiseTaskLists+0x74>)
 8004c4a:	f7fe fd1d 	bl	8003688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <prvInitialiseTaskLists+0x78>)
 8004c50:	4a05      	ldr	r2, [pc, #20]	; (8004c68 <prvInitialiseTaskLists+0x64>)
 8004c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <prvInitialiseTaskLists+0x7c>)
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <prvInitialiseTaskLists+0x68>)
 8004c58:	601a      	str	r2, [r3, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000098 	.word	0x20000098
 8004c68:	20000124 	.word	0x20000124
 8004c6c:	20000138 	.word	0x20000138
 8004c70:	20000154 	.word	0x20000154
 8004c74:	20000168 	.word	0x20000168
 8004c78:	20000180 	.word	0x20000180
 8004c7c:	2000014c 	.word	0x2000014c
 8004c80:	20000150 	.word	0x20000150

08004c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c8a:	e019      	b.n	8004cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c8c:	f000 fbaa 	bl	80053e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c90:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <prvCheckTasksWaitingTermination+0x50>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fd7d 	bl	800379c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <prvCheckTasksWaitingTermination+0x54>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	4a0b      	ldr	r2, [pc, #44]	; (8004cd8 <prvCheckTasksWaitingTermination+0x54>)
 8004caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <prvCheckTasksWaitingTermination+0x58>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <prvCheckTasksWaitingTermination+0x58>)
 8004cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cb6:	f000 fbc5 	bl	8005444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f810 	bl	8004ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <prvCheckTasksWaitingTermination+0x58>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e1      	bne.n	8004c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000168 	.word	0x20000168
 8004cd8:	20000194 	.word	0x20000194
 8004cdc:	2000017c 	.word	0x2000017c

08004ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fd67 	bl	80057c0 <vPortFree>
			vPortFree( pxTCB );
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fd64 	bl	80057c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <prvResetNextTaskUnblockTime+0x38>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <prvResetNextTaskUnblockTime+0x3c>)
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295
 8004d16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d18:	e008      	b.n	8004d2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1a:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <prvResetNextTaskUnblockTime+0x38>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <prvResetNextTaskUnblockTime+0x3c>)
 8004d2a:	6013      	str	r3, [r2, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	2000014c 	.word	0x2000014c
 8004d3c:	200001b4 	.word	0x200001b4

08004d40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <xTaskGetSchedulerState+0x34>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	e008      	b.n	8004d66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <xTaskGetSchedulerState+0x38>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	607b      	str	r3, [r7, #4]
 8004d60:	e001      	b.n	8004d66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d66:	687b      	ldr	r3, [r7, #4]
	}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	200001a0 	.word	0x200001a0
 8004d78:	200001bc 	.word	0x200001bc

08004d7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d05e      	beq.n	8004e50 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <xTaskPriorityInherit+0xe0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d24e      	bcs.n	8004e3e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	db06      	blt.n	8004db6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da8:	4b2c      	ldr	r3, [pc, #176]	; (8004e5c <xTaskPriorityInherit+0xe0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	f1c3 0207 	rsb	r2, r3, #7
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6959      	ldr	r1, [r3, #20]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4a26      	ldr	r2, [pc, #152]	; (8004e60 <xTaskPriorityInherit+0xe4>)
 8004dc8:	4413      	add	r3, r2
 8004dca:	4299      	cmp	r1, r3
 8004dcc:	d12f      	bne.n	8004e2e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fce2 	bl	800379c <uxListRemove>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	2201      	movs	r2, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43da      	mvns	r2, r3
 8004dea:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <xTaskPriorityInherit+0xe8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4013      	ands	r3, r2
 8004df0:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <xTaskPriorityInherit+0xe8>)
 8004df2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004df4:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <xTaskPriorityInherit+0xe0>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	2201      	movs	r2, #1
 8004e04:	409a      	lsls	r2, r3
 8004e06:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <xTaskPriorityInherit+0xe8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <xTaskPriorityInherit+0xe8>)
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <xTaskPriorityInherit+0xe4>)
 8004e1e:	441a      	add	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f7fe fc5b 	bl	80036e2 <vListInsertEnd>
 8004e2c:	e004      	b.n	8004e38 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <xTaskPriorityInherit+0xe0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e008      	b.n	8004e50 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <xTaskPriorityInherit+0xe0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d201      	bcs.n	8004e50 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e50:	68fb      	ldr	r3, [r7, #12]
	}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000094 	.word	0x20000094
 8004e60:	20000098 	.word	0x20000098
 8004e64:	2000019c 	.word	0x2000019c

08004e68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d06e      	beq.n	8004f5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e7e:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <xTaskPriorityDisinherit+0x100>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d00a      	beq.n	8004e9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	60fb      	str	r3, [r7, #12]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	60bb      	str	r3, [r7, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	e7fe      	b.n	8004eba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec0:	1e5a      	subs	r2, r3, #1
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d044      	beq.n	8004f5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d140      	bne.n	8004f5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe fc5c 	bl	800379c <uxListRemove>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d115      	bne.n	8004f16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	491f      	ldr	r1, [pc, #124]	; (8004f6c <xTaskPriorityDisinherit+0x104>)
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <xTaskPriorityDisinherit+0xae>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	2201      	movs	r2, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43da      	mvns	r2, r3
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <xTaskPriorityDisinherit+0x108>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4013      	ands	r3, r2
 8004f12:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <xTaskPriorityDisinherit+0x108>)
 8004f14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	f1c3 0207 	rsb	r2, r3, #7
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	2201      	movs	r2, #1
 8004f30:	409a      	lsls	r2, r3
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <xTaskPriorityDisinherit+0x108>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	4a0d      	ldr	r2, [pc, #52]	; (8004f70 <xTaskPriorityDisinherit+0x108>)
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4a08      	ldr	r2, [pc, #32]	; (8004f6c <xTaskPriorityDisinherit+0x104>)
 8004f4a:	441a      	add	r2, r3
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7fe fbc5 	bl	80036e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f5c:	697b      	ldr	r3, [r7, #20]
	}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000094 	.word	0x20000094
 8004f6c:	20000098 	.word	0x20000098
 8004f70:	2000019c 	.word	0x2000019c

08004f74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d077      	beq.n	800507c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60fb      	str	r3, [r7, #12]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d902      	bls.n	8004fba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	e002      	b.n	8004fc0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d058      	beq.n	800507c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d153      	bne.n	800507c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fd4:	4b2b      	ldr	r3, [pc, #172]	; (8005084 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d10a      	bne.n	8004ff4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	60bb      	str	r3, [r7, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	db04      	blt.n	8005012 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f1c3 0207 	rsb	r2, r3, #7
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	6959      	ldr	r1, [r3, #20]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005022:	4413      	add	r3, r2
 8005024:	4299      	cmp	r1, r3
 8005026:	d129      	bne.n	800507c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	3304      	adds	r3, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fbb5 	bl	800379c <uxListRemove>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	2201      	movs	r2, #1
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43da      	mvns	r2, r3
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4013      	ands	r3, r2
 800504a:	4a10      	ldr	r2, [pc, #64]	; (800508c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800504c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	2201      	movs	r2, #1
 8005054:	409a      	lsls	r2, r3
 8005056:	4b0d      	ldr	r3, [pc, #52]	; (800508c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	4a0b      	ldr	r2, [pc, #44]	; (800508c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4a06      	ldr	r2, [pc, #24]	; (8005088 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800506e:	441a      	add	r2, r3
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fe fb33 	bl	80036e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800507c:	bf00      	nop
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000094 	.word	0x20000094
 8005088:	20000098 	.word	0x20000098
 800508c:	2000019c 	.word	0x2000019c

08005090 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d004      	beq.n	80050a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a2:	3201      	adds	r2, #1
 80050a4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80050a6:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80050a8:	681b      	ldr	r3, [r3, #0]
	}
 80050aa:	4618      	mov	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000094 	.word	0x20000094

080050b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050c2:	4b29      	ldr	r3, [pc, #164]	; (8005168 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c8:	4b28      	ldr	r3, [pc, #160]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fb64 	bl	800379c <uxListRemove>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	2201      	movs	r2, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43da      	mvns	r2, r3
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4013      	ands	r3, r2
 80050ee:	4a20      	ldr	r2, [pc, #128]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d10a      	bne.n	8005110 <prvAddCurrentTaskToDelayedList+0x58>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005100:	4b1a      	ldr	r3, [pc, #104]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	481a      	ldr	r0, [pc, #104]	; (8005174 <prvAddCurrentTaskToDelayedList+0xbc>)
 800510a:	f7fe faea 	bl	80036e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800510e:	e026      	b.n	800515e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4413      	add	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	429a      	cmp	r2, r3
 8005126:	d209      	bcs.n	800513c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <prvAddCurrentTaskToDelayedList+0xc0>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7fe faf8 	bl	800372a <vListInsert>
}
 800513a:	e010      	b.n	800515e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <prvAddCurrentTaskToDelayedList+0xc4>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f7fe faee 	bl	800372a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	d202      	bcs.n	800515e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005158:	4a09      	ldr	r2, [pc, #36]	; (8005180 <prvAddCurrentTaskToDelayedList+0xc8>)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6013      	str	r3, [r2, #0]
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000198 	.word	0x20000198
 800516c:	20000094 	.word	0x20000094
 8005170:	2000019c 	.word	0x2000019c
 8005174:	20000180 	.word	0x20000180
 8005178:	20000150 	.word	0x20000150
 800517c:	2000014c 	.word	0x2000014c
 8005180:	200001b4 	.word	0x200001b4

08005184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3b04      	subs	r3, #4
 8005194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800519c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b04      	subs	r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3b04      	subs	r3, #4
 80051b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051b4:	4a0c      	ldr	r2, [pc, #48]	; (80051e8 <pxPortInitialiseStack+0x64>)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3b14      	subs	r3, #20
 80051be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3b04      	subs	r3, #4
 80051ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f06f 0202 	mvn.w	r2, #2
 80051d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3b20      	subs	r3, #32
 80051d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	080051ed 	.word	0x080051ed

080051ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <prvTaskExitError+0x54>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d00a      	beq.n	8005216 <prvTaskExitError+0x2a>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	60fb      	str	r3, [r7, #12]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <prvTaskExitError+0x28>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60bb      	str	r3, [r7, #8]
}
 8005228:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800522a:	bf00      	nop
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0fc      	beq.n	800522c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	20000010 	.word	0x20000010
	...

08005250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <pxCurrentTCBConst2>)
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6808      	ldr	r0, [r1, #0]
 8005256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	f380 8809 	msr	PSP, r0
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8811 	msr	BASEPRI, r0
 800526a:	4770      	bx	lr
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst2>:
 8005270:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005278:	4808      	ldr	r0, [pc, #32]	; (800529c <prvPortStartFirstTask+0x24>)
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f380 8808 	msr	MSP, r0
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8814 	msr	CONTROL, r0
 800528a:	b662      	cpsie	i
 800528c:	b661      	cpsie	f
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	df00      	svc	0
 8005298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800529a:	bf00      	nop
 800529c:	e000ed08 	.word	0xe000ed08

080052a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052a6:	4b46      	ldr	r3, [pc, #280]	; (80053c0 <xPortStartScheduler+0x120>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a46      	ldr	r2, [pc, #280]	; (80053c4 <xPortStartScheduler+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d10a      	bne.n	80052c6 <xPortStartScheduler+0x26>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	613b      	str	r3, [r7, #16]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052c6:	4b3e      	ldr	r3, [pc, #248]	; (80053c0 <xPortStartScheduler+0x120>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a3f      	ldr	r2, [pc, #252]	; (80053c8 <xPortStartScheduler+0x128>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d10a      	bne.n	80052e6 <xPortStartScheduler+0x46>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	60fb      	str	r3, [r7, #12]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052e6:	4b39      	ldr	r3, [pc, #228]	; (80053cc <xPortStartScheduler+0x12c>)
 80052e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	22ff      	movs	r2, #255	; 0xff
 80052f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005308:	b2da      	uxtb	r2, r3
 800530a:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <xPortStartScheduler+0x130>)
 800530c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800530e:	4b31      	ldr	r3, [pc, #196]	; (80053d4 <xPortStartScheduler+0x134>)
 8005310:	2207      	movs	r2, #7
 8005312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005314:	e009      	b.n	800532a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <xPortStartScheduler+0x134>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3b01      	subs	r3, #1
 800531c:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <xPortStartScheduler+0x134>)
 800531e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	2b80      	cmp	r3, #128	; 0x80
 8005334:	d0ef      	beq.n	8005316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005336:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <xPortStartScheduler+0x134>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f1c3 0307 	rsb	r3, r3, #7
 800533e:	2b04      	cmp	r3, #4
 8005340:	d00a      	beq.n	8005358 <xPortStartScheduler+0xb8>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60bb      	str	r3, [r7, #8]
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005358:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <xPortStartScheduler+0x134>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <xPortStartScheduler+0x134>)
 8005360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005362:	4b1c      	ldr	r3, [pc, #112]	; (80053d4 <xPortStartScheduler+0x134>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800536a:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <xPortStartScheduler+0x134>)
 800536c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	b2da      	uxtb	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <xPortStartScheduler+0x138>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <xPortStartScheduler+0x138>)
 800537c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <xPortStartScheduler+0x138>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <xPortStartScheduler+0x138>)
 8005388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800538c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800538e:	f000 f8dd 	bl	800554c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005392:	4b12      	ldr	r3, [pc, #72]	; (80053dc <xPortStartScheduler+0x13c>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005398:	f000 f8fc 	bl	8005594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <xPortStartScheduler+0x140>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0f      	ldr	r2, [pc, #60]	; (80053e0 <xPortStartScheduler+0x140>)
 80053a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053a8:	f7ff ff66 	bl	8005278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053ac:	f7ff faac 	bl	8004908 <vTaskSwitchContext>
	prvTaskExitError();
 80053b0:	f7ff ff1c 	bl	80051ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	e000ed00 	.word	0xe000ed00
 80053c4:	410fc271 	.word	0x410fc271
 80053c8:	410fc270 	.word	0x410fc270
 80053cc:	e000e400 	.word	0xe000e400
 80053d0:	200001c0 	.word	0x200001c0
 80053d4:	200001c4 	.word	0x200001c4
 80053d8:	e000ed20 	.word	0xe000ed20
 80053dc:	20000010 	.word	0x20000010
 80053e0:	e000ef34 	.word	0xe000ef34

080053e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	607b      	str	r3, [r7, #4]
}
 80053fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <vPortEnterCritical+0x58>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	4a0d      	ldr	r2, [pc, #52]	; (800543c <vPortEnterCritical+0x58>)
 8005406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <vPortEnterCritical+0x58>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10f      	bne.n	8005430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <vPortEnterCritical+0x5c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <vPortEnterCritical+0x4c>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	603b      	str	r3, [r7, #0]
}
 800542c:	bf00      	nop
 800542e:	e7fe      	b.n	800542e <vPortEnterCritical+0x4a>
	}
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	20000010 	.word	0x20000010
 8005440:	e000ed04 	.word	0xe000ed04

08005444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <vPortExitCritical+0x50>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <vPortExitCritical+0x24>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	607b      	str	r3, [r7, #4]
}
 8005464:	bf00      	nop
 8005466:	e7fe      	b.n	8005466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <vPortExitCritical+0x50>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3b01      	subs	r3, #1
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <vPortExitCritical+0x50>)
 8005470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005472:	4b08      	ldr	r3, [pc, #32]	; (8005494 <vPortExitCritical+0x50>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <vPortExitCritical+0x42>
 800547a:	2300      	movs	r3, #0
 800547c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f383 8811 	msr	BASEPRI, r3
}
 8005484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000010 	.word	0x20000010
	...

080054a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054a0:	f3ef 8009 	mrs	r0, PSP
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	4b15      	ldr	r3, [pc, #84]	; (8005500 <pxCurrentTCBConst>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f01e 0f10 	tst.w	lr, #16
 80054b0:	bf08      	it	eq
 80054b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	6010      	str	r0, [r2, #0]
 80054bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054c4:	f380 8811 	msr	BASEPRI, r0
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f7ff fa1a 	bl	8004908 <vTaskSwitchContext>
 80054d4:	f04f 0000 	mov.w	r0, #0
 80054d8:	f380 8811 	msr	BASEPRI, r0
 80054dc:	bc09      	pop	{r0, r3}
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	6808      	ldr	r0, [r1, #0]
 80054e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e6:	f01e 0f10 	tst.w	lr, #16
 80054ea:	bf08      	it	eq
 80054ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054f0:	f380 8809 	msr	PSP, r0
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	f3af 8000 	nop.w

08005500 <pxCurrentTCBConst>:
 8005500:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop

08005508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005522:	f7ff f939 	bl	8004798 <xTaskIncrementTick>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <xPortSysTickHandler+0x40>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <vPortSetupTimerInterrupt+0x38>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <vPortSetupTimerInterrupt+0x3c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <vPortSetupTimerInterrupt+0x40>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	4a09      	ldr	r2, [pc, #36]	; (8005590 <vPortSetupTimerInterrupt+0x44>)
 800556a:	3b01      	subs	r3, #1
 800556c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010
 8005584:	e000e018 	.word	0xe000e018
 8005588:	20000004 	.word	0x20000004
 800558c:	10624dd3 	.word	0x10624dd3
 8005590:	e000e014 	.word	0xe000e014

08005594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055a4 <vPortEnableVFP+0x10>
 8005598:	6801      	ldr	r1, [r0, #0]
 800559a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800559e:	6001      	str	r1, [r0, #0]
 80055a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055a2:	bf00      	nop
 80055a4:	e000ed88 	.word	0xe000ed88

080055a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055ae:	f3ef 8305 	mrs	r3, IPSR
 80055b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b0f      	cmp	r3, #15
 80055b8:	d914      	bls.n	80055e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <vPortValidateInterruptPriority+0x70>)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055c4:	4b15      	ldr	r3, [pc, #84]	; (800561c <vPortValidateInterruptPriority+0x74>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	7afa      	ldrb	r2, [r7, #11]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d20a      	bcs.n	80055e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	607b      	str	r3, [r7, #4]
}
 80055e0:	bf00      	nop
 80055e2:	e7fe      	b.n	80055e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055e4:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <vPortValidateInterruptPriority+0x78>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <vPortValidateInterruptPriority+0x7c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d90a      	bls.n	800560a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	603b      	str	r3, [r7, #0]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <vPortValidateInterruptPriority+0x60>
	}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	e000e3f0 	.word	0xe000e3f0
 800561c:	200001c0 	.word	0x200001c0
 8005620:	e000ed0c 	.word	0xe000ed0c
 8005624:	200001c4 	.word	0x200001c4

08005628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005634:	f7ff f806 	bl	8004644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005638:	4b5b      	ldr	r3, [pc, #364]	; (80057a8 <pvPortMalloc+0x180>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005640:	f000 f920 	bl	8005884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005644:	4b59      	ldr	r3, [pc, #356]	; (80057ac <pvPortMalloc+0x184>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4013      	ands	r3, r2
 800564c:	2b00      	cmp	r3, #0
 800564e:	f040 8093 	bne.w	8005778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01d      	beq.n	8005694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005658:	2208      	movs	r2, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b00      	cmp	r3, #0
 8005668:	d014      	beq.n	8005694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f023 0307 	bic.w	r3, r3, #7
 8005670:	3308      	adds	r3, #8
 8005672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <pvPortMalloc+0x6c>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	617b      	str	r3, [r7, #20]
}
 8005690:	bf00      	nop
 8005692:	e7fe      	b.n	8005692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d06e      	beq.n	8005778 <pvPortMalloc+0x150>
 800569a:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <pvPortMalloc+0x188>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d869      	bhi.n	8005778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056a4:	4b43      	ldr	r3, [pc, #268]	; (80057b4 <pvPortMalloc+0x18c>)
 80056a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056a8:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <pvPortMalloc+0x18c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056ae:	e004      	b.n	80056ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d903      	bls.n	80056cc <pvPortMalloc+0xa4>
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f1      	bne.n	80056b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <pvPortMalloc+0x180>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d050      	beq.n	8005778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2208      	movs	r2, #8
 80056dc:	4413      	add	r3, r2
 80056de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	2308      	movs	r3, #8
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d91f      	bls.n	8005738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4413      	add	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <pvPortMalloc+0xf8>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	613b      	str	r3, [r7, #16]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	1ad2      	subs	r2, r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005732:	69b8      	ldr	r0, [r7, #24]
 8005734:	f000 f908 	bl	8005948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005738:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <pvPortMalloc+0x188>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <pvPortMalloc+0x188>)
 8005744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005746:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <pvPortMalloc+0x188>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <pvPortMalloc+0x190>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d203      	bcs.n	800575a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005752:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <pvPortMalloc+0x188>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <pvPortMalloc+0x190>)
 8005758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	4b13      	ldr	r3, [pc, #76]	; (80057ac <pvPortMalloc+0x184>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	431a      	orrs	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <pvPortMalloc+0x194>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	4a11      	ldr	r2, [pc, #68]	; (80057bc <pvPortMalloc+0x194>)
 8005776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005778:	f7fe ff72 	bl	8004660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <pvPortMalloc+0x174>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60fb      	str	r3, [r7, #12]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <pvPortMalloc+0x172>
	return pvReturn;
 800579c:	69fb      	ldr	r3, [r7, #28]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3728      	adds	r7, #40	; 0x28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000dd0 	.word	0x20000dd0
 80057ac:	20000de4 	.word	0x20000de4
 80057b0:	20000dd4 	.word	0x20000dd4
 80057b4:	20000dc8 	.word	0x20000dc8
 80057b8:	20000dd8 	.word	0x20000dd8
 80057bc:	20000ddc 	.word	0x20000ddc

080057c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04d      	beq.n	800586e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057d2:	2308      	movs	r3, #8
 80057d4:	425b      	negs	r3, r3
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4413      	add	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	4b24      	ldr	r3, [pc, #144]	; (8005878 <vPortFree+0xb8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <vPortFree+0x44>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	60fb      	str	r3, [r7, #12]
}
 8005800:	bf00      	nop
 8005802:	e7fe      	b.n	8005802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <vPortFree+0x62>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60bb      	str	r3, [r7, #8]
}
 800581e:	bf00      	nop
 8005820:	e7fe      	b.n	8005820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <vPortFree+0xb8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01e      	beq.n	800586e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d11a      	bne.n	800586e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <vPortFree+0xb8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005848:	f7fe fefc 	bl	8004644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <vPortFree+0xbc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4413      	add	r3, r2
 8005856:	4a09      	ldr	r2, [pc, #36]	; (800587c <vPortFree+0xbc>)
 8005858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800585a:	6938      	ldr	r0, [r7, #16]
 800585c:	f000 f874 	bl	8005948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <vPortFree+0xc0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3301      	adds	r3, #1
 8005866:	4a06      	ldr	r2, [pc, #24]	; (8005880 <vPortFree+0xc0>)
 8005868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800586a:	f7fe fef9 	bl	8004660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800586e:	bf00      	nop
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000de4 	.word	0x20000de4
 800587c:	20000dd4 	.word	0x20000dd4
 8005880:	20000de0 	.word	0x20000de0

08005884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800588a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800588e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005890:	4b27      	ldr	r3, [pc, #156]	; (8005930 <prvHeapInit+0xac>)
 8005892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00c      	beq.n	80058b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3307      	adds	r3, #7
 80058a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0307 	bic.w	r3, r3, #7
 80058aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <prvHeapInit+0xac>)
 80058b4:	4413      	add	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058bc:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <prvHeapInit+0xb0>)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058c2:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <prvHeapInit+0xb0>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4413      	add	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058d0:	2208      	movs	r2, #8
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0307 	bic.w	r3, r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a15      	ldr	r2, [pc, #84]	; (8005938 <prvHeapInit+0xb4>)
 80058e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <prvHeapInit+0xb4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2200      	movs	r2, #0
 80058ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <prvHeapInit+0xb4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <prvHeapInit+0xb4>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4a0a      	ldr	r2, [pc, #40]	; (800593c <prvHeapInit+0xb8>)
 8005912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <prvHeapInit+0xbc>)
 800591a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <prvHeapInit+0xc0>)
 800591e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005922:	601a      	str	r2, [r3, #0]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	200001c8 	.word	0x200001c8
 8005934:	20000dc8 	.word	0x20000dc8
 8005938:	20000dd0 	.word	0x20000dd0
 800593c:	20000dd8 	.word	0x20000dd8
 8005940:	20000dd4 	.word	0x20000dd4
 8005944:	20000de4 	.word	0x20000de4

08005948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005950:	4b28      	ldr	r3, [pc, #160]	; (80059f4 <prvInsertBlockIntoFreeList+0xac>)
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e002      	b.n	800595c <prvInsertBlockIntoFreeList+0x14>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d8f7      	bhi.n	8005956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4413      	add	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d108      	bne.n	800598a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	441a      	add	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d118      	bne.n	80059d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <prvInsertBlockIntoFreeList+0xb0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d00d      	beq.n	80059c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	441a      	add	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e008      	b.n	80059d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <prvInsertBlockIntoFreeList+0xb0>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e003      	b.n	80059d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d002      	beq.n	80059e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20000dc8 	.word	0x20000dc8
 80059f8:	20000dd0 	.word	0x20000dd0

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4d0d      	ldr	r5, [pc, #52]	; (8005a34 <__libc_init_array+0x38>)
 8005a00:	4c0d      	ldr	r4, [pc, #52]	; (8005a38 <__libc_init_array+0x3c>)
 8005a02:	1b64      	subs	r4, r4, r5
 8005a04:	10a4      	asrs	r4, r4, #2
 8005a06:	2600      	movs	r6, #0
 8005a08:	42a6      	cmp	r6, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	4d0b      	ldr	r5, [pc, #44]	; (8005a3c <__libc_init_array+0x40>)
 8005a0e:	4c0c      	ldr	r4, [pc, #48]	; (8005a40 <__libc_init_array+0x44>)
 8005a10:	f000 f82e 	bl	8005a70 <_init>
 8005a14:	1b64      	subs	r4, r4, r5
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	2600      	movs	r6, #0
 8005a1a:	42a6      	cmp	r6, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a24:	4798      	blx	r3
 8005a26:	3601      	adds	r6, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2e:	4798      	blx	r3
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	08005b04 	.word	0x08005b04
 8005a38:	08005b04 	.word	0x08005b04
 8005a3c:	08005b04 	.word	0x08005b04
 8005a40:	08005b08 	.word	0x08005b08

08005a44 <memcpy>:
 8005a44:	440a      	add	r2, r1
 8005a46:	4291      	cmp	r1, r2
 8005a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a4c:	d100      	bne.n	8005a50 <memcpy+0xc>
 8005a4e:	4770      	bx	lr
 8005a50:	b510      	push	{r4, lr}
 8005a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a5a:	4291      	cmp	r1, r2
 8005a5c:	d1f9      	bne.n	8005a52 <memcpy+0xe>
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <_init>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	bf00      	nop
 8005a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a76:	bc08      	pop	{r3}
 8005a78:	469e      	mov	lr, r3
 8005a7a:	4770      	bx	lr

08005a7c <_fini>:
 8005a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7e:	bf00      	nop
 8005a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a82:	bc08      	pop	{r3}
 8005a84:	469e      	mov	lr, r3
 8005a86:	4770      	bx	lr
