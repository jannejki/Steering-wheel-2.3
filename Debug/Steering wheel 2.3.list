
Steering wheel 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005718  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005974  08005974  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005974  08005974  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005974  08005974  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800597c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  20000014  08005990  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de8  08005990  00020de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faeb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a71  00000000  00000000  0002fb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  000325a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00033510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003637  00000000  00000000  00034348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011026  00000000  00000000  0003797f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd987  00000000  00000000  000489a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010632c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e60  00000000  00000000  0010637c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	080058e0 	.word	0x080058e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	080058e0 	.word	0x080058e0

08000220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b092      	sub	sp, #72	; 0x48
 8000224:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000226:	f000 fb96 	bl	8000956 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022a:	f000 f867 	bl	80002fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022e:	f000 f8eb 	bl	8000408 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000232:	f000 f8a3 	bl	800037c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 8000236:	f000 f959 	bl	80004ec <lcd_init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of ECU_ACK */
	osSemaphoreDef(ECU_ACK);
 800023a:	2300      	movs	r3, #0
 800023c:	647b      	str	r3, [r7, #68]	; 0x44
	ECU_ACKHandle = osSemaphoreCreate(osSemaphore(ECU_ACK), 1);
 800023e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000242:	2101      	movs	r1, #1
 8000244:	4618      	mov	r0, r3
 8000246:	f003 f929 	bl	800349c <osSemaphoreCreate>
 800024a:	4603      	mov	r3, r0
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <main+0xb8>)
 800024e:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of ECUQueue */
	osMessageQDef(ECUQueue, 10, struct InputEvent);
 8000250:	4a22      	ldr	r2, [pc, #136]	; (80002dc <main+0xbc>)
 8000252:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000256:	e892 0003 	ldmia.w	r2, {r0, r1}
 800025a:	e883 0003 	stmia.w	r3, {r0, r1}
	ECUQueueHandle = osMessageCreate(osMessageQ(ECUQueue), NULL);
 800025e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f003 f937 	bl	80034d8 <osMessageCreate>
 800026a:	4603      	mov	r3, r0
 800026c:	4a1c      	ldr	r2, [pc, #112]	; (80002e0 <main+0xc0>)
 800026e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Watchdog */
	osThreadDef(Watchdog, StartWatchdog, osPriorityNormal, 0, 128);
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <main+0xc4>)
 8000272:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000276:	461d      	mov	r5, r3
 8000278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027c:	682b      	ldr	r3, [r5, #0]
 800027e:	6023      	str	r3, [r4, #0]
	WatchdogHandle = osThreadCreate(osThread(Watchdog), NULL);
 8000280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f8cd 	bl	8003426 <osThreadCreate>
 800028c:	4603      	mov	r3, r0
 800028e:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <main+0xc8>)
 8000290:	6013      	str	r3, [r2, #0]

	/* definition and creation of ECUTask */
	osThreadDef(ECUTask, StartECUTask, osPriorityNormal, 0, 128);
 8000292:	4b16      	ldr	r3, [pc, #88]	; (80002ec <main+0xcc>)
 8000294:	f107 0414 	add.w	r4, r7, #20
 8000298:	461d      	mov	r5, r3
 800029a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029e:	682b      	ldr	r3, [r5, #0]
 80002a0:	6023      	str	r3, [r4, #0]
	ECUTaskHandle = osThreadCreate(osThread(ECUTask), NULL);
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f003 f8bc 	bl	8003426 <osThreadCreate>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <main+0xd0>)
 80002b2:	6013      	str	r3, [r2, #0]

	/* definition and creation of InputTask */
	osThreadDef(InputTask, StartInputTask, osPriorityNormal, 0, 128);
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <main+0xd4>)
 80002b6:	463c      	mov	r4, r7
 80002b8:	461d      	mov	r5, r3
 80002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002be:	682b      	ldr	r3, [r5, #0]
 80002c0:	6023      	str	r3, [r4, #0]
	InputTaskHandle = osThreadCreate(osThread(InputTask), NULL);
 80002c2:	463b      	mov	r3, r7
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 f8ad 	bl	8003426 <osThreadCreate>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <main+0xd8>)
 80002d0:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002d2:	f003 f8a1 	bl	8003418 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002d6:	e7fe      	b.n	80002d6 <main+0xb6>
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08005918 	.word	0x08005918
 80002e0:	20000088 	.word	0x20000088
 80002e4:	08005920 	.word	0x08005920
 80002e8:	2000007c 	.word	0x2000007c
 80002ec:	08005934 	.word	0x08005934
 80002f0:	20000080 	.word	0x20000080
 80002f4:	08005948 	.word	0x08005948
 80002f8:	20000084 	.word	0x20000084

080002fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b094      	sub	sp, #80	; 0x50
 8000300:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2238      	movs	r2, #56	; 0x38
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f005 fae0 	bl	80058d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000322:	f002 f8d1 	bl	80024c8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2340      	movs	r3, #64	; 0x40
 8000332:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000334:	2300      	movs	r3, #0
 8000336:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000338:	f107 0318 	add.w	r3, r7, #24
 800033c:	4618      	mov	r0, r3
 800033e:	f002 f967 	bl	8002610 <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x50>
		Error_Handler();
 8000348:	f000 fa02 	bl	8000750 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
 800034e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000350:	2301      	movs	r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f002 fc6b 	bl	8002c40 <HAL_RCC_ClockConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x78>
		Error_Handler();
 8000370:	f000 f9ee 	bl	8000750 <Error_Handler>
	}
}
 8000374:	bf00      	nop
 8000376:	3750      	adds	r7, #80	; 0x50
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000380:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <MX_I2C1_Init+0x7c>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <MX_I2C1_Init+0x80>)
 8000384:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <MX_I2C1_Init+0x7c>)
 8000388:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <MX_I2C1_Init+0x84>)
 800038a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 64;
 800038c:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <MX_I2C1_Init+0x7c>)
 800038e:	2240      	movs	r2, #64	; 0x40
 8000390:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <MX_I2C1_Init+0x7c>)
 8000394:	2201      	movs	r2, #1
 8000396:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_I2C1_Init+0x7c>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800039e:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <MX_I2C1_Init+0x7c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_I2C1_Init+0x7c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_I2C1_Init+0x7c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_I2C1_Init+0x7c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80003b6:	4810      	ldr	r0, [pc, #64]	; (80003f8 <MX_I2C1_Init+0x7c>)
 80003b8:	f000 fe62 	bl	8001080 <HAL_I2C_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80003c2:	f000 f9c5 	bl	8000750 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80003c6:	2100      	movs	r1, #0
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <MX_I2C1_Init+0x7c>)
 80003ca:	f001 ffe5 	bl	8002398 <HAL_I2CEx_ConfigAnalogFilter>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80003d4:	f000 f9bc 	bl	8000750 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80003d8:	2100      	movs	r1, #0
 80003da:	4807      	ldr	r0, [pc, #28]	; (80003f8 <MX_I2C1_Init+0x7c>)
 80003dc:	f002 f827 	bl	800242e <HAL_I2CEx_ConfigDigitalFilter>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x6e>
		Error_Handler();
 80003e6:	f000 f9b3 	bl	8000750 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	HAL_I2C_Slave_Transmit_IT(&hi2c1, dataBuffer, BUFFER_SIZE); // Start listening for requests
 80003ea:	2202      	movs	r2, #2
 80003ec:	4905      	ldr	r1, [pc, #20]	; (8000404 <MX_I2C1_Init+0x88>)
 80003ee:	4802      	ldr	r0, [pc, #8]	; (80003f8 <MX_I2C1_Init+0x7c>)
 80003f0:	f000 fed6 	bl	80011a0 <HAL_I2C_Slave_Transmit_IT>
	/* USER CODE END I2C1_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000030 	.word	0x20000030
 80003fc:	40005400 	.word	0x40005400
 8000400:	00303d5b 	.word	0x00303d5b
 8000404:	20000000 	.word	0x20000000

08000408 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800040e:	f107 030c 	add.w	r3, r7, #12
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b31      	ldr	r3, [pc, #196]	; (80004e4 <MX_GPIO_Init+0xdc>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	4a30      	ldr	r2, [pc, #192]	; (80004e4 <MX_GPIO_Init+0xdc>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042a:	4b2e      	ldr	r3, [pc, #184]	; (80004e4 <MX_GPIO_Init+0xdc>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <MX_GPIO_Init+0xdc>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	4a2a      	ldr	r2, [pc, #168]	; (80004e4 <MX_GPIO_Init+0xdc>)
 800043c:	f043 0302 	orr.w	r3, r3, #2
 8000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000442:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <MX_GPIO_Init+0xdc>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin | DISP_RES_Pin | DISP_SA0_Pin,
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f000 fde0 	bl	800101c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000462:	4821      	ldr	r0, [pc, #132]	; (80004e8 <MX_GPIO_Init+0xe0>)
 8000464:	f000 fdda 	bl	800101c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : JOY_RIGHT_Pin BTN_RIGHT_UP_Pin BTN_RIGHT_DOWN_Pin */
	GPIO_InitStruct.Pin = JOY_RIGHT_Pin | BTN_RIGHT_UP_Pin | BTN_RIGHT_DOWN_Pin;
 8000468:	23c4      	movs	r3, #196	; 0xc4
 800046a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	4619      	mov	r1, r3
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047e:	f000 fc33 	bl	8000ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_LEFT_DOWN_Pin BTN_LEFT_UP_Pin JOY_DOWN_Pin JOY_PRESS_Pin
	 JOY_UP_Pin JOY_LEFT_Pin */
	GPIO_InitStruct.Pin = BTN_LEFT_DOWN_Pin | BTN_LEFT_UP_Pin | JOY_DOWN_Pin
 8000482:	f24c 0378 	movw	r3, #49272	; 0xc078
 8000486:	60fb      	str	r3, [r7, #12]
			| JOY_PRESS_Pin | JOY_UP_Pin | JOY_LEFT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	4619      	mov	r1, r3
 8000496:	4814      	ldr	r0, [pc, #80]	; (80004e8 <MX_GPIO_Init+0xe0>)
 8000498:	f000 fc26 	bl	8000ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DEBUG_LED_Pin DISP_RES_Pin DISP_SA0_Pin */
	GPIO_InitStruct.Pin = DEBUG_LED_Pin | DISP_RES_Pin | DISP_SA0_Pin;
 800049c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80004a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	4619      	mov	r1, r3
 80004b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b8:	f000 fc16 	bl	8000ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : INTERRUPT_LINE_Pin */
	GPIO_InitStruct.Pin = INTERRUPT_LINE_Pin;
 80004bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(INTERRUPT_LINE_GPIO_Port, &GPIO_InitStruct);
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_GPIO_Init+0xe0>)
 80004d6:	f000 fc07 	bl	8000ce8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80004da:	bf00      	nop
 80004dc:	3720      	adds	r7, #32
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	48000400 	.word	0x48000400

080004ec <lcd_init>:

/* USER CODE BEGIN 4 */
void lcd_init() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	// make sure that RES and SA0 pins are named correctly
	HAL_GPIO_WritePin(DISP_RES_GPIO_Port, DISP_RES_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f000 fd8f 	bl	800101c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_SA0_GPIO_Port, DISP_SA0_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f000 fd88 	bl	800101c <HAL_GPIO_WritePin>

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Transmit_IT(&hi2c1, dataBuffer, BUFFER_SIZE);
 8000518:	2202      	movs	r2, #2
 800051a:	490c      	ldr	r1, [pc, #48]	; (800054c <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 800051e:	f000 fe3f 	bl	80011a0 <HAL_I2C_Slave_Transmit_IT>
	HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <HAL_I2C_SlaveTxCpltCallback+0x44>)
 800052a:	f000 fd77 	bl	800101c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(ECU_ACKHandle, &xHigherPriorityTaskWoken);
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f107 020c 	add.w	r2, r7, #12
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fa4d 	bl	80039dc <xQueueGiveFromISR>
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20000030 	.word	0x20000030
 8000554:	48000400 	.word	0x48000400
 8000558:	2000008c 	.word	0x2000008c

0800055c <checkJoystick>:
		e.group = noGroup;
	}
	return e;
}

struct InputEvent checkJoystick() {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	struct InputEvent e;
	if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET) {
 8000562:	2120      	movs	r1, #32
 8000564:	483b      	ldr	r0, [pc, #236]	; (8000654 <checkJoystick+0xf8>)
 8000566:	f000 fd41 	bl	8000fec <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10c      	bne.n	800058a <checkJoystick+0x2e>
		while (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET) {
 8000570:	bf00      	nop
 8000572:	2120      	movs	r1, #32
 8000574:	4837      	ldr	r0, [pc, #220]	; (8000654 <checkJoystick+0xf8>)
 8000576:	f000 fd39 	bl	8000fec <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b01      	cmp	r3, #1
 800057e:	d0f8      	beq.n	8000572 <checkJoystick+0x16>
		}
		e.button = 0x01;
 8000580:	2301      	movs	r3, #1
 8000582:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 8000584:	2301      	movs	r3, #1
 8000586:	703b      	strb	r3, [r7, #0]
 8000588:	e057      	b.n	800063a <checkJoystick+0xde>
	} else if (HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin)
 800058a:	2104      	movs	r1, #4
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f000 fd2c 	bl	8000fec <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b01      	cmp	r3, #1
 8000598:	d10d      	bne.n	80005b6 <checkJoystick+0x5a>
			== GPIO_PIN_SET) {
		while (HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin)
 800059a:	bf00      	nop
 800059c:	2104      	movs	r1, #4
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f000 fd23 	bl	8000fec <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d0f7      	beq.n	800059c <checkJoystick+0x40>
				== GPIO_PIN_SET) {
		}
		e.button = 0x02;
 80005ac:	2302      	movs	r3, #2
 80005ae:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 80005b0:	2301      	movs	r3, #1
 80005b2:	703b      	strb	r3, [r7, #0]
 80005b4:	e041      	b.n	800063a <checkJoystick+0xde>
	} else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)
 80005b6:	2108      	movs	r1, #8
 80005b8:	4826      	ldr	r0, [pc, #152]	; (8000654 <checkJoystick+0xf8>)
 80005ba:	f000 fd17 	bl	8000fec <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d10c      	bne.n	80005de <checkJoystick+0x82>
			== GPIO_PIN_SET) {
		while (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)
 80005c4:	bf00      	nop
 80005c6:	2108      	movs	r1, #8
 80005c8:	4822      	ldr	r0, [pc, #136]	; (8000654 <checkJoystick+0xf8>)
 80005ca:	f000 fd0f 	bl	8000fec <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d0f8      	beq.n	80005c6 <checkJoystick+0x6a>
				== GPIO_PIN_SET) {
		}
		e.button = 0x03;
 80005d4:	2303      	movs	r3, #3
 80005d6:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 80005d8:	2301      	movs	r3, #1
 80005da:	703b      	strb	r3, [r7, #0]
 80005dc:	e02d      	b.n	800063a <checkJoystick+0xde>
	} else if (HAL_GPIO_ReadPin(JOY_LEFT_GPIO_Port, BTN_LEFT_UP_Pin)
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	481c      	ldr	r0, [pc, #112]	; (8000654 <checkJoystick+0xf8>)
 80005e4:	f000 fd02 	bl	8000fec <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10d      	bne.n	800060a <checkJoystick+0xae>
			== GPIO_PIN_SET) {
		while (HAL_GPIO_ReadPin(JOY_LEFT_GPIO_Port, BTN_LEFT_UP_Pin)
 80005ee:	bf00      	nop
 80005f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f4:	4817      	ldr	r0, [pc, #92]	; (8000654 <checkJoystick+0xf8>)
 80005f6:	f000 fcf9 	bl	8000fec <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d0f7      	beq.n	80005f0 <checkJoystick+0x94>
				== GPIO_PIN_SET) {
		}
		e.button = 0x04;
 8000600:	2304      	movs	r3, #4
 8000602:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 8000604:	2301      	movs	r3, #1
 8000606:	703b      	strb	r3, [r7, #0]
 8000608:	e017      	b.n	800063a <checkJoystick+0xde>
	} else if (HAL_GPIO_ReadPin(JOY_PRESS_GPIO_Port, JOY_PRESS_Pin)
 800060a:	2110      	movs	r1, #16
 800060c:	4811      	ldr	r0, [pc, #68]	; (8000654 <checkJoystick+0xf8>)
 800060e:	f000 fced 	bl	8000fec <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10c      	bne.n	8000632 <checkJoystick+0xd6>
			== GPIO_PIN_SET) {
		while (HAL_GPIO_ReadPin(JOY_PRESS_GPIO_Port, JOY_PRESS_Pin)
 8000618:	bf00      	nop
 800061a:	2110      	movs	r1, #16
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <checkJoystick+0xf8>)
 800061e:	f000 fce5 	bl	8000fec <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d0f8      	beq.n	800061a <checkJoystick+0xbe>
				== GPIO_PIN_SET) {
		}
		e.button = 0x05;
 8000628:	2305      	movs	r3, #5
 800062a:	707b      	strb	r3, [r7, #1]
		e.group = JOY;
 800062c:	2301      	movs	r3, #1
 800062e:	703b      	strb	r3, [r7, #0]
 8000630:	e003      	b.n	800063a <checkJoystick+0xde>
	} else {
		e.button = 0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	707b      	strb	r3, [r7, #1]
		e.group = noGroup;
 8000636:	2300      	movs	r3, #0
 8000638:	703b      	strb	r3, [r7, #0]
	}
	return e;
 800063a:	883b      	ldrh	r3, [r7, #0]
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	2300      	movs	r3, #0
 8000640:	793a      	ldrb	r2, [r7, #4]
 8000642:	f362 0307 	bfi	r3, r2, #0, #8
 8000646:	797a      	ldrb	r2, [r7, #5]
 8000648:	f362 230f 	bfi	r3, r2, #8, #8
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	48000400 	.word	0x48000400

08000658 <StartWatchdog>:
 * @brief  Function implementing the Watchdog thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdog */
void StartWatchdog(void const *argument) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	for (;;) {
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f000 fcf0 	bl	800104c <HAL_GPIO_TogglePin>
		if (0 < uxQueueMessagesWaiting(ECUQueueHandle)) {
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <StartWatchdog+0x38>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fc2d 	bl	8003ed0 <uxQueueMessagesWaiting>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <StartWatchdog+0x2e>
			osDelay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f002 fef8 	bl	8003474 <osDelay>
 8000684:	e7ec      	b.n	8000660 <StartWatchdog+0x8>
		} else {
			osDelay(200);
 8000686:	20c8      	movs	r0, #200	; 0xc8
 8000688:	f002 fef4 	bl	8003474 <osDelay>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800068c:	e7e8      	b.n	8000660 <StartWatchdog+0x8>
 800068e:	bf00      	nop
 8000690:	20000088 	.word	0x20000088

08000694 <StartECUTask>:
 * @brief Function implementing the ECUTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartECUTask */
void StartECUTask(void const *argument) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartECUTask */
	struct InputEvent e;
	BaseType_t ecuACK;
	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(ECUQueueHandle, &(e), (TickType_t) 10) == pdPASS) {
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <StartECUTask+0x70>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f107 0108 	add.w	r1, r7, #8
 80006a4:	220a      	movs	r2, #10
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fa26 	bl	8003af8 <xQueueReceive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d11d      	bne.n	80006ee <StartECUTask+0x5a>
			dataBuffer[0] = e.group;
 80006b2:	7a3a      	ldrb	r2, [r7, #8]
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <StartECUTask+0x74>)
 80006b6:	701a      	strb	r2, [r3, #0]
			dataBuffer[1] = e.button;
 80006b8:	7a7a      	ldrb	r2, [r7, #9]
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <StartECUTask+0x74>)
 80006bc:	705a      	strb	r2, [r3, #1]

			HAL_GPIO_WritePin(INTERRUPT_LINE_GPIO_Port, INTERRUPT_LINE_Pin,
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <StartECUTask+0x78>)
 80006c6:	f000 fca9 	bl	800101c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
			ecuACK = xSemaphoreTake(ECU_ACKHandle, 10000);
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <StartECUTask+0x7c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 faf0 	bl	8003cb8 <xQueueSemaphoreTake>
 80006d8:	60f8      	str	r0, [r7, #12]

			if (ecuACK == pdFALSE) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10c      	bne.n	80006fa <StartECUTask+0x66>
				xQueueReset(ECUQueueHandle);
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <StartECUTask+0x70>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 ffbc 	bl	8003664 <xQueueGenericReset>
 80006ec:	e005      	b.n	80006fa <StartECUTask+0x66>
			}

		} else {
			dataBuffer[0] = 0x00;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <StartECUTask+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
			dataBuffer[1] = 0x00;
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <StartECUTask+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	705a      	strb	r2, [r3, #1]
		}
		osDelay(200);
 80006fa:	20c8      	movs	r0, #200	; 0xc8
 80006fc:	f002 feba 	bl	8003474 <osDelay>
		if (xQueueReceive(ECUQueueHandle, &(e), (TickType_t) 10) == pdPASS) {
 8000700:	e7cc      	b.n	800069c <StartECUTask+0x8>
 8000702:	bf00      	nop
 8000704:	20000088 	.word	0x20000088
 8000708:	20000000 	.word	0x20000000
 800070c:	48000400 	.word	0x48000400
 8000710:	2000008c 	.word	0x2000008c

08000714 <StartInputTask>:
 * @brief Function implementing the InputTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInputTask */
void StartInputTask(void const *argument) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartInputTask */
	struct InputEvent input;
	input.group = 0x00;
 800071c:	2300      	movs	r3, #0
 800071e:	733b      	strb	r3, [r7, #12]
	input.button = 0x00;
 8000720:	2300      	movs	r3, #0
 8000722:	737b      	strb	r3, [r7, #13]

	/* Infinite loop */
	for (;;) {

		input = checkJoystick();
 8000724:	f7ff ff1a 	bl	800055c <checkJoystick>
 8000728:	4603      	mov	r3, r0
 800072a:	81bb      	strh	r3, [r7, #12]
		if (input.group != noGroup) {
 800072c:	7b3b      	ldrb	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d007      	beq.n	8000742 <StartInputTask+0x2e>
			xQueueSend(ECUQueueHandle, (void* ) &input, (TickType_t ) 0);
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <StartInputTask+0x38>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	f107 010c 	add.w	r1, r7, #12
 800073a:	2300      	movs	r3, #0
 800073c:	2200      	movs	r2, #0
 800073e:	f003 f84f 	bl	80037e0 <xQueueGenericSend>
		}
		osDelay(50);
 8000742:	2032      	movs	r0, #50	; 0x32
 8000744:	f002 fe96 	bl	8003474 <osDelay>
		input = checkJoystick();
 8000748:	e7ec      	b.n	8000724 <StartInputTask+0x10>
 800074a:	bf00      	nop
 800074c:	20000088 	.word	0x20000088

08000750 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_MspInit+0x4c>)
 8000764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <HAL_MspInit+0x4c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6613      	str	r3, [r2, #96]	; 0x60
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_MspInit+0x4c>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_MspInit+0x4c>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6593      	str	r3, [r2, #88]	; 0x58
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_MspInit+0x4c>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	210f      	movs	r1, #15
 8000796:	f06f 0001 	mvn.w	r0, #1
 800079a:	f000 fa0a 	bl	8000bb2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09c      	sub	sp, #112	; 0x70
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	2244      	movs	r2, #68	; 0x44
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f005 f87f 	bl	80058d0 <memset>
  if(hi2c->Instance==I2C1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a2d      	ldr	r2, [pc, #180]	; (800088c <HAL_I2C_MspInit+0xe0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d153      	bne.n	8000884 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fc0d 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007f4:	f7ff ffac 	bl	8000750 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	4a24      	ldr	r2, [pc, #144]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800082c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082e:	2312      	movs	r3, #18
 8000830:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083a:	2304      	movs	r3, #4
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f000 fa4e 	bl	8000ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000850:	2312      	movs	r3, #18
 8000852:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085c:	2304      	movs	r3, #4
 800085e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000864:	4619      	mov	r1, r3
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <HAL_I2C_MspInit+0xe8>)
 8000868:	f000 fa3e 	bl	8000ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 800086e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 8000872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000876:	6593      	str	r3, [r2, #88]	; 0x58
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_I2C_MspInit+0xe4>)
 800087a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000884:	bf00      	nop
 8000886:	3770      	adds	r7, #112	; 0x70
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40005400 	.word	0x40005400
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f898 	bl	80009fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008cc:	f004 f972 	bl	8004bb4 <xTaskGetSchedulerState>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d001      	beq.n	80008da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008d6:	f004 fd4f 	bl	8005378 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SystemInit+0x20>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <SystemInit+0x20>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0b      	ldr	r4, [pc, #44]	; (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092e:	f7ff ffd7 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000932:	f004 ff9b 	bl	800586c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000936:	f7ff fc73 	bl	8000220 <main>

0800093a <LoopForever>:

LoopForever:
    b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000948:	0800597c 	.word	0x0800597c
  ldr r2, =_sbss
 800094c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000950:	20000de8 	.word	0x20000de8

08000954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>

08000956 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800095c:	2300      	movs	r3, #0
 800095e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f91b 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000966:	200f      	movs	r0, #15
 8000968:	f000 f80e 	bl	8000988 <HAL_InitTick>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	71fb      	strb	r3, [r7, #7]
 8000976:	e001      	b.n	800097c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000978:	f7ff fef0 	bl	800075c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800097c:	79fb      	ldrb	r3, [r7, #7]

}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_InitTick+0x68>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d022      	beq.n	80009e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_InitTick+0x6c>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_InitTick+0x68>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80009ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f918 	bl	8000be6 <HAL_SYSTICK_Config>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10f      	bne.n	80009dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	d809      	bhi.n	80009d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c2:	2200      	movs	r2, #0
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ca:	f000 f8f2 	bl	8000bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_InitTick+0x70>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e007      	b.n	80009e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e004      	b.n	80009e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e001      	b.n	80009e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000008 	.word	0x20000008

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x20>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <HAL_IncTick+0x1c>)
 8000a0c:	6013      	str	r3, [r2, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20000090 	.word	0x20000090
 8000a1c:	2000000c 	.word	0x2000000c

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000090 	.word	0x20000090

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff47 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc0:	f7ff ff5e 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff ff90 	bl	8000af0 <NVIC_EncodePriority>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff5f 	bl	8000a9c <__NVIC_SetPriority>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffb2 	bl	8000b58 <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d00d      	beq.n	8000c32 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2204      	movs	r2, #4
 8000c1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e047      	b.n	8000cc2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 020e 	bic.w	r2, r2, #14
 8000c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f003 021f 	and.w	r2, r3, #31
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00c      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000ca0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	4798      	blx	r3
    }
  }
  return status;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cf6:	e15a      	b.n	8000fae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 814c 	beq.w	8000fa8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d005      	beq.n	8000d28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d130      	bne.n	8000d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d017      	beq.n	8000dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d123      	bne.n	8000e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	6939      	ldr	r1, [r7, #16]
 8000e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0203 	and.w	r2, r3, #3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 80a6 	beq.w	8000fa8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5c:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <HAL_GPIO_Init+0x2e4>)
 8000e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e60:	4a5a      	ldr	r2, [pc, #360]	; (8000fcc <HAL_GPIO_Init+0x2e4>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6613      	str	r3, [r2, #96]	; 0x60
 8000e68:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <HAL_GPIO_Init+0x2e4>)
 8000e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e74:	4a56      	ldr	r2, [pc, #344]	; (8000fd0 <HAL_GPIO_Init+0x2e8>)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e9e:	d01f      	beq.n	8000ee0 <HAL_GPIO_Init+0x1f8>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4c      	ldr	r2, [pc, #304]	; (8000fd4 <HAL_GPIO_Init+0x2ec>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d019      	beq.n	8000edc <HAL_GPIO_Init+0x1f4>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d013      	beq.n	8000ed8 <HAL_GPIO_Init+0x1f0>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a4a      	ldr	r2, [pc, #296]	; (8000fdc <HAL_GPIO_Init+0x2f4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d00d      	beq.n	8000ed4 <HAL_GPIO_Init+0x1ec>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <HAL_GPIO_Init+0x2f8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d007      	beq.n	8000ed0 <HAL_GPIO_Init+0x1e8>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <HAL_GPIO_Init+0x2fc>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d101      	bne.n	8000ecc <HAL_GPIO_Init+0x1e4>
 8000ec8:	2305      	movs	r3, #5
 8000eca:	e00a      	b.n	8000ee2 <HAL_GPIO_Init+0x1fa>
 8000ecc:	2306      	movs	r3, #6
 8000ece:	e008      	b.n	8000ee2 <HAL_GPIO_Init+0x1fa>
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	e006      	b.n	8000ee2 <HAL_GPIO_Init+0x1fa>
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e004      	b.n	8000ee2 <HAL_GPIO_Init+0x1fa>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0x1fa>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <HAL_GPIO_Init+0x1fa>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	f002 0203 	and.w	r2, r2, #3
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	4093      	lsls	r3, r2
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef2:	4937      	ldr	r1, [pc, #220]	; (8000fd0 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f00:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f24:	4a30      	ldr	r2, [pc, #192]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f4e:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fa2:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f47f ae9d 	bne.w	8000cf8 <HAL_GPIO_Init+0x10>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	48000c00 	.word	0x48000c00
 8000fe0:	48001000 	.word	0x48001000
 8000fe4:	48001400 	.word	0x48001400
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e001      	b.n	800100e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001038:	e002      	b.n	8001040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43d9      	mvns	r1, r3
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	400b      	ands	r3, r1
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e081      	b.n	8001196 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fb80 	bl	80007ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2224      	movs	r2, #36	; 0x24
 80010b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0201 	bic.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d107      	bne.n	80010fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	e006      	b.n	8001108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d104      	bne.n	800111a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001118:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800112c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800113c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69d9      	ldr	r1, [r3, #28]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2220      	movs	r2, #32
 8001182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	4613      	mov	r3, r2
 80011ac:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d139      	bne.n	800122e <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_I2C_Slave_Transmit_IT+0x28>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e033      	b.n	8001230 <HAL_I2C_Slave_Transmit_IT+0x90>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2221      	movs	r2, #33	; 0x21
 80011d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2220      	movs	r2, #32
 80011dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011f4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	88fa      	ldrh	r2, [r7, #6]
 8001200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001206:	b29a      	uxth	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_I2C_Slave_Transmit_IT+0x98>)
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_I2C_Slave_Transmit_IT+0x9c>)
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001220:	f248 0101 	movw	r1, #32769	; 0x8001
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 fff5 	bl	8002214 <I2C_Enable_IRQ>

    return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800122e:	2302      	movs	r3, #2
  }
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	ffff0000 	.word	0xffff0000
 800123c:	080012fd 	.word	0x080012fd

08001240 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
 8001288:	4613      	mov	r3, r2
 800128a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <I2C_Slave_ISR_IT+0x24>
 800131c:	2302      	movs	r3, #2
 800131e:	e0ec      	b.n	80014fa <I2C_Slave_ISR_IT+0x1fe>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d009      	beq.n	8001348 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001340:	6939      	ldr	r1, [r7, #16]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fc9a 	bl	8001c7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d04d      	beq.n	80013f0 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800135c:	2b00      	cmp	r3, #0
 800135e:	d047      	beq.n	80013f0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001364:	b29b      	uxth	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d128      	bne.n	80013bc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b28      	cmp	r3, #40	; 0x28
 8001374:	d108      	bne.n	8001388 <I2C_Slave_ISR_IT+0x8c>
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800137c:	d104      	bne.n	8001388 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 fd85 	bl	8001e90 <I2C_ITListenCplt>
 8001386:	e032      	b.n	80013ee <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b29      	cmp	r3, #41	; 0x29
 8001392:	d10e      	bne.n	80013b2 <I2C_Slave_ISR_IT+0xb6>
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800139a:	d00a      	beq.n	80013b2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2210      	movs	r2, #16
 80013a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 fec0 	bl	800212a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fb3d 	bl	8001a2a <I2C_ITSlaveSeqCplt>
 80013b0:	e01d      	b.n	80013ee <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2210      	movs	r2, #16
 80013b8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80013ba:	e096      	b.n	80014ea <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2210      	movs	r2, #16
 80013c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f043 0204 	orr.w	r2, r3, #4
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <I2C_Slave_ISR_IT+0xe4>
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	f040 8085 	bne.w	80014ea <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	4619      	mov	r1, r3
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fda8 	bl	8001f3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80013ec:	e07d      	b.n	80014ea <I2C_Slave_ISR_IT+0x1ee>
 80013ee:	e07c      	b.n	80014ea <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d030      	beq.n	800145e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001404:	2b00      	cmp	r3, #0
 8001406:	d02a      	beq.n	800145e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d018      	beq.n	8001444 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142e:	3b01      	subs	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143a:	b29b      	uxth	r3, r3
 800143c:	3b01      	subs	r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d14f      	bne.n	80014ee <I2C_Slave_ISR_IT+0x1f2>
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001454:	d04b      	beq.n	80014ee <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 fae7 	bl	8001a2a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800145c:	e047      	b.n	80014ee <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00a      	beq.n	8001480 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001476:	6939      	ldr	r1, [r7, #16]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 fa15 	bl	80018a8 <I2C_ITAddrCplt>
 800147e:	e037      	b.n	80014f0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d031      	beq.n	80014f0 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001494:	2b00      	cmp	r3, #0
 8001496:	d02b      	beq.n	80014f0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d018      	beq.n	80014d4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80014d2:	e00d      	b.n	80014f0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014da:	d002      	beq.n	80014e2 <I2C_Slave_ISR_IT+0x1e6>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 faa1 	bl	8001a2a <I2C_ITSlaveSeqCplt>
 80014e8:	e002      	b.n	80014f0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80014ea:	bf00      	nop
 80014ec:	e000      	b.n	80014f0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80014ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b088      	sub	sp, #32
 8001506:	af02      	add	r7, sp, #8
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <I2C_Master_ISR_DMA+0x1a>
 8001518:	2302      	movs	r3, #2
 800151a:	e0e1      	b.n	80016e0 <I2C_Master_ISR_DMA+0x1de>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d017      	beq.n	8001560 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001538:	2b00      	cmp	r3, #0
 800153a:	d011      	beq.n	8001560 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2210      	movs	r2, #16
 8001542:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	f043 0204 	orr.w	r2, r3, #4
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001550:	2120      	movs	r1, #32
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fe5e 	bl	8002214 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fde6 	bl	800212a <I2C_Flush_TXDR>
 800155e:	e0ba      	b.n	80016d6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	09db      	lsrs	r3, r3, #7
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d072      	beq.n	8001652 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	099b      	lsrs	r3, r3, #6
 8001570:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001574:	2b00      	cmp	r3, #0
 8001576:	d06c      	beq.n	8001652 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001586:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d04e      	beq.n	8001630 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	b29b      	uxth	r3, r3
 800159a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800159e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2bff      	cmp	r3, #255	; 0xff
 80015a8:	d906      	bls.n	80015b8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	22ff      	movs	r2, #255	; 0xff
 80015ae:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80015b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e010      	b.n	80015da <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015ca:	d003      	beq.n	80015d4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e002      	b.n	80015da <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80015d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	8a79      	ldrh	r1, [r7, #18]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 fde1 	bl	80021b0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b22      	cmp	r3, #34	; 0x22
 800160a:	d108      	bne.n	800161e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800161a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800161c:	e05b      	b.n	80016d6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800162c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800162e:	e052      	b.n	80016d6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800163e:	d003      	beq.n	8001648 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f9b5 	bl	80019b0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001646:	e046      	b.n	80016d6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fc76 	bl	8001f3c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001650:	e041      	b.n	80016d6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d029      	beq.n	80016b2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001666:	2b00      	cmp	r3, #0
 8001668:	d023      	beq.n	80016b2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166e:	b29b      	uxth	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d119      	bne.n	80016a8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001682:	d027      	beq.n	80016d4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800168c:	d108      	bne.n	80016a0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800169c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800169e:	e019      	b.n	80016d4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f985 	bl	80019b0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80016a6:	e015      	b.n	80016d4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80016a8:	2140      	movs	r1, #64	; 0x40
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fc46 	bl	8001f3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80016b0:	e010      	b.n	80016d4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	095b      	lsrs	r3, r3, #5
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	095b      	lsrs	r3, r3, #5
 80016c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 fa0b 	bl	8001ae8 <I2C_ITMasterCplt>
 80016d2:	e000      	b.n	80016d6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80016d4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <I2C_Slave_ISR_DMA+0x24>
 8001708:	2302      	movs	r3, #2
 800170a:	e0c9      	b.n	80018a0 <I2C_Slave_ISR_DMA+0x1b8>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 faa4 	bl	8001c7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 809a 	beq.w	8001876 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8093 	beq.w	8001876 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	0b9b      	lsrs	r3, r3, #14
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0bdb      	lsrs	r3, r3, #15
 8001760:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001764:	2b00      	cmp	r3, #0
 8001766:	d07f      	beq.n	8001868 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00d      	beq.n	800178c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	0bdb      	lsrs	r3, r3, #15
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001788:	2301      	movs	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00d      	beq.n	80017b0 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	0b9b      	lsrs	r3, r3, #14
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d128      	bne.n	8001808 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b28      	cmp	r3, #40	; 0x28
 80017c0:	d108      	bne.n	80017d4 <I2C_Slave_ISR_DMA+0xec>
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017c8:	d104      	bne.n	80017d4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fb5f 	bl	8001e90 <I2C_ITListenCplt>
 80017d2:	e048      	b.n	8001866 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b29      	cmp	r3, #41	; 0x29
 80017de:	d10e      	bne.n	80017fe <I2C_Slave_ISR_DMA+0x116>
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017e6:	d00a      	beq.n	80017fe <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2210      	movs	r2, #16
 80017ee:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fc9a 	bl	800212a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f917 	bl	8001a2a <I2C_ITSlaveSeqCplt>
 80017fc:	e033      	b.n	8001866 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2210      	movs	r2, #16
 8001804:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001806:	e034      	b.n	8001872 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2210      	movs	r2, #16
 800180e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	f043 0204 	orr.w	r2, r3, #4
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001822:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <I2C_Slave_ISR_DMA+0x14a>
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d11f      	bne.n	8001872 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	2b21      	cmp	r3, #33	; 0x21
 8001836:	d002      	beq.n	800183e <I2C_Slave_ISR_DMA+0x156>
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b29      	cmp	r3, #41	; 0x29
 800183c:	d103      	bne.n	8001846 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2221      	movs	r2, #33	; 0x21
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
 8001844:	e008      	b.n	8001858 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b22      	cmp	r3, #34	; 0x22
 800184a:	d002      	beq.n	8001852 <I2C_Slave_ISR_DMA+0x16a>
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b2a      	cmp	r3, #42	; 0x2a
 8001850:	d102      	bne.n	8001858 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2222      	movs	r2, #34	; 0x22
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	4619      	mov	r1, r3
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 fb6c 	bl	8001f3c <I2C_ITError>
      if (treatdmanack == 1U)
 8001864:	e005      	b.n	8001872 <I2C_Slave_ISR_DMA+0x18a>
 8001866:	e004      	b.n	8001872 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2210      	movs	r2, #16
 800186e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001870:	e011      	b.n	8001896 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001872:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001874:	e00f      	b.n	8001896 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f809 	bl	80018a8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80018be:	2b28      	cmp	r3, #40	; 0x28
 80018c0:	d16a      	bne.n	8001998 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80018e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80018fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d138      	bne.n	8001978 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	09db      	lsrs	r3, r3, #7
 800190a:	b29a      	uxth	r2, r3
 800190c:	89bb      	ldrh	r3, [r7, #12]
 800190e:	4053      	eors	r3, r2
 8001910:	b29b      	uxth	r3, r3
 8001912:	f003 0306 	and.w	r3, r3, #6
 8001916:	2b00      	cmp	r3, #0
 8001918:	d11c      	bne.n	8001954 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192c:	2b02      	cmp	r3, #2
 800192e:	d13b      	bne.n	80019a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2208      	movs	r2, #8
 800193c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001946:	89ba      	ldrh	r2, [r7, #12]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fc95 	bl	800127c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001952:	e029      	b.n	80019a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001954:	893b      	ldrh	r3, [r7, #8]
 8001956:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fcbd 	bl	80022dc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800196a:	89ba      	ldrh	r2, [r7, #12]
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	4619      	mov	r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fc83 	bl	800127c <HAL_I2C_AddrCallback>
}
 8001976:	e017      	b.n	80019a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fcad 	bl	80022dc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800198a:	89ba      	ldrh	r2, [r7, #12]
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fc73 	bl	800127c <HAL_I2C_AddrCallback>
}
 8001996:	e007      	b.n	80019a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2208      	movs	r2, #8
 800199e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b21      	cmp	r3, #33	; 0x21
 80019ca:	d115      	bne.n	80019f8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2211      	movs	r2, #17
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019e0:	2101      	movs	r1, #1
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fc7a 	bl	80022dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff fc25 	bl	8001240 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80019f6:	e014      	b.n	8001a22 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2212      	movs	r2, #18
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fc64 	bl	80022dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fc19 	bl	8001254 <HAL_I2C_MasterRxCpltCallback>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	0b9b      	lsrs	r3, r3, #14
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e00d      	b.n	8001a7c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	0bdb      	lsrs	r3, r3, #15
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b29      	cmp	r3, #41	; 0x29
 8001a86:	d112      	bne.n	8001aae <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2228      	movs	r2, #40	; 0x28
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2221      	movs	r2, #33	; 0x21
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a96:	2101      	movs	r1, #1
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fc1f 	bl	80022dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fd32 	bl	8000510 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001aac:	e017      	b.n	8001ade <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ab8:	d111      	bne.n	8001ade <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2228      	movs	r2, #40	; 0x28
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2222      	movs	r2, #34	; 0x22
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ac8:	2102      	movs	r1, #2
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fc06 	bl	80022dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fbc5 	bl	8001268 <HAL_I2C_SlaveRxCpltCallback>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2220      	movs	r2, #32
 8001afc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b21      	cmp	r3, #33	; 0x21
 8001b08:	d107      	bne.n	8001b1a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fbe5 	bl	80022dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2211      	movs	r2, #17
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
 8001b18:	e00c      	b.n	8001b34 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b22      	cmp	r3, #34	; 0x22
 8001b24:	d106      	bne.n	8001b34 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b26:	2102      	movs	r1, #2
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fbd7 	bl	80022dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2212      	movs	r2, #18
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6859      	ldr	r1, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <I2C_ITMasterCplt+0x18c>)
 8001b40:	400b      	ands	r3, r1
 8001b42:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <I2C_ITMasterCplt+0x190>)
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f043 0204 	orr.w	r2, r3, #4
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b60      	cmp	r3, #96	; 0x60
 8001b7a:	d10b      	bne.n	8001b94 <I2C_ITMasterCplt+0xac>
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001b92:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fac8 	bl	800212a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b60      	cmp	r3, #96	; 0x60
 8001baa:	d002      	beq.n	8001bb2 <I2C_ITMasterCplt+0xca>
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f9bf 	bl	8001f3c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001bbe:	e054      	b.n	8001c6a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b21      	cmp	r3, #33	; 0x21
 8001bca:	d124      	bne.n	8001c16 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d10b      	bne.n	8001bfe <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fb58 	bl	80012ac <HAL_I2C_MemTxCpltCallback>
}
 8001bfc:	e035      	b.n	8001c6a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fb16 	bl	8001240 <HAL_I2C_MasterTxCpltCallback>
}
 8001c14:	e029      	b.n	8001c6a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b22      	cmp	r3, #34	; 0x22
 8001c20:	d123      	bne.n	8001c6a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d10b      	bne.n	8001c54 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fb37 	bl	80012c0 <HAL_I2C_MemRxCpltCallback>
}
 8001c52:	e00a      	b.n	8001c6a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff faf5 	bl	8001254 <HAL_I2C_MasterRxCpltCallback>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	fe00e800 	.word	0xfe00e800
 8001c78:	ffff0000 	.word	0xffff0000

08001c7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c98:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b21      	cmp	r3, #33	; 0x21
 8001ca6:	d002      	beq.n	8001cae <I2C_ITSlaveCplt+0x32>
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b29      	cmp	r3, #41	; 0x29
 8001cac:	d108      	bne.n	8001cc0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001cae:	f248 0101 	movw	r1, #32769	; 0x8001
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fb12 	bl	80022dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2221      	movs	r2, #33	; 0x21
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cbe:	e00d      	b.n	8001cdc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b22      	cmp	r3, #34	; 0x22
 8001cc4:	d002      	beq.n	8001ccc <I2C_ITSlaveCplt+0x50>
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8001cca:	d107      	bne.n	8001cdc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001ccc:	f248 0102 	movw	r1, #32770	; 0x8002
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fb03 	bl	80022dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2222      	movs	r2, #34	; 0x22
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <I2C_ITSlaveCplt+0x20c>)
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fa14 	bl	800212a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	0b9b      	lsrs	r3, r3, #14
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d013      	beq.n	8001d36 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d020      	beq.n	8001d68 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d34:	e018      	b.n	8001d68 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	0bdb      	lsrs	r3, r3, #15
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d012      	beq.n	8001d68 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00c      	beq.n	8001db6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f043 0204 	orr.w	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f8a7 	bl	8001f3c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b28      	cmp	r3, #40	; 0x28
 8001df8:	d141      	bne.n	8001e7e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001dfa:	6979      	ldr	r1, [r7, #20]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f847 	bl	8001e90 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e02:	e03c      	b.n	8001e7e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e0c:	d014      	beq.n	8001e38 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe0b 	bl	8001a2a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <I2C_ITSlaveCplt+0x210>)
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fa31 	bl	8001298 <HAL_I2C_ListenCpltCallback>
}
 8001e36:	e022      	b.n	8001e7e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b22      	cmp	r3, #34	; 0x22
 8001e42:	d10e      	bne.n	8001e62 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fa04 	bl	8001268 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e60:	e00d      	b.n	8001e7e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe fb49 	bl	8000510 <HAL_I2C_SlaveTxCpltCallback>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	fe00e800 	.word	0xfe00e800
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <I2C_ITListenCplt+0xa8>)
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d022      	beq.n	8001f0e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d012      	beq.n	8001f0e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f043 0204 	orr.w	r2, r3, #4
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f0e:	f248 0103 	movw	r1, #32771	; 0x8003
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f9e2 	bl	80022dc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff f9b5 	bl	8001298 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	ffff0000 	.word	0xffff0000

08001f3c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	; (80020d0 <I2C_ITError+0x194>)
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	2b28      	cmp	r3, #40	; 0x28
 8001f72:	d005      	beq.n	8001f80 <I2C_ITError+0x44>
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	2b29      	cmp	r3, #41	; 0x29
 8001f78:	d002      	beq.n	8001f80 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f7e:	d10b      	bne.n	8001f98 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f80:	2103      	movs	r1, #3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f9aa 	bl	80022dc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2228      	movs	r2, #40	; 0x28
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <I2C_ITError+0x198>)
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
 8001f96:	e011      	b.n	8001fbc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f98:	f248 0103 	movw	r1, #32771	; 0x8003
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f99d 	bl	80022dc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b60      	cmp	r3, #96	; 0x60
 8001fac:	d003      	beq.n	8001fb6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d039      	beq.n	800203e <I2C_ITError+0x102>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d002      	beq.n	8001fd6 <I2C_ITError+0x9a>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b21      	cmp	r3, #33	; 0x21
 8001fd4:	d133      	bne.n	800203e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fe4:	d107      	bne.n	8001ff6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ff4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe66 	bl	8000ccc <HAL_DMA_GetState>
 8002000:	4603      	mov	r3, r0
 8002002:	2b01      	cmp	r3, #1
 8002004:	d017      	beq.n	8002036 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	4a33      	ldr	r2, [pc, #204]	; (80020d8 <I2C_ITError+0x19c>)
 800200c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fdef 	bl	8000bfe <HAL_DMA_Abort_IT>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d04d      	beq.n	80020c2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002030:	4610      	mov	r0, r2
 8002032:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002034:	e045      	b.n	80020c2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f850 	bl	80020dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800203c:	e041      	b.n	80020c2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d039      	beq.n	80020ba <I2C_ITError+0x17e>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b12      	cmp	r3, #18
 800204a:	d002      	beq.n	8002052 <I2C_ITError+0x116>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b22      	cmp	r3, #34	; 0x22
 8002050:	d133      	bne.n	80020ba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800205c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002060:	d107      	bne.n	8002072 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002070:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fe28 	bl	8000ccc <HAL_DMA_GetState>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d017      	beq.n	80020b2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <I2C_ITError+0x19c>)
 8002088:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fdb1 	bl	8000bfe <HAL_DMA_Abort_IT>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d011      	beq.n	80020c6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020ac:	4610      	mov	r0, r2
 80020ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020b0:	e009      	b.n	80020c6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f812 	bl	80020dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020b8:	e005      	b.n	80020c6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f80e 	bl	80020dc <I2C_TreatErrorCallback>
  }
}
 80020c0:	e002      	b.n	80020c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020c2:	bf00      	nop
 80020c4:	e000      	b.n	80020c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020c6:	bf00      	nop
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	ffff0000 	.word	0xffff0000
 80020d4:	080012fd 	.word	0x080012fd
 80020d8:	08002173 	.word	0x08002173

080020dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b60      	cmp	r3, #96	; 0x60
 80020ee:	d10e      	bne.n	800210e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff f8ee 	bl	80012e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800210c:	e009      	b.n	8002122 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff f8d9 	bl	80012d4 <HAL_I2C_ErrorCallback>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d103      	bne.n	8002148 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d007      	beq.n	8002166 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	619a      	str	r2, [r3, #24]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	2200      	movs	r2, #0
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2200      	movs	r2, #0
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff ff9b 	bl	80020dc <I2C_TreatErrorCallback>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	817b      	strh	r3, [r7, #10]
 80021be:	4613      	mov	r3, r2
 80021c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021c2:	897b      	ldrh	r3, [r7, #10]
 80021c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021c8:	7a7b      	ldrb	r3, [r7, #9]
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021d0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	4313      	orrs	r3, r2
 80021da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021de:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <I2C_TransferConfig+0x60>)
 80021f0:	430b      	orrs	r3, r1
 80021f2:	43db      	mvns	r3, r3
 80021f4:	ea02 0103 	and.w	r1, r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	03ff63ff 	.word	0x03ff63ff

08002214 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <I2C_Enable_IRQ+0xc0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002232:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <I2C_Enable_IRQ+0xc4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d11d      	bne.n	8002274 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002238:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da03      	bge.n	8002248 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002246:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	2b10      	cmp	r3, #16
 800224c:	d103      	bne.n	8002256 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002254:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	2b20      	cmp	r3, #32
 800225a:	d103      	bne.n	8002264 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002262:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	d125      	bne.n	80022b6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002270:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002272:	e020      	b.n	80022b6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002278:	2b00      	cmp	r3, #0
 800227a:	da03      	bge.n	8002284 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002282:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002294:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80022a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d103      	bne.n	80022b6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	08001503 	.word	0x08001503
 80022d8:	080016e9 	.word	0x080016e9

080022dc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00f      	beq.n	8002316 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80022fc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800230a:	2b28      	cmp	r3, #40	; 0x28
 800230c:	d003      	beq.n	8002316 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002314:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00f      	beq.n	8002340 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002326:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002334:	2b28      	cmp	r3, #40	; 0x28
 8002336:	d003      	beq.n	8002340 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800233e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002344:	2b00      	cmp	r3, #0
 8002346:	da03      	bge.n	8002350 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800234e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	2b10      	cmp	r3, #16
 8002354:	d103      	bne.n	800235e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800235c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	2b20      	cmp	r3, #32
 8002362:	d103      	bne.n	800236c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f043 0320 	orr.w	r3, r3, #32
 800236a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d103      	bne.n	800237a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002378:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	43da      	mvns	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d138      	bne.n	8002420 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e032      	b.n	8002422 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	; 0x24
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b20      	cmp	r3, #32
 8002442:	d139      	bne.n	80024b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800244e:	2302      	movs	r3, #2
 8002450:	e033      	b.n	80024ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2224      	movs	r2, #36	; 0x24
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002480:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d141      	bne.n	800255a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e2:	d131      	bne.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024e4:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ea:	4a46      	ldr	r2, [pc, #280]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024fc:	4a41      	ldr	r2, [pc, #260]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002504:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2232      	movs	r2, #50	; 0x32
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	0c9b      	lsrs	r3, r3, #18
 8002516:	3301      	adds	r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251a:	e002      	b.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3b01      	subs	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252e:	d102      	bne.n	8002536 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f2      	bne.n	800251c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002536:	4b33      	ldr	r3, [pc, #204]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002542:	d158      	bne.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e057      	b.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	4a2d      	ldr	r2, [pc, #180]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002558:	e04d      	b.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002560:	d141      	bne.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800256e:	d131      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002576:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002588:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2232      	movs	r2, #50	; 0x32
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a6:	e002      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ba:	d102      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f2      	bne.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d112      	bne.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e011      	b.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025e4:	e007      	b.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40007000 	.word	0x40007000
 8002608:	20000004 	.word	0x20000004
 800260c:	431bde83 	.word	0x431bde83

08002610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e306      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d075      	beq.n	800271a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262e:	4b97      	ldr	r3, [pc, #604]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002638:	4b94      	ldr	r3, [pc, #592]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d102      	bne.n	800264e <HAL_RCC_OscConfig+0x3e>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d002      	beq.n	8002654 <HAL_RCC_OscConfig+0x44>
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d10b      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	4b8d      	ldr	r3, [pc, #564]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d05b      	beq.n	8002718 <HAL_RCC_OscConfig+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d157      	bne.n	8002718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e2e1      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x74>
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a84      	ldr	r2, [pc, #528]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e01d      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x98>
 800268e:	4b7f      	ldr	r3, [pc, #508]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a7e      	ldr	r2, [pc, #504]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b7c      	ldr	r3, [pc, #496]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7b      	ldr	r2, [pc, #492]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a74      	ldr	r2, [pc, #464]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe f9aa 	bl	8000a20 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe f9a6 	bl	8000a20 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e2a6      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0xc0>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe f996 	bl	8000a20 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe f992 	bl	8000a20 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e292      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270a:	4b60      	ldr	r3, [pc, #384]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0xe8>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d075      	beq.n	8002812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002726:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d102      	bne.n	8002746 <HAL_RCC_OscConfig+0x136>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d002      	beq.n	800274c <HAL_RCC_OscConfig+0x13c>
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d11f      	bne.n	800278c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x154>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e265      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	4946      	ldr	r1, [pc, #280]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002778:	4b45      	ldr	r3, [pc, #276]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe f903 	bl	8000988 <HAL_InitTick>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d043      	beq.n	8002810 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e251      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d023      	beq.n	80027dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002794:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a3c      	ldr	r2, [pc, #240]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe f93e 	bl	8000a20 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe f93a 	bl	8000a20 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e23a      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	492d      	ldr	r1, [pc, #180]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
 80027da:	e01a      	b.n	8002812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2a      	ldr	r2, [pc, #168]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 80027e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe f91a 	bl	8000a20 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f0:	f7fe f916 	bl	8000a20 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e216      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1e0>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d041      	beq.n	80028a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01c      	beq.n	8002860 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002826:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282c:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe f8f3 	bl	8000a20 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe f8ef 	bl	8000a20 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1ef      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ef      	beq.n	800283e <HAL_RCC_OscConfig+0x22e>
 800285e:	e020      	b.n	80028a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe f8d6 	bl	8000a20 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002876:	e00d      	b.n	8002894 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe f8d2 	bl	8000a20 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d906      	bls.n	8002894 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1d2      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002894:	4b8c      	ldr	r3, [pc, #560]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ea      	bne.n	8002878 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80a6 	beq.w	80029fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028b4:	4b84      	ldr	r3, [pc, #528]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2b4>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x2b6>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b7f      	ldr	r3, [pc, #508]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	4a7e      	ldr	r2, [pc, #504]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6593      	str	r3, [r2, #88]	; 0x58
 80028d6:	4b7c      	ldr	r3, [pc, #496]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e6:	4b79      	ldr	r3, [pc, #484]	; (8002acc <HAL_RCC_OscConfig+0x4bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x4bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x4bc>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7fe f88f 	bl	8000a20 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe f88b 	bl	8000a20 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e18b      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002918:	4b6c      	ldr	r3, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x4bc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d108      	bne.n	800293e <HAL_RCC_OscConfig+0x32e>
 800292c:	4b66      	ldr	r3, [pc, #408]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	4a65      	ldr	r2, [pc, #404]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293c:	e024      	b.n	8002988 <HAL_RCC_OscConfig+0x378>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b05      	cmp	r3, #5
 8002944:	d110      	bne.n	8002968 <HAL_RCC_OscConfig+0x358>
 8002946:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002956:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295c:	4a5a      	ldr	r2, [pc, #360]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002966:	e00f      	b.n	8002988 <HAL_RCC_OscConfig+0x378>
 8002968:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	4a56      	ldr	r2, [pc, #344]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d016      	beq.n	80029be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe f846 	bl	8000a20 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe f842 	bl	8000a20 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e140      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ae:	4b46      	ldr	r3, [pc, #280]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ed      	beq.n	8002998 <HAL_RCC_OscConfig+0x388>
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe f82f 	bl	8000a20 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe f82b 	bl	8000a20 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e129      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029dc:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ed      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d03c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a10:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a16:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fd fffe 	bl	8000a20 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a28:	f7fd fffa 	bl	8000a20 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0fa      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCC_OscConfig+0x418>
 8002a48:	e01b      	b.n	8002a82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fd ffe1 	bl	8000a20 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a62:	f7fd ffdd 	bl	8000a20 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0dd      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a74:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ef      	bne.n	8002a62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80d1 	beq.w	8002c2e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	f000 808b 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d15e      	bne.n	8002b60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_RCC_OscConfig+0x4b8>)
 8002aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fd ffb7 	bl	8000a20 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab4:	e00c      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fd ffb3 	bl	8000a20 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d905      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0b3      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ec      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002adc:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <HAL_RCC_OscConfig+0x62c>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6a11      	ldr	r1, [r2, #32]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aec:	3a01      	subs	r2, #1
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	4311      	orrs	r1, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002af6:	0212      	lsls	r2, r2, #8
 8002af8:	4311      	orrs	r1, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002afe:	0852      	lsrs	r2, r2, #1
 8002b00:	3a01      	subs	r2, #1
 8002b02:	0552      	lsls	r2, r2, #21
 8002b04:	4311      	orrs	r1, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b0a:	0852      	lsrs	r2, r2, #1
 8002b0c:	3a01      	subs	r2, #1
 8002b0e:	0652      	lsls	r2, r2, #25
 8002b10:	4311      	orrs	r1, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b16:	06d2      	lsls	r2, r2, #27
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	4947      	ldr	r1, [pc, #284]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b20:	4b45      	ldr	r3, [pc, #276]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a44      	ldr	r2, [pc, #272]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b2c:	4b42      	ldr	r3, [pc, #264]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a41      	ldr	r2, [pc, #260]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fd ff72 	bl	8000a20 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fd ff6e 	bl	8000a20 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e06e      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x530>
 8002b5e:	e066      	b.n	8002c2e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a34      	ldr	r2, [pc, #208]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b6c:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a31      	ldr	r2, [pc, #196]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b78:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a2e      	ldr	r2, [pc, #184]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002b7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fd ff4a 	bl	8000a20 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fd ff46 	bl	8000a20 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e046      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x580>
 8002bae:	e03e      	b.n	8002c2e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e039      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <HAL_RCC_OscConfig+0x628>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0203 	and.w	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d12c      	bne.n	8002c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d123      	bne.n	8002c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d11b      	bne.n	8002c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d113      	bne.n	8002c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	019f800c 	.word	0x019f800c

08002c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e11e      	b.n	8002e96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b91      	ldr	r3, [pc, #580]	; (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d910      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b8e      	ldr	r3, [pc, #568]	; (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 020f 	bic.w	r2, r3, #15
 8002c6e:	498c      	ldr	r1, [pc, #560]	; (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b8a      	ldr	r3, [pc, #552]	; (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e106      	b.n	8002e96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d073      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d129      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9c:	4b81      	ldr	r3, [pc, #516]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0f4      	b.n	8002e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002cac:	f000 f966 	bl	8002f7c <RCC_GetSysClockFreqFromPLLSource>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4a7c      	ldr	r2, [pc, #496]	; (8002ea8 <HAL_RCC_ClockConfig+0x268>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d93f      	bls.n	8002d3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cba:	4b7a      	ldr	r3, [pc, #488]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d033      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d12f      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cda:	4b72      	ldr	r3, [pc, #456]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce2:	4a70      	ldr	r2, [pc, #448]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e024      	b.n	8002d3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d109      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0c6      	b.n	8002e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d08:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0be      	b.n	8002e96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d18:	f000 f8ce 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4a61      	ldr	r2, [pc, #388]	; (8002ea8 <HAL_RCC_ClockConfig+0x268>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d909      	bls.n	8002d3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4957      	ldr	r1, [pc, #348]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fd fe68 	bl	8000a20 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fd fe64 	bl	8000a20 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e095      	b.n	8002e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d023      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d94:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a42      	ldr	r2, [pc, #264]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002dac:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002db4:	4a3b      	ldr	r2, [pc, #236]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4936      	ldr	r1, [pc, #216]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dd6:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de2:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d21d      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 020f 	bic.w	r2, r3, #15
 8002df8:	4929      	ldr	r1, [pc, #164]	; (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e00:	f7fd fe0e 	bl	8000a20 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fd fe0a 	bl	8000a20 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e03b      	b.n	8002e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1ed      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4917      	ldr	r1, [pc, #92]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490f      	ldr	r1, [pc, #60]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e6a:	f000 f825 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490c      	ldr	r1, [pc, #48]	; (8002eac <HAL_RCC_ClockConfig+0x26c>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x270>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_RCC_ClockConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fd7a 	bl	8000988 <HAL_InitTick>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	04c4b400 	.word	0x04c4b400
 8002eac:	08005964 	.word	0x08005964
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	20000008 	.word	0x20000008

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d102      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e047      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002edc:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e03e      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d136      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3301      	adds	r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d10c      	bne.n	8002f26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f0c:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f16:	68d2      	ldr	r2, [r2, #12]
 8002f18:	0a12      	lsrs	r2, r2, #8
 8002f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	617b      	str	r3, [r7, #20]
      break;
 8002f24:	e00c      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f26:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f30:	68d2      	ldr	r2, [r2, #12]
 8002f32:	0a12      	lsrs	r2, r2, #8
 8002f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
      break;
 8002f3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0e5b      	lsrs	r3, r3, #25
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	e001      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f60:	693b      	ldr	r3, [r7, #16]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f82:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d10c      	bne.n	8002fba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fa0:	4a17      	ldr	r2, [pc, #92]	; (8003000 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002faa:	68d2      	ldr	r2, [r2, #12]
 8002fac:	0a12      	lsrs	r2, r2, #8
 8002fae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	617b      	str	r3, [r7, #20]
    break;
 8002fb8:	e00c      	b.n	8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fc4:	68d2      	ldr	r2, [r2, #12]
 8002fc6:	0a12      	lsrs	r2, r2, #8
 8002fc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
    break;
 8002fd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0e5b      	lsrs	r3, r3, #25
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002fee:	687b      	ldr	r3, [r7, #4]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40021000 	.word	0x40021000
 8003000:	007a1200 	.word	0x007a1200
 8003004:	00f42400 	.word	0x00f42400

08003008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003010:	2300      	movs	r3, #0
 8003012:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003014:	2300      	movs	r3, #0
 8003016:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8098 	beq.w	8003156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302a:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	4b40      	ldr	r3, [pc, #256]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	4a3f      	ldr	r2, [pc, #252]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6593      	str	r3, [r2, #88]	; 0x58
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304e:	2301      	movs	r3, #1
 8003050:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003052:	4b3a      	ldr	r3, [pc, #232]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a39      	ldr	r2, [pc, #228]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800305e:	f7fd fcdf 	bl	8000a20 <HAL_GetTick>
 8003062:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003064:	e009      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fd fcdb 	bl	8000a20 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d902      	bls.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	74fb      	strb	r3, [r7, #19]
        break;
 8003078:	e005      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ef      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d159      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01e      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d019      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030a8:	4b23      	ldr	r3, [pc, #140]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030c4:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d016      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fd fc9b 	bl	8000a20 <HAL_GetTick>
 80030ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ec:	e00b      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fd fc97 	bl	8000a20 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d902      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	74fb      	strb	r3, [r7, #19]
            break;
 8003104:	e006      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ec      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	4903      	ldr	r1, [pc, #12]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003130:	e008      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	74bb      	strb	r3, [r7, #18]
 8003136:	e005      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003138:	40021000 	.word	0x40021000
 800313c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003144:	7c7b      	ldrb	r3, [r7, #17]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4ba6      	ldr	r3, [pc, #664]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	4aa5      	ldr	r2, [pc, #660]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003154:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003162:	4ba0      	ldr	r3, [pc, #640]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f023 0203 	bic.w	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	499c      	ldr	r1, [pc, #624]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003184:	4b97      	ldr	r3, [pc, #604]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 020c 	bic.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4994      	ldr	r1, [pc, #592]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031a6:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	498b      	ldr	r1, [pc, #556]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031c8:	4b86      	ldr	r3, [pc, #536]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	4983      	ldr	r1, [pc, #524]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ea:	4b7e      	ldr	r3, [pc, #504]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	497a      	ldr	r1, [pc, #488]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800320c:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	4972      	ldr	r1, [pc, #456]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800322e:	4b6d      	ldr	r3, [pc, #436]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	4969      	ldr	r1, [pc, #420]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003250:	4b64      	ldr	r3, [pc, #400]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4961      	ldr	r1, [pc, #388]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003272:	4b5c      	ldr	r3, [pc, #368]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	4958      	ldr	r1, [pc, #352]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003294:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	4950      	ldr	r1, [pc, #320]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b2:	d105      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b4:	4b4b      	ldr	r3, [pc, #300]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a4a      	ldr	r2, [pc, #296]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d015      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032cc:	4b45      	ldr	r3, [pc, #276]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	4942      	ldr	r1, [pc, #264]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ea:	d105      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032ec:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a3c      	ldr	r2, [pc, #240]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d015      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003304:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4934      	ldr	r1, [pc, #208]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003322:	d105      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a2e      	ldr	r2, [pc, #184]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800332a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d015      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	4926      	ldr	r1, [pc, #152]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800335a:	d105      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800335c:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003366:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d015      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	4918      	ldr	r1, [pc, #96]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003392:	d105      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800339e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	490a      	ldr	r1, [pc, #40]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ca:	d105      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80033d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000

080033e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033fa:	2b84      	cmp	r3, #132	; 0x84
 80033fc:	d005      	beq.n	800340a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	3303      	adds	r3, #3
 8003408:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800341c:	f001 f804 	bl	8004428 <vTaskStartScheduler>
  
  return osOK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	bd80      	pop	{r7, pc}

08003426 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003428:	b087      	sub	sp, #28
 800342a:	af02      	add	r7, sp, #8
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685c      	ldr	r4, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800343c:	b29e      	uxth	r6, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ffcf 	bl	80033e8 <makeFreeRtosPriority>
 800344a:	4602      	mov	r2, r0
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	9200      	str	r2, [sp, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4632      	mov	r2, r6
 8003458:	4629      	mov	r1, r5
 800345a:	4620      	mov	r0, r4
 800345c:	f000 fe7e 	bl	800415c <xTaskCreate>
 8003460:	4603      	mov	r3, r0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800346a:	68fb      	ldr	r3, [r7, #12]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003474 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <osDelay+0x16>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	e000      	b.n	800348c <osDelay+0x18>
 800348a:	2301      	movs	r3, #1
 800348c:	4618      	mov	r0, r3
 800348e:	f000 ff97 	bl	80043c0 <vTaskDelay>
  
  return osOK;
 8003492:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d110      	bne.n	80034ce <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80034ac:	2203      	movs	r2, #3
 80034ae:	2100      	movs	r1, #0
 80034b0:	2001      	movs	r0, #1
 80034b2:	f000 f93f 	bl	8003734 <xQueueGenericCreate>
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <osSemaphoreCreate+0x2e>
 80034be:	2300      	movs	r3, #0
 80034c0:	2200      	movs	r2, #0
 80034c2:	2100      	movs	r1, #0
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f98b 	bl	80037e0 <xQueueGenericSend>
    return sema;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	e000      	b.n	80034d0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80034ce:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	4619      	mov	r1, r3
 80034ee:	f000 f921 	bl	8003734 <xQueueGenericCreate>
 80034f2:	4603      	mov	r3, r0
#endif
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f103 0208 	add.w	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f04f 32ff 	mov.w	r2, #4294967295
 8003514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f103 0208 	add.w	r2, r3, #8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f103 0208 	add.w	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800359e:	b480      	push	{r7}
 80035a0:	b085      	sub	sp, #20
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d103      	bne.n	80035be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e00c      	b.n	80035d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3308      	adds	r3, #8
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e002      	b.n	80035cc <vListInsert+0x2e>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d2f6      	bcs.n	80035c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6892      	ldr	r2, [r2, #8]
 8003626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6852      	ldr	r2, [r2, #4]
 8003630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d103      	bne.n	8003644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800368e:	f001 fde1 	bl	8005254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	441a      	add	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	3b01      	subs	r3, #1
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d114      	bne.n	800370e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01a      	beq.n	8003722 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3310      	adds	r3, #16
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 f8c3 	bl	800487c <xTaskRemoveFromEventList>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <xQueueGenericReset+0xcc>)
 80036fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	e009      	b.n	8003722 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3310      	adds	r3, #16
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fef2 	bl	80034fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3324      	adds	r3, #36	; 0x24
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff feed 	bl	80034fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003722:	f001 fdc7 	bl	80052b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	e000ed04 	.word	0xe000ed04

08003734 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	613b      	str	r3, [r7, #16]
}
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	3348      	adds	r3, #72	; 0x48
 800376c:	4618      	mov	r0, r3
 800376e:	f001 fe93 	bl	8005498 <pvPortMalloc>
 8003772:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3348      	adds	r3, #72	; 0x48
 8003782:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003784:	79fa      	ldrb	r2, [r7, #7]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f805 	bl	80037a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003796:	69bb      	ldr	r3, [r7, #24]
	}
 8003798:	4618      	mov	r0, r3
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e002      	b.n	80037c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037ce:	2101      	movs	r1, #1
 80037d0:	69b8      	ldr	r0, [r7, #24]
 80037d2:	f7ff ff47 	bl	8003664 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08e      	sub	sp, #56	; 0x38
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericSend+0x32>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <xQueueGenericSend+0x40>
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <xQueueGenericSend+0x44>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <xQueueGenericSend+0x46>
 8003824:	2300      	movs	r3, #0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <xQueueGenericSend+0x60>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d103      	bne.n	800384e <xQueueGenericSend+0x6e>
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <xQueueGenericSend+0x72>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xQueueGenericSend+0x74>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xQueueGenericSend+0x8e>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	623b      	str	r3, [r7, #32]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800386e:	f001 f9a1 	bl	8004bb4 <xTaskGetSchedulerState>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <xQueueGenericSend+0x9e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <xQueueGenericSend+0xa2>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <xQueueGenericSend+0xa4>
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xQueueGenericSend+0xbe>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	61fb      	str	r3, [r7, #28]
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800389e:	f001 fcd9 	bl	8005254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <xQueueGenericSend+0xd4>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d129      	bne.n	8003908 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ba:	f000 fb3f 	bl	8003f3c <prvCopyDataToQueue>
 80038be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	3324      	adds	r3, #36	; 0x24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 ffd5 	bl	800487c <xTaskRemoveFromEventList>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <xQueueGenericSend+0x1f8>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	e00a      	b.n	8003900 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <xQueueGenericSend+0x1f8>)
 80038f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003900:	f001 fcd8 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 8003904:	2301      	movs	r3, #1
 8003906:	e063      	b.n	80039d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800390e:	f001 fcd1 	bl	80052b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003912:	2300      	movs	r3, #0
 8003914:	e05c      	b.n	80039d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	4618      	mov	r0, r3
 8003922:	f001 f80d 	bl	8004940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003926:	2301      	movs	r3, #1
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800392a:	f001 fcc3 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800392e:	f000 fdc3 	bl	80044b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003932:	f001 fc8f 	bl	8005254 <vPortEnterCritical>
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800393c:	b25b      	sxtb	r3, r3
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d103      	bne.n	800394c <xQueueGenericSend+0x16c>
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003952:	b25b      	sxtb	r3, r3
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d103      	bne.n	8003962 <xQueueGenericSend+0x182>
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003962:	f001 fca7 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003966:	1d3a      	adds	r2, r7, #4
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fffc 	bl	800496c <xTaskCheckForTimeOut>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d124      	bne.n	80039c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800397a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800397c:	f000 fbd6 	bl	800412c <prvIsQueueFull>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	3310      	adds	r3, #16
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 ff50 	bl	8004834 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003996:	f000 fb61 	bl	800405c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800399a:	f000 fd9b 	bl	80044d4 <xTaskResumeAll>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f47f af7c 	bne.w	800389e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <xQueueGenericSend+0x1f8>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	e772      	b.n	800389e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ba:	f000 fb4f 	bl	800405c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039be:	f000 fd89 	bl	80044d4 <xTaskResumeAll>
 80039c2:	e76c      	b.n	800389e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039c6:	f000 fb49 	bl	800405c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ca:	f000 fd83 	bl	80044d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3738      	adds	r7, #56	; 0x38
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	623b      	str	r3, [r7, #32]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	61fb      	str	r3, [r7, #28]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <xQueueGiveFromISR+0x58>
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <xQueueGiveFromISR+0x5c>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <xQueueGiveFromISR+0x5e>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	61bb      	str	r3, [r7, #24]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a54:	f001 fce0 	bl	8005418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a58:	f3ef 8211 	mrs	r2, BASEPRI
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	617a      	str	r2, [r7, #20]
 8003a6e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a70:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d22b      	bcs.n	8003adc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d112      	bne.n	8003ac6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d016      	beq.n	8003ad6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	3324      	adds	r3, #36	; 0x24
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fee5 	bl	800487c <xTaskRemoveFromEventList>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e007      	b.n	8003ad6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aca:	3301      	adds	r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	b25a      	sxtb	r2, r3
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8003ada:	e001      	b.n	8003ae0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3738      	adds	r7, #56	; 0x38
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <xQueueReceive+0x30>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	623b      	str	r3, [r7, #32]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <xQueueReceive+0x3e>
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <xQueueReceive+0x42>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <xQueueReceive+0x44>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <xQueueReceive+0x5e>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	61fb      	str	r3, [r7, #28]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b56:	f001 f82d 	bl	8004bb4 <xTaskGetSchedulerState>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <xQueueReceive+0x6e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <xQueueReceive+0x72>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <xQueueReceive+0x74>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xQueueReceive+0x8e>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61bb      	str	r3, [r7, #24]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b86:	f001 fb65 	bl	8005254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01f      	beq.n	8003bd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9a:	f000 fa39 	bl	8004010 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	1e5a      	subs	r2, r3, #1
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00f      	beq.n	8003bce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	3310      	adds	r3, #16
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fe62 	bl	800487c <xTaskRemoveFromEventList>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <xQueueReceive+0x1bc>)
 8003bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bce:	f001 fb71 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e069      	b.n	8003caa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bdc:	f001 fb6a 	bl	80052b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e062      	b.n	8003caa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bea:	f107 0310 	add.w	r3, r7, #16
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fea6 	bl	8004940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bf8:	f001 fb5c 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bfc:	f000 fc5c 	bl	80044b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c00:	f001 fb28 	bl	8005254 <vPortEnterCritical>
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d103      	bne.n	8003c1a <xQueueReceive+0x122>
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c20:	b25b      	sxtb	r3, r3
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d103      	bne.n	8003c30 <xQueueReceive+0x138>
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c30:	f001 fb40 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c34:	1d3a      	adds	r2, r7, #4
 8003c36:	f107 0310 	add.w	r3, r7, #16
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fe95 	bl	800496c <xTaskCheckForTimeOut>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d123      	bne.n	8003c90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4a:	f000 fa59 	bl	8004100 <prvIsQueueEmpty>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d017      	beq.n	8003c84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	3324      	adds	r3, #36	; 0x24
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fde9 	bl	8004834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c64:	f000 f9fa 	bl	800405c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c68:	f000 fc34 	bl	80044d4 <xTaskResumeAll>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d189      	bne.n	8003b86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <xQueueReceive+0x1bc>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	e780      	b.n	8003b86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c86:	f000 f9e9 	bl	800405c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c8a:	f000 fc23 	bl	80044d4 <xTaskResumeAll>
 8003c8e:	e77a      	b.n	8003b86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c92:	f000 f9e3 	bl	800405c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c96:	f000 fc1d 	bl	80044d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c9c:	f000 fa30 	bl	8004100 <prvIsQueueEmpty>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f43f af6f 	beq.w	8003b86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ca8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3730      	adds	r7, #48	; 0x30
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08e      	sub	sp, #56	; 0x38
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	623b      	str	r3, [r7, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	e7fe      	b.n	8003ce8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	61fb      	str	r3, [r7, #28]
}
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d08:	f000 ff54 	bl	8004bb4 <xTaskGetSchedulerState>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <xQueueSemaphoreTake+0x60>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <xQueueSemaphoreTake+0x64>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <xQueueSemaphoreTake+0x66>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	61bb      	str	r3, [r7, #24]
}
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d38:	f001 fa8c 	bl	8005254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d024      	beq.n	8003d92 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	1e5a      	subs	r2, r3, #1
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d58:	f001 f8d4 	bl	8004f04 <pvTaskIncrementMutexHeldCount>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00f      	beq.n	8003d8a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	3310      	adds	r3, #16
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fd84 	bl	800487c <xTaskRemoveFromEventList>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d7a:	4b54      	ldr	r3, [pc, #336]	; (8003ecc <xQueueSemaphoreTake+0x214>)
 8003d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d8a:	f001 fa93 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e097      	b.n	8003ec2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d111      	bne.n	8003dbc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	617b      	str	r3, [r7, #20]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003db4:	f001 fa7e 	bl	80052b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e082      	b.n	8003ec2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fdba 	bl	8004940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dd0:	f001 fa70 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dd4:	f000 fb70 	bl	80044b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dd8:	f001 fa3c 	bl	8005254 <vPortEnterCritical>
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d103      	bne.n	8003df2 <xQueueSemaphoreTake+0x13a>
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d103      	bne.n	8003e08 <xQueueSemaphoreTake+0x150>
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e08:	f001 fa54 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e0c:	463a      	mov	r2, r7
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fda9 	bl	800496c <xTaskCheckForTimeOut>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d132      	bne.n	8003e86 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e22:	f000 f96d 	bl	8004100 <prvIsQueueEmpty>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d026      	beq.n	8003e7a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e34:	f001 fa0e 	bl	8005254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fed7 	bl	8004bf0 <xTaskPriorityInherit>
 8003e42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e44:	f001 fa36 	bl	80052b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	3324      	adds	r3, #36	; 0x24
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fcef 	bl	8004834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e58:	f000 f900 	bl	800405c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e5c:	f000 fb3a 	bl	80044d4 <xTaskResumeAll>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f47f af68 	bne.w	8003d38 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003e68:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <xQueueSemaphoreTake+0x214>)
 8003e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	e75e      	b.n	8003d38 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e7c:	f000 f8ee 	bl	800405c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e80:	f000 fb28 	bl	80044d4 <xTaskResumeAll>
 8003e84:	e758      	b.n	8003d38 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e88:	f000 f8e8 	bl	800405c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e8c:	f000 fb22 	bl	80044d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e92:	f000 f935 	bl	8004100 <prvIsQueueEmpty>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f43f af4d 	beq.w	8003d38 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003ea4:	f001 f9d6 	bl	8005254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eaa:	f000 f82f 	bl	8003f0c <prvGetDisinheritPriorityAfterTimeout>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 ff96 	bl	8004de8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ebc:	f001 f9fa 	bl	80052b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ec0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3738      	adds	r7, #56	; 0x38
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	e000ed04 	.word	0xe000ed04

08003ed0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	60bb      	str	r3, [r7, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003ef4:	f001 f9ae 	bl	8005254 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003efe:	f001 f9d9 	bl	80052b4 <vPortExitCritical>

	return uxReturn;
 8003f02:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d006      	beq.n	8003f2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f1c3 0307 	rsb	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e001      	b.n	8003f2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
	}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10d      	bne.n	8003f76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d14d      	bne.n	8003ffe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 feb8 	bl	8004cdc <xTaskPriorityDisinherit>
 8003f6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	e043      	b.n	8003ffe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d119      	bne.n	8003fb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6858      	ldr	r0, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	461a      	mov	r2, r3
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	f001 fc94 	bl	80058b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	441a      	add	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d32b      	bcc.n	8003ffe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	e026      	b.n	8003ffe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68d8      	ldr	r0, [r3, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	f001 fc7a 	bl	80058b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	425b      	negs	r3, r3
 8003fca:	441a      	add	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d207      	bcs.n	8003fec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	425b      	negs	r3, r3
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d105      	bne.n	8003ffe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004006:	697b      	ldr	r3, [r7, #20]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d018      	beq.n	8004054 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	441a      	add	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	d303      	bcc.n	8004044 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68d9      	ldr	r1, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	461a      	mov	r2, r3
 800404e:	6838      	ldr	r0, [r7, #0]
 8004050:	f001 fc30 	bl	80058b4 <memcpy>
	}
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004064:	f001 f8f6 	bl	8005254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800406e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004070:	e011      	b.n	8004096 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d012      	beq.n	80040a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3324      	adds	r3, #36	; 0x24
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fbfc 	bl	800487c <xTaskRemoveFromEventList>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800408a:	f000 fcd1 	bl	8004a30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	3b01      	subs	r3, #1
 8004092:	b2db      	uxtb	r3, r3
 8004094:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	dce9      	bgt.n	8004072 <prvUnlockQueue+0x16>
 800409e:	e000      	b.n	80040a2 <prvUnlockQueue+0x46>
					break;
 80040a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	22ff      	movs	r2, #255	; 0xff
 80040a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040aa:	f001 f903 	bl	80052b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040ae:	f001 f8d1 	bl	8005254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ba:	e011      	b.n	80040e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d012      	beq.n	80040ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3310      	adds	r3, #16
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fbd7 	bl	800487c <xTaskRemoveFromEventList>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040d4:	f000 fcac 	bl	8004a30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040d8:	7bbb      	ldrb	r3, [r7, #14]
 80040da:	3b01      	subs	r3, #1
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	dce9      	bgt.n	80040bc <prvUnlockQueue+0x60>
 80040e8:	e000      	b.n	80040ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	22ff      	movs	r2, #255	; 0xff
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040f4:	f001 f8de 	bl	80052b4 <vPortExitCritical>
}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004108:	f001 f8a4 	bl	8005254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004114:	2301      	movs	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e001      	b.n	800411e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800411e:	f001 f8c9 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004134:	f001 f88e 	bl	8005254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	429a      	cmp	r2, r3
 8004142:	d102      	bne.n	800414a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004144:	2301      	movs	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e001      	b.n	800414e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800414e:	f001 f8b1 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af04      	add	r7, sp, #16
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4618      	mov	r0, r3
 8004172:	f001 f991 	bl	8005498 <pvPortMalloc>
 8004176:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00e      	beq.n	800419c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800417e:	2054      	movs	r0, #84	; 0x54
 8004180:	f001 f98a 	bl	8005498 <pvPortMalloc>
 8004184:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
 8004192:	e005      	b.n	80041a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f001 fa4b 	bl	8005630 <vPortFree>
 800419a:	e001      	b.n	80041a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d013      	beq.n	80041ce <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	2300      	movs	r3, #0
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	9302      	str	r3, [sp, #8]
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f80e 	bl	80041de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041c2:	69f8      	ldr	r0, [r7, #28]
 80041c4:	f000 f892 	bl	80042ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041c8:	2301      	movs	r3, #1
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	e002      	b.n	80041d4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041d4:	69bb      	ldr	r3, [r7, #24]
	}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b088      	sub	sp, #32
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041f6:	3b01      	subs	r3, #1
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f023 0307 	bic.w	r3, r3, #7
 8004204:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	617b      	str	r3, [r7, #20]
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01f      	beq.n	800426c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800422c:	2300      	movs	r3, #0
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e012      	b.n	8004258 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	7819      	ldrb	r1, [r3, #0]
 800423a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	3334      	adds	r3, #52	; 0x34
 8004242:	460a      	mov	r2, r1
 8004244:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3301      	adds	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b0f      	cmp	r3, #15
 800425c:	d9e9      	bls.n	8004232 <prvInitialiseNewTask+0x54>
 800425e:	e000      	b.n	8004262 <prvInitialiseNewTask+0x84>
			{
				break;
 8004260:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800426a:	e003      	b.n	8004274 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	2b06      	cmp	r3, #6
 8004278:	d901      	bls.n	800427e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800427a:	2306      	movs	r3, #6
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f951 	bl	800353c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	3318      	adds	r3, #24
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff f94c 	bl	800353c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	f1c3 0207 	rsb	r2, r3, #7
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	2200      	movs	r2, #0
 80042be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	69b8      	ldr	r0, [r7, #24]
 80042ce:	f000 fe93 	bl	8004ff8 <pxPortInitialiseStack>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042e4:	bf00      	nop
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042f4:	f000 ffae 	bl	8005254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042f8:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <prvAddNewTaskToReadyList+0xb8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <prvAddNewTaskToReadyList+0xb8>)
 8004300:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004302:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <prvAddNewTaskToReadyList+0xbc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800430a:	4a27      	ldr	r2, [pc, #156]	; (80043a8 <prvAddNewTaskToReadyList+0xbc>)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004310:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <prvAddNewTaskToReadyList+0xb8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d110      	bne.n	800433a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004318:	f000 fbae 	bl	8004a78 <prvInitialiseTaskLists>
 800431c:	e00d      	b.n	800433a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <prvAddNewTaskToReadyList+0xc0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004326:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <prvAddNewTaskToReadyList+0xbc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	429a      	cmp	r2, r3
 8004332:	d802      	bhi.n	800433a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <prvAddNewTaskToReadyList+0xbc>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <prvAddNewTaskToReadyList+0xc4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <prvAddNewTaskToReadyList+0xc4>)
 8004342:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	2201      	movs	r2, #1
 800434a:	409a      	lsls	r2, r3
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <prvAddNewTaskToReadyList+0xc8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4313      	orrs	r3, r2
 8004352:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <prvAddNewTaskToReadyList+0xc8>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <prvAddNewTaskToReadyList+0xcc>)
 8004364:	441a      	add	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7ff f8f2 	bl	8003556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004372:	f000 ff9f 	bl	80052b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <prvAddNewTaskToReadyList+0xc0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00e      	beq.n	800439c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <prvAddNewTaskToReadyList+0xbc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	429a      	cmp	r2, r3
 800438a:	d207      	bcs.n	800439c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <prvAddNewTaskToReadyList+0xd0>)
 800438e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000194 	.word	0x20000194
 80043a8:	20000094 	.word	0x20000094
 80043ac:	200001a0 	.word	0x200001a0
 80043b0:	200001b0 	.word	0x200001b0
 80043b4:	2000019c 	.word	0x2000019c
 80043b8:	20000098 	.word	0x20000098
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d017      	beq.n	8004402 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043d2:	4b13      	ldr	r3, [pc, #76]	; (8004420 <vTaskDelay+0x60>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <vTaskDelay+0x30>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	60bb      	str	r3, [r7, #8]
}
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043f0:	f000 f862 	bl	80044b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043f4:	2100      	movs	r1, #0
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fd98 	bl	8004f2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043fc:	f000 f86a 	bl	80044d4 <xTaskResumeAll>
 8004400:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d107      	bne.n	8004418 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <vTaskDelay+0x64>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	200001bc 	.word	0x200001bc
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <vTaskStartScheduler+0x78>)
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	2300      	movs	r3, #0
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	2280      	movs	r2, #128	; 0x80
 800443a:	491a      	ldr	r1, [pc, #104]	; (80044a4 <vTaskStartScheduler+0x7c>)
 800443c:	481a      	ldr	r0, [pc, #104]	; (80044a8 <vTaskStartScheduler+0x80>)
 800443e:	f7ff fe8d 	bl	800415c <xTaskCreate>
 8004442:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d116      	bne.n	8004478 <vTaskStartScheduler+0x50>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
}
 800445c:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <vTaskStartScheduler+0x84>)
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004466:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <vTaskStartScheduler+0x88>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <vTaskStartScheduler+0x8c>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004472:	f000 fe4d 	bl	8005110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004476:	e00e      	b.n	8004496 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d10a      	bne.n	8004496 <vTaskStartScheduler+0x6e>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	607b      	str	r3, [r7, #4]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <vTaskStartScheduler+0x6c>
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	200001b8 	.word	0x200001b8
 80044a4:	0800595c 	.word	0x0800595c
 80044a8:	08004a49 	.word	0x08004a49
 80044ac:	200001b4 	.word	0x200001b4
 80044b0:	200001a0 	.word	0x200001a0
 80044b4:	20000198 	.word	0x20000198

080044b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <vTaskSuspendAll+0x18>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <vTaskSuspendAll+0x18>)
 80044c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	200001bc 	.word	0x200001bc

080044d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044e2:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <xTaskResumeAll+0x114>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <xTaskResumeAll+0x2c>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	603b      	str	r3, [r7, #0]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004500:	f000 fea8 	bl	8005254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004504:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <xTaskResumeAll+0x114>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3b01      	subs	r3, #1
 800450a:	4a37      	ldr	r2, [pc, #220]	; (80045e8 <xTaskResumeAll+0x114>)
 800450c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450e:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <xTaskResumeAll+0x114>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d161      	bne.n	80045da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004516:	4b35      	ldr	r3, [pc, #212]	; (80045ec <xTaskResumeAll+0x118>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d05d      	beq.n	80045da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800451e:	e02e      	b.n	800457e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004520:	4b33      	ldr	r3, [pc, #204]	; (80045f0 <xTaskResumeAll+0x11c>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3318      	adds	r3, #24
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff f86f 	bl	8003610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3304      	adds	r3, #4
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f86a 	bl	8003610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	2201      	movs	r2, #1
 8004542:	409a      	lsls	r2, r3
 8004544:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <xTaskResumeAll+0x120>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <xTaskResumeAll+0x120>)
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <xTaskResumeAll+0x124>)
 800455c:	441a      	add	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fe fff6 	bl	8003556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <xTaskResumeAll+0x128>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	429a      	cmp	r2, r3
 8004576:	d302      	bcc.n	800457e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <xTaskResumeAll+0x12c>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800457e:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <xTaskResumeAll+0x11c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1cc      	bne.n	8004520 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800458c:	f000 faf2 	bl	8004b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <xTaskResumeAll+0x130>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d010      	beq.n	80045be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800459c:	f000 f836 	bl	800460c <xTaskIncrementTick>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80045a6:	4b16      	ldr	r3, [pc, #88]	; (8004600 <xTaskResumeAll+0x12c>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f1      	bne.n	800459c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <xTaskResumeAll+0x130>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045be:	4b10      	ldr	r3, [pc, #64]	; (8004600 <xTaskResumeAll+0x12c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <xTaskResumeAll+0x134>)
 80045cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045da:	f000 fe6b 	bl	80052b4 <vPortExitCritical>

	return xAlreadyYielded;
 80045de:	68bb      	ldr	r3, [r7, #8]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	200001bc 	.word	0x200001bc
 80045ec:	20000194 	.word	0x20000194
 80045f0:	20000154 	.word	0x20000154
 80045f4:	2000019c 	.word	0x2000019c
 80045f8:	20000098 	.word	0x20000098
 80045fc:	20000094 	.word	0x20000094
 8004600:	200001a8 	.word	0x200001a8
 8004604:	200001a4 	.word	0x200001a4
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004616:	4b4e      	ldr	r3, [pc, #312]	; (8004750 <xTaskIncrementTick+0x144>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 808e 	bne.w	800473c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004620:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <xTaskIncrementTick+0x148>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004628:	4a4a      	ldr	r2, [pc, #296]	; (8004754 <xTaskIncrementTick+0x148>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d120      	bne.n	8004676 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004634:	4b48      	ldr	r3, [pc, #288]	; (8004758 <xTaskIncrementTick+0x14c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <xTaskIncrementTick+0x48>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	603b      	str	r3, [r7, #0]
}
 8004650:	bf00      	nop
 8004652:	e7fe      	b.n	8004652 <xTaskIncrementTick+0x46>
 8004654:	4b40      	ldr	r3, [pc, #256]	; (8004758 <xTaskIncrementTick+0x14c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b40      	ldr	r3, [pc, #256]	; (800475c <xTaskIncrementTick+0x150>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3e      	ldr	r2, [pc, #248]	; (8004758 <xTaskIncrementTick+0x14c>)
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4a3e      	ldr	r2, [pc, #248]	; (800475c <xTaskIncrementTick+0x150>)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b3d      	ldr	r3, [pc, #244]	; (8004760 <xTaskIncrementTick+0x154>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	4a3c      	ldr	r2, [pc, #240]	; (8004760 <xTaskIncrementTick+0x154>)
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	f000 fa7f 	bl	8004b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004676:	4b3b      	ldr	r3, [pc, #236]	; (8004764 <xTaskIncrementTick+0x158>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	429a      	cmp	r2, r3
 800467e:	d348      	bcc.n	8004712 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004680:	4b35      	ldr	r3, [pc, #212]	; (8004758 <xTaskIncrementTick+0x14c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468a:	4b36      	ldr	r3, [pc, #216]	; (8004764 <xTaskIncrementTick+0x158>)
 800468c:	f04f 32ff 	mov.w	r2, #4294967295
 8004690:	601a      	str	r2, [r3, #0]
					break;
 8004692:	e03e      	b.n	8004712 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004694:	4b30      	ldr	r3, [pc, #192]	; (8004758 <xTaskIncrementTick+0x14c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d203      	bcs.n	80046b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046ac:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <xTaskIncrementTick+0x158>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046b2:	e02e      	b.n	8004712 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe ffa9 	bl	8003610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3318      	adds	r3, #24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe ffa0 	bl	8003610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	2201      	movs	r2, #1
 80046d6:	409a      	lsls	r2, r3
 80046d8:	4b23      	ldr	r3, [pc, #140]	; (8004768 <xTaskIncrementTick+0x15c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4313      	orrs	r3, r2
 80046de:	4a22      	ldr	r2, [pc, #136]	; (8004768 <xTaskIncrementTick+0x15c>)
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4a1f      	ldr	r2, [pc, #124]	; (800476c <xTaskIncrementTick+0x160>)
 80046f0:	441a      	add	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f7fe ff2c 	bl	8003556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <xTaskIncrementTick+0x164>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	429a      	cmp	r2, r3
 800470a:	d3b9      	bcc.n	8004680 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004710:	e7b6      	b.n	8004680 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004712:	4b17      	ldr	r3, [pc, #92]	; (8004770 <xTaskIncrementTick+0x164>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4914      	ldr	r1, [pc, #80]	; (800476c <xTaskIncrementTick+0x160>)
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d901      	bls.n	800472e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <xTaskIncrementTick+0x168>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e004      	b.n	8004746 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <xTaskIncrementTick+0x16c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <xTaskIncrementTick+0x16c>)
 8004744:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004746:	697b      	ldr	r3, [r7, #20]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	200001bc 	.word	0x200001bc
 8004754:	20000198 	.word	0x20000198
 8004758:	2000014c 	.word	0x2000014c
 800475c:	20000150 	.word	0x20000150
 8004760:	200001ac 	.word	0x200001ac
 8004764:	200001b4 	.word	0x200001b4
 8004768:	2000019c 	.word	0x2000019c
 800476c:	20000098 	.word	0x20000098
 8004770:	20000094 	.word	0x20000094
 8004774:	200001a8 	.word	0x200001a8
 8004778:	200001a4 	.word	0x200001a4

0800477c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004782:	4b27      	ldr	r3, [pc, #156]	; (8004820 <vTaskSwitchContext+0xa4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <vTaskSwitchContext+0xa8>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004790:	e03f      	b.n	8004812 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <vTaskSwitchContext+0xa8>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004798:	4b23      	ldr	r3, [pc, #140]	; (8004828 <vTaskSwitchContext+0xac>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	fab3 f383 	clz	r3, r3
 80047a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047a6:	7afb      	ldrb	r3, [r7, #11]
 80047a8:	f1c3 031f 	rsb	r3, r3, #31
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	491f      	ldr	r1, [pc, #124]	; (800482c <vTaskSwitchContext+0xb0>)
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	607b      	str	r3, [r7, #4]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <vTaskSwitchContext+0x5a>
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4a12      	ldr	r2, [pc, #72]	; (800482c <vTaskSwitchContext+0xb0>)
 80047e4:	4413      	add	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3308      	adds	r3, #8
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d104      	bne.n	8004808 <vTaskSwitchContext+0x8c>
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <vTaskSwitchContext+0xb4>)
 8004810:	6013      	str	r3, [r2, #0]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	200001bc 	.word	0x200001bc
 8004824:	200001a8 	.word	0x200001a8
 8004828:	2000019c 	.word	0x2000019c
 800482c:	20000098 	.word	0x20000098
 8004830:	20000094 	.word	0x20000094

08004834 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	60fb      	str	r3, [r7, #12]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <vTaskPlaceOnEventList+0x44>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3318      	adds	r3, #24
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fe fe9b 	bl	800359e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004868:	2101      	movs	r1, #1
 800486a:	6838      	ldr	r0, [r7, #0]
 800486c:	f000 fb5e 	bl	8004f2c <prvAddCurrentTaskToDelayedList>
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000094 	.word	0x20000094

0800487c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	3318      	adds	r3, #24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe feaf 	bl	8003610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <xTaskRemoveFromEventList+0xac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11c      	bne.n	80048f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3304      	adds	r3, #4
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe fea6 	bl	8003610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	2201      	movs	r2, #1
 80048ca:	409a      	lsls	r2, r3
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <xTaskRemoveFromEventList+0xb0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	4a16      	ldr	r2, [pc, #88]	; (800492c <xTaskRemoveFromEventList+0xb0>)
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <xTaskRemoveFromEventList+0xb4>)
 80048e4:	441a      	add	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f7fe fe32 	bl	8003556 <vListInsertEnd>
 80048f2:	e005      	b.n	8004900 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	3318      	adds	r3, #24
 80048f8:	4619      	mov	r1, r3
 80048fa:	480e      	ldr	r0, [pc, #56]	; (8004934 <xTaskRemoveFromEventList+0xb8>)
 80048fc:	f7fe fe2b 	bl	8003556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <xTaskRemoveFromEventList+0xbc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	429a      	cmp	r2, r3
 800490c:	d905      	bls.n	800491a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <xTaskRemoveFromEventList+0xc0>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e001      	b.n	800491e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800491e:	697b      	ldr	r3, [r7, #20]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	200001bc 	.word	0x200001bc
 800492c:	2000019c 	.word	0x2000019c
 8004930:	20000098 	.word	0x20000098
 8004934:	20000154 	.word	0x20000154
 8004938:	20000094 	.word	0x20000094
 800493c:	200001a8 	.word	0x200001a8

08004940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <vTaskInternalSetTimeOutState+0x24>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <vTaskInternalSetTimeOutState+0x28>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	605a      	str	r2, [r3, #4]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	200001ac 	.word	0x200001ac
 8004968:	20000198 	.word	0x20000198

0800496c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	613b      	str	r3, [r7, #16]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049ae:	f000 fc51 	bl	8005254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049b2:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <xTaskCheckForTimeOut+0xbc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ca:	d102      	bne.n	80049d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e023      	b.n	8004a1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <xTaskCheckForTimeOut+0xc0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d007      	beq.n	80049ee <xTaskCheckForTimeOut+0x82>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d302      	bcc.n	80049ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e015      	b.n	8004a1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d20b      	bcs.n	8004a10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	1ad2      	subs	r2, r2, r3
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ff9b 	bl	8004940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e004      	b.n	8004a1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a1a:	f000 fc4b 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000198 	.word	0x20000198
 8004a2c:	200001ac 	.word	0x200001ac

08004a30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <vTaskMissedYield+0x14>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	200001a8 	.word	0x200001a8

08004a48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a50:	f000 f852 	bl	8004af8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <prvIdleTask+0x28>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d9f9      	bls.n	8004a50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <prvIdleTask+0x2c>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a6c:	e7f0      	b.n	8004a50 <prvIdleTask+0x8>
 8004a6e:	bf00      	nop
 8004a70:	20000098 	.word	0x20000098
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	e00c      	b.n	8004a9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4a12      	ldr	r2, [pc, #72]	; (8004ad8 <prvInitialiseTaskLists+0x60>)
 8004a90:	4413      	add	r3, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fe fd32 	bl	80034fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b06      	cmp	r3, #6
 8004aa2:	d9ef      	bls.n	8004a84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004aa4:	480d      	ldr	r0, [pc, #52]	; (8004adc <prvInitialiseTaskLists+0x64>)
 8004aa6:	f7fe fd29 	bl	80034fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aaa:	480d      	ldr	r0, [pc, #52]	; (8004ae0 <prvInitialiseTaskLists+0x68>)
 8004aac:	f7fe fd26 	bl	80034fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ab0:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <prvInitialiseTaskLists+0x6c>)
 8004ab2:	f7fe fd23 	bl	80034fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ab6:	480c      	ldr	r0, [pc, #48]	; (8004ae8 <prvInitialiseTaskLists+0x70>)
 8004ab8:	f7fe fd20 	bl	80034fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004abc:	480b      	ldr	r0, [pc, #44]	; (8004aec <prvInitialiseTaskLists+0x74>)
 8004abe:	f7fe fd1d 	bl	80034fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <prvInitialiseTaskLists+0x78>)
 8004ac4:	4a05      	ldr	r2, [pc, #20]	; (8004adc <prvInitialiseTaskLists+0x64>)
 8004ac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <prvInitialiseTaskLists+0x7c>)
 8004aca:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <prvInitialiseTaskLists+0x68>)
 8004acc:	601a      	str	r2, [r3, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000098 	.word	0x20000098
 8004adc:	20000124 	.word	0x20000124
 8004ae0:	20000138 	.word	0x20000138
 8004ae4:	20000154 	.word	0x20000154
 8004ae8:	20000168 	.word	0x20000168
 8004aec:	20000180 	.word	0x20000180
 8004af0:	2000014c 	.word	0x2000014c
 8004af4:	20000150 	.word	0x20000150

08004af8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004afe:	e019      	b.n	8004b34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b00:	f000 fba8 	bl	8005254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b04:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <prvCheckTasksWaitingTermination+0x50>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fd7d 	bl	8003610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <prvCheckTasksWaitingTermination+0x54>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <prvCheckTasksWaitingTermination+0x54>)
 8004b1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <prvCheckTasksWaitingTermination+0x58>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <prvCheckTasksWaitingTermination+0x58>)
 8004b28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b2a:	f000 fbc3 	bl	80052b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f810 	bl	8004b54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <prvCheckTasksWaitingTermination+0x58>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e1      	bne.n	8004b00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000168 	.word	0x20000168
 8004b4c:	20000194 	.word	0x20000194
 8004b50:	2000017c 	.word	0x2000017c

08004b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fd65 	bl	8005630 <vPortFree>
			vPortFree( pxTCB );
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fd62 	bl	8005630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <prvResetNextTaskUnblockTime+0x38>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8004b86:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b8c:	e008      	b.n	8004ba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b8e:	4b07      	ldr	r3, [pc, #28]	; (8004bac <prvResetNextTaskUnblockTime+0x38>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8004b9e:	6013      	str	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	2000014c 	.word	0x2000014c
 8004bb0:	200001b4 	.word	0x200001b4

08004bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <xTaskGetSchedulerState+0x34>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	e008      	b.n	8004bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <xTaskGetSchedulerState+0x38>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	e001      	b.n	8004bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bda:	687b      	ldr	r3, [r7, #4]
	}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	200001a0 	.word	0x200001a0
 8004bec:	200001bc 	.word	0x200001bc

08004bf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d05e      	beq.n	8004cc4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	4b31      	ldr	r3, [pc, #196]	; (8004cd0 <xTaskPriorityInherit+0xe0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d24e      	bcs.n	8004cb2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db06      	blt.n	8004c2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1c:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <xTaskPriorityInherit+0xe0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f1c3 0207 	rsb	r2, r3, #7
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6959      	ldr	r1, [r3, #20]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4a26      	ldr	r2, [pc, #152]	; (8004cd4 <xTaskPriorityInherit+0xe4>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	d12f      	bne.n	8004ca2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe fce2 	bl	8003610 <uxListRemove>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	2201      	movs	r2, #1
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43da      	mvns	r2, r3
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <xTaskPriorityInherit+0xe8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4013      	ands	r3, r2
 8004c64:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <xTaskPriorityInherit+0xe8>)
 8004c66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <xTaskPriorityInherit+0xe0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	2201      	movs	r2, #1
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <xTaskPriorityInherit+0xe8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <xTaskPriorityInherit+0xe8>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <xTaskPriorityInherit+0xe4>)
 8004c92:	441a      	add	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7fe fc5b 	bl	8003556 <vListInsertEnd>
 8004ca0:	e004      	b.n	8004cac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <xTaskPriorityInherit+0xe0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e008      	b.n	8004cc4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <xTaskPriorityInherit+0xe0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d201      	bcs.n	8004cc4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
	}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000094 	.word	0x20000094
 8004cd4:	20000098 	.word	0x20000098
 8004cd8:	2000019c 	.word	0x2000019c

08004cdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d06e      	beq.n	8004dd0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cf2:	4b3a      	ldr	r3, [pc, #232]	; (8004ddc <xTaskPriorityDisinherit+0x100>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d00a      	beq.n	8004d12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	60fb      	str	r3, [r7, #12]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60bb      	str	r3, [r7, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d34:	1e5a      	subs	r2, r3, #1
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d044      	beq.n	8004dd0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d140      	bne.n	8004dd0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe fc5c 	bl	8003610 <uxListRemove>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d115      	bne.n	8004d8a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	491f      	ldr	r1, [pc, #124]	; (8004de0 <xTaskPriorityDisinherit+0x104>)
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xTaskPriorityDisinherit+0xae>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	2201      	movs	r2, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43da      	mvns	r2, r3
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <xTaskPriorityDisinherit+0x108>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4013      	ands	r3, r2
 8004d86:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <xTaskPriorityDisinherit+0x108>)
 8004d88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f1c3 0207 	rsb	r2, r3, #7
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	2201      	movs	r2, #1
 8004da4:	409a      	lsls	r2, r3
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <xTaskPriorityDisinherit+0x108>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	4a0d      	ldr	r2, [pc, #52]	; (8004de4 <xTaskPriorityDisinherit+0x108>)
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <xTaskPriorityDisinherit+0x104>)
 8004dbe:	441a      	add	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7fe fbc5 	bl	8003556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004dd0:	697b      	ldr	r3, [r7, #20]
	}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000094 	.word	0x20000094
 8004de0:	20000098 	.word	0x20000098
 8004de4:	2000019c 	.word	0x2000019c

08004de8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d077      	beq.n	8004ef0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60fb      	str	r3, [r7, #12]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d902      	bls.n	8004e2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	e002      	b.n	8004e34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d058      	beq.n	8004ef0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d153      	bne.n	8004ef0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e48:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d10a      	bne.n	8004e68 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60bb      	str	r3, [r7, #8]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	db04      	blt.n	8004e86 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f1c3 0207 	rsb	r2, r3, #7
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	6959      	ldr	r1, [r3, #20]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004e96:	4413      	add	r3, r2
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	d129      	bne.n	8004ef0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fbb5 	bl	8003610 <uxListRemove>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	4a10      	ldr	r2, [pc, #64]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ec0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	4a0b      	ldr	r2, [pc, #44]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4a06      	ldr	r2, [pc, #24]	; (8004efc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004ee2:	441a      	add	r2, r3
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fe fb33 	bl	8003556 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef0:	bf00      	nop
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000094 	.word	0x20000094
 8004efc:	20000098 	.word	0x20000098
 8004f00:	2000019c 	.word	0x2000019c

08004f04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f08:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f16:	3201      	adds	r2, #1
 8004f18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
	}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	20000094 	.word	0x20000094

08004f2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f36:	4b29      	ldr	r3, [pc, #164]	; (8004fdc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f3c:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe fb64 	bl	8003610 <uxListRemove>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f4e:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	2201      	movs	r2, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4013      	ands	r3, r2
 8004f62:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d10a      	bne.n	8004f84 <prvAddCurrentTaskToDelayedList+0x58>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f74:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	481a      	ldr	r0, [pc, #104]	; (8004fe8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f7e:	f7fe faea 	bl	8003556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f82:	e026      	b.n	8004fd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f8c:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d209      	bcs.n	8004fb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4610      	mov	r0, r2
 8004faa:	f7fe faf8 	bl	800359e <vListInsert>
}
 8004fae:	e010      	b.n	8004fd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f7fe faee 	bl	800359e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d202      	bcs.n	8004fd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fcc:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000198 	.word	0x20000198
 8004fe0:	20000094 	.word	0x20000094
 8004fe4:	2000019c 	.word	0x2000019c
 8004fe8:	20000180 	.word	0x20000180
 8004fec:	20000150 	.word	0x20000150
 8004ff0:	2000014c 	.word	0x2000014c
 8004ff4:	200001b4 	.word	0x200001b4

08004ff8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3b04      	subs	r3, #4
 8005008:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3b04      	subs	r3, #4
 8005016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f023 0201 	bic.w	r2, r3, #1
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3b04      	subs	r3, #4
 8005026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005028:	4a0c      	ldr	r2, [pc, #48]	; (800505c <pxPortInitialiseStack+0x64>)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3b14      	subs	r3, #20
 8005032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b04      	subs	r3, #4
 800503e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f06f 0202 	mvn.w	r2, #2
 8005046:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3b20      	subs	r3, #32
 800504c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800504e:	68fb      	ldr	r3, [r7, #12]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	08005061 	.word	0x08005061

08005060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800506a:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <prvTaskExitError+0x54>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d00a      	beq.n	800508a <prvTaskExitError+0x2a>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60fb      	str	r3, [r7, #12]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <prvTaskExitError+0x28>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	60bb      	str	r3, [r7, #8]
}
 800509c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800509e:	bf00      	nop
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0fc      	beq.n	80050a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050a6:	bf00      	nop
 80050a8:	bf00      	nop
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000010 	.word	0x20000010
	...

080050c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <pxCurrentTCBConst2>)
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	6808      	ldr	r0, [r1, #0]
 80050c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	f380 8809 	msr	PSP, r0
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	4770      	bx	lr
 80050dc:	f3af 8000 	nop.w

080050e0 <pxCurrentTCBConst2>:
 80050e0:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop

080050e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050e8:	4808      	ldr	r0, [pc, #32]	; (800510c <prvPortStartFirstTask+0x24>)
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f380 8808 	msr	MSP, r0
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8814 	msr	CONTROL, r0
 80050fa:	b662      	cpsie	i
 80050fc:	b661      	cpsie	f
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	df00      	svc	0
 8005108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800510a:	bf00      	nop
 800510c:	e000ed08 	.word	0xe000ed08

08005110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005116:	4b46      	ldr	r3, [pc, #280]	; (8005230 <xPortStartScheduler+0x120>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a46      	ldr	r2, [pc, #280]	; (8005234 <xPortStartScheduler+0x124>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10a      	bne.n	8005136 <xPortStartScheduler+0x26>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005136:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <xPortStartScheduler+0x120>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a3f      	ldr	r2, [pc, #252]	; (8005238 <xPortStartScheduler+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10a      	bne.n	8005156 <xPortStartScheduler+0x46>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60fb      	str	r3, [r7, #12]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005156:	4b39      	ldr	r3, [pc, #228]	; (800523c <xPortStartScheduler+0x12c>)
 8005158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <xPortStartScheduler+0x130>)
 800517c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800517e:	4b31      	ldr	r3, [pc, #196]	; (8005244 <xPortStartScheduler+0x134>)
 8005180:	2207      	movs	r2, #7
 8005182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005184:	e009      	b.n	800519a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <xPortStartScheduler+0x134>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3b01      	subs	r3, #1
 800518c:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <xPortStartScheduler+0x134>)
 800518e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d0ef      	beq.n	8005186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051a6:	4b27      	ldr	r3, [pc, #156]	; (8005244 <xPortStartScheduler+0x134>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1c3 0307 	rsb	r3, r3, #7
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d00a      	beq.n	80051c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60bb      	str	r3, [r7, #8]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c8:	4b1e      	ldr	r3, [pc, #120]	; (8005244 <xPortStartScheduler+0x134>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <xPortStartScheduler+0x134>)
 80051d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051d2:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <xPortStartScheduler+0x134>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051da:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <xPortStartScheduler+0x134>)
 80051dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <xPortStartScheduler+0x138>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <xPortStartScheduler+0x138>)
 80051ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <xPortStartScheduler+0x138>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <xPortStartScheduler+0x138>)
 80051f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051fe:	f000 f8dd 	bl	80053bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <xPortStartScheduler+0x13c>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005208:	f000 f8fc 	bl	8005404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <xPortStartScheduler+0x140>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <xPortStartScheduler+0x140>)
 8005212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005218:	f7ff ff66 	bl	80050e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800521c:	f7ff faae 	bl	800477c <vTaskSwitchContext>
	prvTaskExitError();
 8005220:	f7ff ff1e 	bl	8005060 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	e000ed00 	.word	0xe000ed00
 8005234:	410fc271 	.word	0x410fc271
 8005238:	410fc270 	.word	0x410fc270
 800523c:	e000e400 	.word	0xe000e400
 8005240:	200001c0 	.word	0x200001c0
 8005244:	200001c4 	.word	0x200001c4
 8005248:	e000ed20 	.word	0xe000ed20
 800524c:	20000010 	.word	0x20000010
 8005250:	e000ef34 	.word	0xe000ef34

08005254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
}
 800526c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <vPortEnterCritical+0x58>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <vPortEnterCritical+0x58>)
 8005276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <vPortEnterCritical+0x58>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10f      	bne.n	80052a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortEnterCritical+0x5c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <vPortEnterCritical+0x4a>
	}
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	20000010 	.word	0x20000010
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <vPortExitCritical+0x50>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <vPortExitCritical+0x24>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	607b      	str	r3, [r7, #4]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <vPortExitCritical+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3b01      	subs	r3, #1
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <vPortExitCritical+0x50>)
 80052e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <vPortExitCritical+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d105      	bne.n	80052f6 <vPortExitCritical+0x42>
 80052ea:	2300      	movs	r3, #0
 80052ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f383 8811 	msr	BASEPRI, r3
}
 80052f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000010 	.word	0x20000010
	...

08005310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005310:	f3ef 8009 	mrs	r0, PSP
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4b15      	ldr	r3, [pc, #84]	; (8005370 <pxCurrentTCBConst>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	f01e 0f10 	tst.w	lr, #16
 8005320:	bf08      	it	eq
 8005322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	6010      	str	r0, [r2, #0]
 800532c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005334:	f380 8811 	msr	BASEPRI, r0
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f7ff fa1c 	bl	800477c <vTaskSwitchContext>
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f380 8811 	msr	BASEPRI, r0
 800534c:	bc09      	pop	{r0, r3}
 800534e:	6819      	ldr	r1, [r3, #0]
 8005350:	6808      	ldr	r0, [r1, #0]
 8005352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005356:	f01e 0f10 	tst.w	lr, #16
 800535a:	bf08      	it	eq
 800535c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005360:	f380 8809 	msr	PSP, r0
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst>:
 8005370:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
}
 8005390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005392:	f7ff f93b 	bl	800460c <xTaskIncrementTick>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <xPortSysTickHandler+0x40>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f383 8811 	msr	BASEPRI, r3
}
 80053ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <vPortSetupTimerInterrupt+0x38>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <vPortSetupTimerInterrupt+0x3c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <vPortSetupTimerInterrupt+0x40>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	4a09      	ldr	r2, [pc, #36]	; (8005400 <vPortSetupTimerInterrupt+0x44>)
 80053da:	3b01      	subs	r3, #1
 80053dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053e0:	2207      	movs	r2, #7
 80053e2:	601a      	str	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	e000e010 	.word	0xe000e010
 80053f4:	e000e018 	.word	0xe000e018
 80053f8:	20000004 	.word	0x20000004
 80053fc:	10624dd3 	.word	0x10624dd3
 8005400:	e000e014 	.word	0xe000e014

08005404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005414 <vPortEnableVFP+0x10>
 8005408:	6801      	ldr	r1, [r0, #0]
 800540a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800540e:	6001      	str	r1, [r0, #0]
 8005410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005412:	bf00      	nop
 8005414:	e000ed88 	.word	0xe000ed88

08005418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800541e:	f3ef 8305 	mrs	r3, IPSR
 8005422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d914      	bls.n	8005454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <vPortValidateInterruptPriority+0x70>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <vPortValidateInterruptPriority+0x74>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	7afa      	ldrb	r2, [r7, #11]
 800543a:	429a      	cmp	r2, r3
 800543c:	d20a      	bcs.n	8005454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <vPortValidateInterruptPriority+0x78>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <vPortValidateInterruptPriority+0x7c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d90a      	bls.n	800547a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	603b      	str	r3, [r7, #0]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <vPortValidateInterruptPriority+0x60>
	}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000e3f0 	.word	0xe000e3f0
 800548c:	200001c0 	.word	0x200001c0
 8005490:	e000ed0c 	.word	0xe000ed0c
 8005494:	200001c4 	.word	0x200001c4

08005498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054a4:	f7ff f808 	bl	80044b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054a8:	4b5b      	ldr	r3, [pc, #364]	; (8005618 <pvPortMalloc+0x180>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054b0:	f000 f920 	bl	80056f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054b4:	4b59      	ldr	r3, [pc, #356]	; (800561c <pvPortMalloc+0x184>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f040 8093 	bne.w	80055e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01d      	beq.n	8005504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054c8:	2208      	movs	r2, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d014      	beq.n	8005504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	3308      	adds	r3, #8
 80054e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <pvPortMalloc+0x6c>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d06e      	beq.n	80055e8 <pvPortMalloc+0x150>
 800550a:	4b45      	ldr	r3, [pc, #276]	; (8005620 <pvPortMalloc+0x188>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d869      	bhi.n	80055e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005514:	4b43      	ldr	r3, [pc, #268]	; (8005624 <pvPortMalloc+0x18c>)
 8005516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005518:	4b42      	ldr	r3, [pc, #264]	; (8005624 <pvPortMalloc+0x18c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551e:	e004      	b.n	800552a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d903      	bls.n	800553c <pvPortMalloc+0xa4>
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f1      	bne.n	8005520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <pvPortMalloc+0x180>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	429a      	cmp	r2, r3
 8005544:	d050      	beq.n	80055e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2208      	movs	r2, #8
 800554c:	4413      	add	r3, r2
 800554e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	2308      	movs	r3, #8
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	429a      	cmp	r2, r3
 8005566:	d91f      	bls.n	80055a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <pvPortMalloc+0xf8>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	613b      	str	r3, [r7, #16]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055a2:	69b8      	ldr	r0, [r7, #24]
 80055a4:	f000 f908 	bl	80057b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <pvPortMalloc+0x188>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <pvPortMalloc+0x188>)
 80055b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <pvPortMalloc+0x188>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <pvPortMalloc+0x190>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d203      	bcs.n	80055ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <pvPortMalloc+0x188>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a18      	ldr	r2, [pc, #96]	; (8005628 <pvPortMalloc+0x190>)
 80055c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <pvPortMalloc+0x184>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <pvPortMalloc+0x194>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a11      	ldr	r2, [pc, #68]	; (800562c <pvPortMalloc+0x194>)
 80055e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055e8:	f7fe ff74 	bl	80044d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <pvPortMalloc+0x174>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60fb      	str	r3, [r7, #12]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <pvPortMalloc+0x172>
	return pvReturn;
 800560c:	69fb      	ldr	r3, [r7, #28]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000dd0 	.word	0x20000dd0
 800561c:	20000de4 	.word	0x20000de4
 8005620:	20000dd4 	.word	0x20000dd4
 8005624:	20000dc8 	.word	0x20000dc8
 8005628:	20000dd8 	.word	0x20000dd8
 800562c:	20000ddc 	.word	0x20000ddc

08005630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d04d      	beq.n	80056de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005642:	2308      	movs	r3, #8
 8005644:	425b      	negs	r3, r3
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <vPortFree+0xb8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4013      	ands	r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <vPortFree+0x44>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60fb      	str	r3, [r7, #12]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <vPortFree+0x62>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60bb      	str	r3, [r7, #8]
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <vPortFree+0xb8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01e      	beq.n	80056de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11a      	bne.n	80056de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <vPortFree+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056b8:	f7fe fefe 	bl	80044b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <vPortFree+0xbc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <vPortFree+0xbc>)
 80056c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f000 f874 	bl	80057b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <vPortFree+0xc0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a06      	ldr	r2, [pc, #24]	; (80056f0 <vPortFree+0xc0>)
 80056d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056da:	f7fe fefb 	bl	80044d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000de4 	.word	0x20000de4
 80056ec:	20000dd4 	.word	0x20000dd4
 80056f0:	20000de0 	.word	0x20000de0

080056f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <prvHeapInit+0xac>)
 8005702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3307      	adds	r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <prvHeapInit+0xac>)
 8005724:	4413      	add	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <prvHeapInit+0xb0>)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <prvHeapInit+0xb0>)
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005740:	2208      	movs	r2, #8
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0307 	bic.w	r3, r3, #7
 800574e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <prvHeapInit+0xb4>)
 8005754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <prvHeapInit+0xb4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <prvHeapInit+0xb4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvHeapInit+0xb4>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <prvHeapInit+0xb8>)
 8005782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <prvHeapInit+0xbc>)
 800578a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvHeapInit+0xc0>)
 800578e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	200001c8 	.word	0x200001c8
 80057a4:	20000dc8 	.word	0x20000dc8
 80057a8:	20000dd0 	.word	0x20000dd0
 80057ac:	20000dd8 	.word	0x20000dd8
 80057b0:	20000dd4 	.word	0x20000dd4
 80057b4:	20000de4 	.word	0x20000de4

080057b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057c0:	4b28      	ldr	r3, [pc, #160]	; (8005864 <prvInsertBlockIntoFreeList+0xac>)
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <prvInsertBlockIntoFreeList+0x14>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d8f7      	bhi.n	80057c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4413      	add	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d108      	bne.n	80057fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	441a      	add	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	441a      	add	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d118      	bne.n	8005840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <prvInsertBlockIntoFreeList+0xb0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d00d      	beq.n	8005836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	441a      	add	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	e008      	b.n	8005848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <prvInsertBlockIntoFreeList+0xb0>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e003      	b.n	8005848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	429a      	cmp	r2, r3
 800584e:	d002      	beq.n	8005856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000dc8 	.word	0x20000dc8
 8005868:	20000dd0 	.word	0x20000dd0

0800586c <__libc_init_array>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4d0d      	ldr	r5, [pc, #52]	; (80058a4 <__libc_init_array+0x38>)
 8005870:	4c0d      	ldr	r4, [pc, #52]	; (80058a8 <__libc_init_array+0x3c>)
 8005872:	1b64      	subs	r4, r4, r5
 8005874:	10a4      	asrs	r4, r4, #2
 8005876:	2600      	movs	r6, #0
 8005878:	42a6      	cmp	r6, r4
 800587a:	d109      	bne.n	8005890 <__libc_init_array+0x24>
 800587c:	4d0b      	ldr	r5, [pc, #44]	; (80058ac <__libc_init_array+0x40>)
 800587e:	4c0c      	ldr	r4, [pc, #48]	; (80058b0 <__libc_init_array+0x44>)
 8005880:	f000 f82e 	bl	80058e0 <_init>
 8005884:	1b64      	subs	r4, r4, r5
 8005886:	10a4      	asrs	r4, r4, #2
 8005888:	2600      	movs	r6, #0
 800588a:	42a6      	cmp	r6, r4
 800588c:	d105      	bne.n	800589a <__libc_init_array+0x2e>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	f855 3b04 	ldr.w	r3, [r5], #4
 8005894:	4798      	blx	r3
 8005896:	3601      	adds	r6, #1
 8005898:	e7ee      	b.n	8005878 <__libc_init_array+0xc>
 800589a:	f855 3b04 	ldr.w	r3, [r5], #4
 800589e:	4798      	blx	r3
 80058a0:	3601      	adds	r6, #1
 80058a2:	e7f2      	b.n	800588a <__libc_init_array+0x1e>
 80058a4:	08005974 	.word	0x08005974
 80058a8:	08005974 	.word	0x08005974
 80058ac:	08005974 	.word	0x08005974
 80058b0:	08005978 	.word	0x08005978

080058b4 <memcpy>:
 80058b4:	440a      	add	r2, r1
 80058b6:	4291      	cmp	r1, r2
 80058b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058bc:	d100      	bne.n	80058c0 <memcpy+0xc>
 80058be:	4770      	bx	lr
 80058c0:	b510      	push	{r4, lr}
 80058c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ca:	4291      	cmp	r1, r2
 80058cc:	d1f9      	bne.n	80058c2 <memcpy+0xe>
 80058ce:	bd10      	pop	{r4, pc}

080058d0 <memset>:
 80058d0:	4402      	add	r2, r0
 80058d2:	4603      	mov	r3, r0
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d100      	bne.n	80058da <memset+0xa>
 80058d8:	4770      	bx	lr
 80058da:	f803 1b01 	strb.w	r1, [r3], #1
 80058de:	e7f9      	b.n	80058d4 <memset+0x4>

080058e0 <_init>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr

080058ec <_fini>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr
